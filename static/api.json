{
    "data": [
        {
            "name": "eel_list",
            "langs": {
                "e_doc": "<div class=\"e_doc\"><br><hr><h3>ReaScript/EEL2 API</h3>\n"
            },
            "dist": 0
        },
        {
            "name": "lua_list",
            "langs": {
                "l_doc": "</div><div class=\"l_doc\"><br><hr><h3>ReaScript/Lua API</h3>\n"
            },
            "dist": 0
        },
        {
            "name": "python_list",
            "langs": {
                "p_doc": "</div><div class=\"p_doc\"><br><hr><h3>ReaScript/Python API</h3>\n"
            },
            "dist": 0
        },
        {
            "name": "AddProjectMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem* AddMediaItemToTrack(MediaTrack* tr)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem</i>  AddMediaItemToTrack(<i>MediaTrack</i> tr)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem</i> reaper.AddMediaItemToTrack(<i>MediaTrack</i> tr)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem</i>  RPR_AddMediaItemToTrack(<i>MediaTrack</i> tr)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "AddProjectMarker2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int AddProjectMarker(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> AddProjectMarker(<i>ReaProject</i> proj, <i>bool </i>isrgn, pos, rgnend, \"name\", <i>int </i>wantidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.AddProjectMarker(<i>ReaProject</i> proj, <i>boolean</i> isrgn, <i>number</i> pos, <i>number</i> rgnend, <i>string</i> name, <i>integer</i> wantidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_AddProjectMarker(<i>ReaProject</i> proj, <i>Boolean</i> isrgn, <i>Float</i> pos, <i>Float</i> rgnend, <i>String</i> name, <i>Int</i> wantidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "AddRemoveReaScript",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int AddProjectMarker2(ReaProject* proj, bool isrgn, double pos, double rgnend, const char* name, int wantidx, int color)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> AddProjectMarker2(<i>ReaProject</i> proj, <i>bool </i>isrgn, pos, rgnend, \"name\", <i>int </i>wantidx, <i>int </i>color)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.AddProjectMarker2(<i>ReaProject</i> proj, <i>boolean</i> isrgn, <i>number</i> pos, <i>number</i> rgnend, <i>string</i> name, <i>integer</i> wantidx, <i>integer</i> color)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_AddProjectMarker2(<i>ReaProject</i> proj, <i>Boolean</i> isrgn, <i>Float</i> pos, <i>Float</i> rgnend, <i>String</i> name, <i>Int</i> wantidx, <i>Int</i> color)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "AddTakeToMediaItem",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int AddRemoveReaScript(bool add, int sectionID, const char* scriptfn, bool commit)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> AddRemoveReaScript(<i>bool </i>add, <i>int </i>sectionID, \"scriptfn\", <i>bool </i>commit)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.AddRemoveReaScript(<i>boolean</i> add, <i>integer</i> sectionID, <i>string</i> scriptfn, <i>boolean</i> commit)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_AddRemoveReaScript(<i>Boolean</i> add, <i>Int</i> sectionID, <i>String</i> scriptfn, <i>Boolean</i> commit)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "AddTempoTimeSigMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem_Take* AddTakeToMediaItem(MediaItem* item)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem_Take</i>  AddTakeToMediaItem(<i>MediaItem</i> item)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem_Take</i> reaper.AddTakeToMediaItem(<i>MediaItem</i> item)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem_Take</i>  RPR_AddTakeToMediaItem(<i>MediaItem</i> item)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "adjustZoom",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool AddTempoTimeSigMarker(ReaProject* proj, double timepos, double bpm, int timesig_num, int timesig_denom, bool lineartempochange)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> AddTempoTimeSigMarker(<i>ReaProject</i> proj, timepos, bpm, <i>int </i>timesig_num, <i>int </i>timesig_denom, <i>bool </i>lineartempochange)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.AddTempoTimeSigMarker(<i>ReaProject</i> proj, <i>number</i> timepos, <i>number</i> bpm, <i>integer</i> timesig_num, <i>integer</i> timesig_denom, <i>boolean</i> lineartempochange)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_AddTempoTimeSigMarker(<i>ReaProject</i> proj, <i>Float</i> timepos, <i>Float</i> bpm, <i>Int</i> timesig_num, <i>Int</i> timesig_denom, <i>Boolean</i> lineartempochange)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "AnyTrackSolo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void adjustZoom(double amt, int forceset, bool doupd, int centermode)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>adjustZoom(amt, <i>int </i>forceset, <i>bool </i>doupd, <i>int </i>centermode)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.adjustZoom(<i>number</i> amt, <i>integer</i> forceset, <i>boolean</i> doupd, <i>integer</i> centermode)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_adjustZoom(<i>Float</i> amt, <i>Int</i> forceset, <i>Boolean</i> doupd, <i>Int</i> centermode)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "APIExists",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool AnyTrackSolo(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> AnyTrackSolo(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.AnyTrackSolo(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_AnyTrackSolo(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "APITest",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool APIExists(const char* function_name)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> APIExists(\"function_name\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.APIExists(<i>string</i> function_name)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_APIExists(<i>String</i> function_name)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ApplyNudge",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void APITest()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>APITest()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.APITest()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_APITest()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ArmCommand",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool ApplyNudge(ReaProject* project, int nudgeflag, int nudgewhat, int nudgeunits, double value, bool reverse, int copies)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> ApplyNudge(<i>ReaProject</i> project, <i>int </i>nudgeflag, <i>int </i>nudgewhat, <i>int </i>nudgeunits, value, <i>bool </i>reverse, <i>int </i>copies)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.ApplyNudge(<i>ReaProject</i> project, <i>integer</i> nudgeflag, <i>integer</i> nudgewhat, <i>integer</i> nudgeunits, <i>number</i> value, <i>boolean</i> reverse, <i>integer</i> copies)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_ApplyNudge(<i>ReaProject</i> project, <i>Int</i> nudgeflag, <i>Int</i> nudgewhat, <i>Int</i> nudgeunits, <i>Float</i> value, <i>Boolean</i> reverse, <i>Int</i> copies)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Audio_Init",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void ArmCommand(int cmd, const char* sectionname)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>ArmCommand(<i>int </i>cmd, \"sectionname\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.ArmCommand(<i>integer</i> cmd, <i>string</i> sectionname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_ArmCommand(<i>Int</i> cmd, <i>String</i> sectionname)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Audio_IsPreBuffer",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Audio_Init()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Audio_Init()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Audio_Init()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Audio_Init()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Audio_IsRunning",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int Audio_IsPreBuffer()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> Audio_IsPreBuffer()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.Audio_IsPreBuffer()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_Audio_IsPreBuffer()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Audio_Quit",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int Audio_IsRunning()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> Audio_IsRunning()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.Audio_IsRunning()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_Audio_IsRunning()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "AudioAccessorStateChanged",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Audio_Quit()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Audio_Quit()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Audio_Quit()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Audio_Quit()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "AudioAccessorUpdate",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool AudioAccessorStateChanged(AudioAccessor* accessor)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> AudioAccessorStateChanged(<i>AudioAccessor</i> accessor)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.AudioAccessorStateChanged(<i>AudioAccessor</i> accessor)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_AudioAccessorStateChanged(<i>AudioAccessor</i> accessor)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "AudioAccessorValidateState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void AudioAccessorUpdate(AudioAccessor* accessor)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>AudioAccessorUpdate(<i>AudioAccessor</i> accessor)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.AudioAccessorUpdate(<i>AudioAccessor</i> accessor)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_AudioAccessorUpdate(<i>AudioAccessor</i> accessor)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "BypassFxAllTracks",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool AudioAccessorValidateState(AudioAccessor* accessor)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> AudioAccessorValidateState(<i>AudioAccessor</i> accessor)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.AudioAccessorValidateState(<i>AudioAccessor</i> accessor)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_AudioAccessorValidateState(<i>AudioAccessor</i> accessor)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ClearAllRecArmed",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void BypassFxAllTracks(int bypass)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>BypassFxAllTracks(<i>int </i>bypass)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.BypassFxAllTracks(<i>integer</i> bypass)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_BypassFxAllTracks(<i>Int</i> bypass)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ClearConsole",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void ClearAllRecArmed()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>ClearAllRecArmed()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.ClearAllRecArmed()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_ClearAllRecArmed()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ClearPeakCache",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void ClearConsole()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>ClearConsole()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.ClearConsole()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_ClearConsole()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ColorFromNative",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void ClearPeakCache()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>ClearPeakCache()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.ClearPeakCache()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_ClearPeakCache()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ColorToNative",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void ColorFromNative(int col, int* rOut, int* gOut, int* bOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>ColorFromNative(<i>int </i>col, <i>int &amp;</i>r, <i>int &amp;</i>g, <i>int &amp;</i>b)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number </i>r, <i>number </i>g, <i>number </i>b = reaper.ColorFromNative(<i>integer</i> col)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> col, <i>Int</i> rOut, <i>Int</i> gOut, <i>Int</i> bOut) = RPR_ColorFromNative(col, rOut, gOut, bOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountAutomationItems",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int ColorToNative(int r, int g, int b)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> ColorToNative(<i>int </i>r, <i>int </i>g, <i>int </i>b)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.ColorToNative(<i>integer</i> r, <i>integer</i> g, <i>integer</i> b)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_ColorToNative(<i>Int</i> r, <i>Int</i> g, <i>Int</i> b)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountEnvelopePoints",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountAutomationItems(TrackEnvelope* env)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountAutomationItems(<i>TrackEnvelope</i> env)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountAutomationItems(<i>TrackEnvelope</i> env)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountAutomationItems(<i>TrackEnvelope</i> env)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountEnvelopePointsEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountEnvelopePoints(TrackEnvelope* envelope)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountEnvelopePoints(<i>TrackEnvelope</i> envelope)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountEnvelopePoints(<i>TrackEnvelope</i> envelope)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountEnvelopePoints(<i>TrackEnvelope</i> envelope)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountMediaItems",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountEnvelopePointsEx(TrackEnvelope* envelope, int autoitem_idx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountEnvelopePointsEx(<i>TrackEnvelope</i> envelope, <i>int </i>autoitem_idx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountEnvelopePointsEx(<i>TrackEnvelope</i> envelope, <i>integer</i> autoitem_idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountEnvelopePointsEx(<i>TrackEnvelope</i> envelope, <i>Int</i> autoitem_idx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountProjectMarkers",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountMediaItems(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountMediaItems(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountMediaItems(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountMediaItems(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountSelectedMediaItems",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountProjectMarkers(ReaProject* proj, int* num_markersOut, int* num_regionsOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountProjectMarkers(<i>ReaProject</i> proj, <i>int &amp;</i>num_markers, <i>int &amp;</i>num_regions)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>number </i>num_markers, <i>number </i>num_regions = reaper.CountProjectMarkers(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>ReaProject</i> proj, <i>Int</i> num_markersOut, <i>Int</i> num_regionsOut) = RPR_CountProjectMarkers(proj, num_markersOut, num_regionsOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountSelectedTracks",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountSelectedMediaItems(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountSelectedMediaItems(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountSelectedMediaItems(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountSelectedMediaItems(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountSelectedTracks2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountSelectedTracks(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountSelectedTracks(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountSelectedTracks(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountSelectedTracks(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountTakeEnvelopes",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountSelectedTracks2(ReaProject* proj, bool wantmaster)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountSelectedTracks2(<i>ReaProject</i> proj, <i>bool </i>wantmaster)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountSelectedTracks2(<i>ReaProject</i> proj, <i>boolean</i> wantmaster)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountSelectedTracks2(<i>ReaProject</i> proj, <i>Boolean</i> wantmaster)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountTakes",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountTakeEnvelopes(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountTakeEnvelopes(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountTakeEnvelopes(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountTakeEnvelopes(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountTCPFXParms",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountTakes(MediaItem* item)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountTakes(<i>MediaItem</i> item)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountTakes(<i>MediaItem</i> item)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountTakes(<i>MediaItem</i> item)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountTempoTimeSigMarkers",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountTCPFXParms(ReaProject* project, MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountTCPFXParms(<i>ReaProject</i> project, <i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountTCPFXParms(<i>ReaProject</i> project, <i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountTCPFXParms(<i>ReaProject</i> project, <i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountTrackEnvelopes",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountTempoTimeSigMarkers(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountTempoTimeSigMarkers(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountTempoTimeSigMarkers(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountTempoTimeSigMarkers(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountTrackMediaItems",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountTrackEnvelopes(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountTrackEnvelopes(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountTrackEnvelopes(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountTrackEnvelopes(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CountTracks",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountTrackMediaItems(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountTrackMediaItems(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountTrackMediaItems(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountTrackMediaItems(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CreateNewMIDIItemInProj",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CountTracks(ReaProject* projOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CountTracks(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CountTracks(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CountTracks(<i>ReaProject</i> projOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CreateTakeAudioAccessor",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem* CreateNewMIDIItemInProj(MediaTrack* track, double starttime, double endtime, const bool* qnInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem</i>  CreateNewMIDIItemInProj(<i>MediaTrack</i> track, starttime, endtime, <i>optional bool</i> qnIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem</i> reaper.CreateNewMIDIItemInProj(<i>MediaTrack</i> track, <i>number</i> starttime, <i>number</i> endtime, <i>optional boolean</i> qnIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem</i>  RPR_CreateNewMIDIItemInProj(<i>MediaTrack</i> track, <i>Float</i> starttime, <i>Float</i> endtime, <i>const bool</i> qnInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CreateTrackAudioAccessor",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>AudioAccessor* CreateTakeAudioAccessor(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>AudioAccessor</i>  CreateTakeAudioAccessor(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>AudioAccessor</i> reaper.CreateTakeAudioAccessor(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>AudioAccessor</i>  RPR_CreateTakeAudioAccessor(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CreateTrackSend",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>AudioAccessor* CreateTrackAudioAccessor(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>AudioAccessor</i>  CreateTrackAudioAccessor(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>AudioAccessor</i> reaper.CreateTrackAudioAccessor(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>AudioAccessor</i>  RPR_CreateTrackAudioAccessor(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_FlushUndo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CreateTrackSend(MediaTrack* tr, MediaTrack* desttrInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CreateTrackSend(<i>MediaTrack</i> tr, <i>MediaTrack</i> desttrIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CreateTrackSend(<i>MediaTrack</i> tr, <i>MediaTrack</i> desttrIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CreateTrackSend(<i>MediaTrack</i> tr, <i>MediaTrack</i> desttrInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_GetTouchState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_FlushUndo(bool force)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_FlushUndo(<i>bool </i>force)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_FlushUndo(<i>boolean</i> force)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_FlushUndo(<i>Boolean</i> force)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_GoEnd",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool CSurf_GetTouchState(MediaTrack* trackid, int isPan)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> CSurf_GetTouchState(<i>MediaTrack</i> trackid, <i>int </i>isPan)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.CSurf_GetTouchState(<i>MediaTrack</i> trackid, <i>integer</i> isPan)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_CSurf_GetTouchState(<i>MediaTrack</i> trackid, <i>Int</i> isPan)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_GoStart",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_GoEnd()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_GoEnd()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_GoEnd()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_GoEnd()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_NumTracks",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_GoStart()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_GoStart()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_GoStart()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_GoStart()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnArrow",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CSurf_NumTracks(bool mcpView)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CSurf_NumTracks(<i>bool </i>mcpView)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CSurf_NumTracks(<i>boolean</i> mcpView)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CSurf_NumTracks(<i>Boolean</i> mcpView)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnFwd",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnArrow(int whichdir, bool wantzoom)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnArrow(<i>int </i>whichdir, <i>bool </i>wantzoom)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnArrow(<i>integer</i> whichdir, <i>boolean</i> wantzoom)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnArrow(<i>Int</i> whichdir, <i>Boolean</i> wantzoom)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnFXChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnFwd(int seekplay)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnFwd(<i>int </i>seekplay)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnFwd(<i>integer</i> seekplay)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnFwd(<i>Int</i> seekplay)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnInputMonitorChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool CSurf_OnFXChange(MediaTrack* trackid, int en)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> CSurf_OnFXChange(<i>MediaTrack</i> trackid, <i>int </i>en)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.CSurf_OnFXChange(<i>MediaTrack</i> trackid, <i>integer</i> en)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_CSurf_OnFXChange(<i>MediaTrack</i> trackid, <i>Int</i> en)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnInputMonitorChangeEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CSurf_OnInputMonitorChange(MediaTrack* trackid, int monitor)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CSurf_OnInputMonitorChange(<i>MediaTrack</i> trackid, <i>int </i>monitor)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CSurf_OnInputMonitorChange(<i>MediaTrack</i> trackid, <i>integer</i> monitor)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CSurf_OnInputMonitorChange(<i>MediaTrack</i> trackid, <i>Int</i> monitor)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnMuteChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CSurf_OnInputMonitorChangeEx(MediaTrack* trackid, int monitor, bool allowgang)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CSurf_OnInputMonitorChangeEx(<i>MediaTrack</i> trackid, <i>int </i>monitor, <i>bool </i>allowgang)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CSurf_OnInputMonitorChangeEx(<i>MediaTrack</i> trackid, <i>integer</i> monitor, <i>boolean</i> allowgang)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CSurf_OnInputMonitorChangeEx(<i>MediaTrack</i> trackid, <i>Int</i> monitor, <i>Boolean</i> allowgang)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnMuteChangeEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool CSurf_OnMuteChange(MediaTrack* trackid, int mute)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> CSurf_OnMuteChange(<i>MediaTrack</i> trackid, <i>int </i>mute)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.CSurf_OnMuteChange(<i>MediaTrack</i> trackid, <i>integer</i> mute)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_CSurf_OnMuteChange(<i>MediaTrack</i> trackid, <i>Int</i> mute)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnPanChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool CSurf_OnMuteChangeEx(MediaTrack* trackid, int mute, bool allowgang)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> CSurf_OnMuteChangeEx(<i>MediaTrack</i> trackid, <i>int </i>mute, <i>bool </i>allowgang)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.CSurf_OnMuteChangeEx(<i>MediaTrack</i> trackid, <i>integer</i> mute, <i>boolean</i> allowgang)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_CSurf_OnMuteChangeEx(<i>MediaTrack</i> trackid, <i>Int</i> mute, <i>Boolean</i> allowgang)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnPanChangeEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double CSurf_OnPanChange(MediaTrack* trackid, double pan, bool relative)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> CSurf_OnPanChange(<i>MediaTrack</i> trackid, pan, <i>bool </i>relative)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.CSurf_OnPanChange(<i>MediaTrack</i> trackid, <i>number</i> pan, <i>boolean</i> relative)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_CSurf_OnPanChange(<i>MediaTrack</i> trackid, <i>Float</i> pan, <i>Boolean</i> relative)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnPause",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double CSurf_OnPanChangeEx(MediaTrack* trackid, double pan, bool relative, bool allowGang)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> CSurf_OnPanChangeEx(<i>MediaTrack</i> trackid, pan, <i>bool </i>relative, <i>bool </i>allowGang)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.CSurf_OnPanChangeEx(<i>MediaTrack</i> trackid, <i>number</i> pan, <i>boolean</i> relative, <i>boolean</i> allowGang)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_CSurf_OnPanChangeEx(<i>MediaTrack</i> trackid, <i>Float</i> pan, <i>Boolean</i> relative, <i>Boolean</i> allowGang)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnPlay",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnPause()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnPause()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnPause()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnPause()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnPlayRateChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnPlay()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnPlay()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnPlay()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnPlay()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnRecArmChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnPlayRateChange(double playrate)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnPlayRateChange(playrate)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnPlayRateChange(<i>number</i> playrate)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnPlayRateChange(<i>Float</i> playrate)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnRecArmChangeEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool CSurf_OnRecArmChange(MediaTrack* trackid, int recarm)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> CSurf_OnRecArmChange(<i>MediaTrack</i> trackid, <i>int </i>recarm)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.CSurf_OnRecArmChange(<i>MediaTrack</i> trackid, <i>integer</i> recarm)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_CSurf_OnRecArmChange(<i>MediaTrack</i> trackid, <i>Int</i> recarm)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnRecord",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool CSurf_OnRecArmChangeEx(MediaTrack* trackid, int recarm, bool allowgang)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> CSurf_OnRecArmChangeEx(<i>MediaTrack</i> trackid, <i>int </i>recarm, <i>bool </i>allowgang)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.CSurf_OnRecArmChangeEx(<i>MediaTrack</i> trackid, <i>integer</i> recarm, <i>boolean</i> allowgang)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_CSurf_OnRecArmChangeEx(<i>MediaTrack</i> trackid, <i>Int</i> recarm, <i>Boolean</i> allowgang)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnRecvPanChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnRecord()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnRecord()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnRecord()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnRecord()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnRecvVolumeChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double CSurf_OnRecvPanChange(MediaTrack* trackid, int recv_index, double pan, bool relative)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> CSurf_OnRecvPanChange(<i>MediaTrack</i> trackid, <i>int </i>recv_index, pan, <i>bool </i>relative)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.CSurf_OnRecvPanChange(<i>MediaTrack</i> trackid, <i>integer</i> recv_index, <i>number</i> pan, <i>boolean</i> relative)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_CSurf_OnRecvPanChange(<i>MediaTrack</i> trackid, <i>Int</i> recv_index, <i>Float</i> pan, <i>Boolean</i> relative)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnRew",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double CSurf_OnRecvVolumeChange(MediaTrack* trackid, int recv_index, double volume, bool relative)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> CSurf_OnRecvVolumeChange(<i>MediaTrack</i> trackid, <i>int </i>recv_index, volume, <i>bool </i>relative)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.CSurf_OnRecvVolumeChange(<i>MediaTrack</i> trackid, <i>integer</i> recv_index, <i>number</i> volume, <i>boolean</i> relative)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_CSurf_OnRecvVolumeChange(<i>MediaTrack</i> trackid, <i>Int</i> recv_index, <i>Float</i> volume, <i>Boolean</i> relative)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnRewFwd",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnRew(int seekplay)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnRew(<i>int </i>seekplay)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnRew(<i>integer</i> seekplay)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnRew(<i>Int</i> seekplay)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnScroll",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnRewFwd(int seekplay, int dir)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnRewFwd(<i>int </i>seekplay, <i>int </i>dir)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnRewFwd(<i>integer</i> seekplay, <i>integer</i> dir)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnRewFwd(<i>Int</i> seekplay, <i>Int</i> dir)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnSelectedChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnScroll(int xdir, int ydir)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnScroll(<i>int </i>xdir, <i>int </i>ydir)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnScroll(<i>integer</i> xdir, <i>integer</i> ydir)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnScroll(<i>Int</i> xdir, <i>Int</i> ydir)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnSendPanChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool CSurf_OnSelectedChange(MediaTrack* trackid, int selected)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> CSurf_OnSelectedChange(<i>MediaTrack</i> trackid, <i>int </i>selected)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.CSurf_OnSelectedChange(<i>MediaTrack</i> trackid, <i>integer</i> selected)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_CSurf_OnSelectedChange(<i>MediaTrack</i> trackid, <i>Int</i> selected)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnSendVolumeChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double CSurf_OnSendPanChange(MediaTrack* trackid, int send_index, double pan, bool relative)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> CSurf_OnSendPanChange(<i>MediaTrack</i> trackid, <i>int </i>send_index, pan, <i>bool </i>relative)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.CSurf_OnSendPanChange(<i>MediaTrack</i> trackid, <i>integer</i> send_index, <i>number</i> pan, <i>boolean</i> relative)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_CSurf_OnSendPanChange(<i>MediaTrack</i> trackid, <i>Int</i> send_index, <i>Float</i> pan, <i>Boolean</i> relative)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnSoloChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double CSurf_OnSendVolumeChange(MediaTrack* trackid, int send_index, double volume, bool relative)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> CSurf_OnSendVolumeChange(<i>MediaTrack</i> trackid, <i>int </i>send_index, volume, <i>bool </i>relative)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.CSurf_OnSendVolumeChange(<i>MediaTrack</i> trackid, <i>integer</i> send_index, <i>number</i> volume, <i>boolean</i> relative)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_CSurf_OnSendVolumeChange(<i>MediaTrack</i> trackid, <i>Int</i> send_index, <i>Float</i> volume, <i>Boolean</i> relative)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnSoloChangeEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool CSurf_OnSoloChange(MediaTrack* trackid, int solo)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> CSurf_OnSoloChange(<i>MediaTrack</i> trackid, <i>int </i>solo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.CSurf_OnSoloChange(<i>MediaTrack</i> trackid, <i>integer</i> solo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_CSurf_OnSoloChange(<i>MediaTrack</i> trackid, <i>Int</i> solo)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnStop",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool CSurf_OnSoloChangeEx(MediaTrack* trackid, int solo, bool allowgang)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> CSurf_OnSoloChangeEx(<i>MediaTrack</i> trackid, <i>int </i>solo, <i>bool </i>allowgang)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.CSurf_OnSoloChangeEx(<i>MediaTrack</i> trackid, <i>integer</i> solo, <i>boolean</i> allowgang)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_CSurf_OnSoloChangeEx(<i>MediaTrack</i> trackid, <i>Int</i> solo, <i>Boolean</i> allowgang)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnTempoChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnStop()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnStop()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnStop()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnStop()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnTrackSelection",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnTempoChange(double bpm)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnTempoChange(bpm)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnTempoChange(<i>number</i> bpm)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnTempoChange(<i>Float</i> bpm)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnVolumeChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnTrackSelection(MediaTrack* trackid)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnTrackSelection(<i>MediaTrack</i> trackid)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnTrackSelection(<i>MediaTrack</i> trackid)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnTrackSelection(<i>MediaTrack</i> trackid)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnVolumeChangeEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double CSurf_OnVolumeChange(MediaTrack* trackid, double volume, bool relative)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> CSurf_OnVolumeChange(<i>MediaTrack</i> trackid, volume, <i>bool </i>relative)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.CSurf_OnVolumeChange(<i>MediaTrack</i> trackid, <i>number</i> volume, <i>boolean</i> relative)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_CSurf_OnVolumeChange(<i>MediaTrack</i> trackid, <i>Float</i> volume, <i>Boolean</i> relative)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnWidthChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double CSurf_OnVolumeChangeEx(MediaTrack* trackid, double volume, bool relative, bool allowGang)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> CSurf_OnVolumeChangeEx(<i>MediaTrack</i> trackid, volume, <i>bool </i>relative, <i>bool </i>allowGang)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.CSurf_OnVolumeChangeEx(<i>MediaTrack</i> trackid, <i>number</i> volume, <i>boolean</i> relative, <i>boolean</i> allowGang)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_CSurf_OnVolumeChangeEx(<i>MediaTrack</i> trackid, <i>Float</i> volume, <i>Boolean</i> relative, <i>Boolean</i> allowGang)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnWidthChangeEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double CSurf_OnWidthChange(MediaTrack* trackid, double width, bool relative)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> CSurf_OnWidthChange(<i>MediaTrack</i> trackid, width, <i>bool </i>relative)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.CSurf_OnWidthChange(<i>MediaTrack</i> trackid, <i>number</i> width, <i>boolean</i> relative)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_CSurf_OnWidthChange(<i>MediaTrack</i> trackid, <i>Float</i> width, <i>Boolean</i> relative)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_OnZoom",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double CSurf_OnWidthChangeEx(MediaTrack* trackid, double width, bool relative, bool allowGang)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> CSurf_OnWidthChangeEx(<i>MediaTrack</i> trackid, width, <i>bool </i>relative, <i>bool </i>allowGang)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.CSurf_OnWidthChangeEx(<i>MediaTrack</i> trackid, <i>number</i> width, <i>boolean</i> relative, <i>boolean</i> allowGang)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_CSurf_OnWidthChangeEx(<i>MediaTrack</i> trackid, <i>Float</i> width, <i>Boolean</i> relative, <i>Boolean</i> allowGang)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_ResetAllCachedVolPanStates",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_OnZoom(int xdir, int ydir)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_OnZoom(<i>int </i>xdir, <i>int </i>ydir)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_OnZoom(<i>integer</i> xdir, <i>integer</i> ydir)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_OnZoom(<i>Int</i> xdir, <i>Int</i> ydir)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_ScrubAmt",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_ResetAllCachedVolPanStates()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_ResetAllCachedVolPanStates()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_ResetAllCachedVolPanStates()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_ResetAllCachedVolPanStates()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_SetAutoMode",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_ScrubAmt(double amt)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_ScrubAmt(amt)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_ScrubAmt(<i>number</i> amt)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_ScrubAmt(<i>Float</i> amt)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_SetPlayState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_SetAutoMode(int mode, IReaperControlSurface* ignoresurf)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_SetAutoMode(<i>int </i>mode, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_SetAutoMode(<i>integer</i> mode, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_SetAutoMode(<i>Int</i> mode, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_SetRepeatState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_SetPlayState(bool play, bool pause, bool rec, IReaperControlSurface* ignoresurf)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_SetPlayState(<i>bool </i>play, <i>bool </i>pause, <i>bool </i>rec, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_SetPlayState(<i>boolean</i> play, <i>boolean</i> pause, <i>boolean</i> rec, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_SetPlayState(<i>Boolean</i> play, <i>Boolean</i> pause, <i>Boolean</i> rec, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_SetSurfaceMute",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_SetRepeatState(bool rep, IReaperControlSurface* ignoresurf)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_SetRepeatState(<i>bool </i>rep, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_SetRepeatState(<i>boolean</i> rep, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_SetRepeatState(<i>Boolean</i> rep, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_SetSurfacePan",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_SetSurfaceMute(MediaTrack* trackid, bool mute, IReaperControlSurface* ignoresurf)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_SetSurfaceMute(<i>MediaTrack</i> trackid, <i>bool </i>mute, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_SetSurfaceMute(<i>MediaTrack</i> trackid, <i>boolean</i> mute, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_SetSurfaceMute(<i>MediaTrack</i> trackid, <i>Boolean</i> mute, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_SetSurfaceRecArm",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_SetSurfacePan(MediaTrack* trackid, double pan, IReaperControlSurface* ignoresurf)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_SetSurfacePan(<i>MediaTrack</i> trackid, pan, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_SetSurfacePan(<i>MediaTrack</i> trackid, <i>number</i> pan, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_SetSurfacePan(<i>MediaTrack</i> trackid, <i>Float</i> pan, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_SetSurfaceSelected",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_SetSurfaceRecArm(MediaTrack* trackid, bool recarm, IReaperControlSurface* ignoresurf)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_SetSurfaceRecArm(<i>MediaTrack</i> trackid, <i>bool </i>recarm, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_SetSurfaceRecArm(<i>MediaTrack</i> trackid, <i>boolean</i> recarm, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_SetSurfaceRecArm(<i>MediaTrack</i> trackid, <i>Boolean</i> recarm, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_SetSurfaceSolo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_SetSurfaceSelected(MediaTrack* trackid, bool selected, IReaperControlSurface* ignoresurf)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_SetSurfaceSelected(<i>MediaTrack</i> trackid, <i>bool </i>selected, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_SetSurfaceSelected(<i>MediaTrack</i> trackid, <i>boolean</i> selected, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_SetSurfaceSelected(<i>MediaTrack</i> trackid, <i>Boolean</i> selected, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_SetSurfaceVolume",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_SetSurfaceSolo(MediaTrack* trackid, bool solo, IReaperControlSurface* ignoresurf)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_SetSurfaceSolo(<i>MediaTrack</i> trackid, <i>bool </i>solo, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_SetSurfaceSolo(<i>MediaTrack</i> trackid, <i>boolean</i> solo, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_SetSurfaceSolo(<i>MediaTrack</i> trackid, <i>Boolean</i> solo, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_SetTrackListChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_SetSurfaceVolume(MediaTrack* trackid, double volume, IReaperControlSurface* ignoresurf)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_SetSurfaceVolume(<i>MediaTrack</i> trackid, volume, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_SetSurfaceVolume(<i>MediaTrack</i> trackid, <i>number</i> volume, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_SetSurfaceVolume(<i>MediaTrack</i> trackid, <i>Float</i> volume, <i>IReaperControlSurface</i> ignoresurf)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_TrackFromID",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void CSurf_SetTrackListChange()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>CSurf_SetTrackListChange()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.CSurf_SetTrackListChange()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_CSurf_SetTrackListChange()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "CSurf_TrackToID",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* CSurf_TrackFromID(int idx, bool mcpView)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  CSurf_TrackFromID(<i>int </i>idx, <i>bool </i>mcpView)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.CSurf_TrackFromID(<i>integer</i> idx, <i>boolean</i> mcpView)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_CSurf_TrackFromID(<i>Int</i> idx, <i>Boolean</i> mcpView)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DB2SLIDER",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int CSurf_TrackToID(MediaTrack* track, bool mcpView)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> CSurf_TrackToID(<i>MediaTrack</i> track, <i>bool </i>mcpView)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.CSurf_TrackToID(<i>MediaTrack</i> track, <i>boolean</i> mcpView)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_CSurf_TrackToID(<i>MediaTrack</i> track, <i>Boolean</i> mcpView)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DeleteEnvelopePointEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double DB2SLIDER(double x)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> DB2SLIDER(x)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.DB2SLIDER(<i>number</i> x)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_DB2SLIDER(<i>Float</i> x)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DeleteEnvelopePointRange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool DeleteEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> DeleteEnvelopePointEx(<i>TrackEnvelope</i> envelope, <i>int </i>autoitem_idx, <i>int </i>ptidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.DeleteEnvelopePointEx(<i>TrackEnvelope</i> envelope, <i>integer</i> autoitem_idx, <i>integer</i> ptidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_DeleteEnvelopePointEx(<i>TrackEnvelope</i> envelope, <i>Int</i> autoitem_idx, <i>Int</i> ptidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DeleteEnvelopePointRangeEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool DeleteEnvelopePointRange(TrackEnvelope* envelope, double time_start, double time_end)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> DeleteEnvelopePointRange(<i>TrackEnvelope</i> envelope, time_start, time_end)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.DeleteEnvelopePointRange(<i>TrackEnvelope</i> envelope, <i>number</i> time_start, <i>number</i> time_end)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_DeleteEnvelopePointRange(<i>TrackEnvelope</i> envelope, <i>Float</i> time_start, <i>Float</i> time_end)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DeleteExtState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool DeleteEnvelopePointRangeEx(TrackEnvelope* envelope, int autoitem_idx, double time_start, double time_end)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> DeleteEnvelopePointRangeEx(<i>TrackEnvelope</i> envelope, <i>int </i>autoitem_idx, time_start, time_end)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.DeleteEnvelopePointRangeEx(<i>TrackEnvelope</i> envelope, <i>integer</i> autoitem_idx, <i>number</i> time_start, <i>number</i> time_end)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_DeleteEnvelopePointRangeEx(<i>TrackEnvelope</i> envelope, <i>Int</i> autoitem_idx, <i>Float</i> time_start, <i>Float</i> time_end)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DeleteProjectMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void DeleteExtState(const char* section, const char* key, bool persist)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>DeleteExtState(\"section\", \"key\", <i>bool </i>persist)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.DeleteExtState(<i>string</i> section, <i>string</i> key, <i>boolean</i> persist)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_DeleteExtState(<i>String</i> section, <i>String</i> key, <i>Boolean</i> persist)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DeleteProjectMarkerByIndex",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool DeleteProjectMarker(ReaProject* proj, int markrgnindexnumber, bool isrgn)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> DeleteProjectMarker(<i>ReaProject</i> proj, <i>int </i>markrgnindexnumber, <i>bool </i>isrgn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.DeleteProjectMarker(<i>ReaProject</i> proj, <i>integer</i> markrgnindexnumber, <i>boolean</i> isrgn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_DeleteProjectMarker(<i>ReaProject</i> proj, <i>Int</i> markrgnindexnumber, <i>Boolean</i> isrgn)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DeleteTakeMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool DeleteProjectMarkerByIndex(ReaProject* proj, int markrgnidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> DeleteProjectMarkerByIndex(<i>ReaProject</i> proj, <i>int </i>markrgnidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.DeleteProjectMarkerByIndex(<i>ReaProject</i> proj, <i>integer</i> markrgnidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_DeleteProjectMarkerByIndex(<i>ReaProject</i> proj, <i>Int</i> markrgnidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DeleteTakeStretchMarkers",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool DeleteTakeMarker(MediaItem_Take* take, int idx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> DeleteTakeMarker(<i>MediaItem_Take</i> take, <i>int </i>idx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.DeleteTakeMarker(<i>MediaItem_Take</i> take, <i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_DeleteTakeMarker(<i>MediaItem_Take</i> take, <i>Int</i> idx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DeleteTempoTimeSigMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int DeleteTakeStretchMarkers(MediaItem_Take* take, int idx, const int* countInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> DeleteTakeStretchMarkers(<i>MediaItem_Take</i> take, <i>int </i>idx, <i>optional int</i> countIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.DeleteTakeStretchMarkers(<i>MediaItem_Take</i> take, <i>integer</i> idx, <i>optional number</i> countIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_DeleteTakeStretchMarkers(<i>MediaItem_Take</i> take, <i>Int</i> idx, <i>const int</i> countInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DeleteTrack",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool DeleteTempoTimeSigMarker(ReaProject* project, int markerindex)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> DeleteTempoTimeSigMarker(<i>ReaProject</i> project, <i>int </i>markerindex)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.DeleteTempoTimeSigMarker(<i>ReaProject</i> project, <i>integer</i> markerindex)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_DeleteTempoTimeSigMarker(<i>ReaProject</i> project, <i>Int</i> markerindex)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DeleteTrackMediaItem",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void DeleteTrack(MediaTrack* tr)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>DeleteTrack(<i>MediaTrack</i> tr)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.DeleteTrack(<i>MediaTrack</i> tr)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_DeleteTrack(<i>MediaTrack</i> tr)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DestroyAudioAccessor",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool DeleteTrackMediaItem(MediaTrack* tr, MediaItem* it)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> DeleteTrackMediaItem(<i>MediaTrack</i> tr, <i>MediaItem</i> it)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.DeleteTrackMediaItem(<i>MediaTrack</i> tr, <i>MediaItem</i> it)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_DeleteTrackMediaItem(<i>MediaTrack</i> tr, <i>MediaItem</i> it)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Dock_UpdateDockID",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void DestroyAudioAccessor(AudioAccessor* accessor)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>DestroyAudioAccessor(<i>AudioAccessor</i> accessor)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.DestroyAudioAccessor(<i>AudioAccessor</i> accessor)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_DestroyAudioAccessor(<i>AudioAccessor</i> accessor)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DockGetPosition",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Dock_UpdateDockID(const char* ident_str, int whichDock)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Dock_UpdateDockID(\"ident_str\", <i>int </i>whichDock)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Dock_UpdateDockID(<i>string</i> ident_str, <i>integer</i> whichDock)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Dock_UpdateDockID(<i>String</i> ident_str, <i>Int</i> whichDock)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DockIsChildOfDock",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int DockGetPosition(int whichDock)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> DockGetPosition(<i>int </i>whichDock)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.DockGetPosition(<i>integer</i> whichDock)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_DockGetPosition(<i>Int</i> whichDock)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DockWindowActivate",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int DockIsChildOfDock(HWND hwnd, bool* isFloatingDockerOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> DockIsChildOfDock(<i>HWND</i> hwnd, <i>bool &amp;</i>isFloatingDocker)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>boolean </i>isFloatingDocker = reaper.DockIsChildOfDock(<i>HWND</i> hwnd)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>HWND</i> hwnd, <i>Boolean</i> isFloatingDockerOut) = RPR_DockIsChildOfDock(hwnd, isFloatingDockerOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DockWindowAdd",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void DockWindowActivate(HWND hwnd)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>DockWindowActivate(<i>HWND</i> hwnd)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.DockWindowActivate(<i>HWND</i> hwnd)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_DockWindowActivate(<i>HWND</i> hwnd)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DockWindowAddEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void DockWindowAdd(HWND hwnd, const char* name, int pos, bool allowShow)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>DockWindowAdd(<i>HWND</i> hwnd, \"name\", <i>int </i>pos, <i>bool </i>allowShow)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.DockWindowAdd(<i>HWND</i> hwnd, <i>string</i> name, <i>integer</i> pos, <i>boolean</i> allowShow)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_DockWindowAdd(<i>HWND</i> hwnd, <i>String</i> name, <i>Int</i> pos, <i>Boolean</i> allowShow)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DockWindowRefresh",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void DockWindowAddEx(HWND hwnd, const char* name, const char* identstr, bool allowShow)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>DockWindowAddEx(<i>HWND</i> hwnd, \"name\", \"identstr\", <i>bool </i>allowShow)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.DockWindowAddEx(<i>HWND</i> hwnd, <i>string</i> name, <i>string</i> identstr, <i>boolean</i> allowShow)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_DockWindowAddEx(<i>HWND</i> hwnd, <i>String</i> name, <i>String</i> identstr, <i>Boolean</i> allowShow)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DockWindowRefreshForHWND",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void DockWindowRefresh()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>DockWindowRefresh()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.DockWindowRefresh()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_DockWindowRefresh()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "DockWindowRemove",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void DockWindowRefreshForHWND(HWND hwnd)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>DockWindowRefreshForHWND(<i>HWND</i> hwnd)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.DockWindowRefreshForHWND(<i>HWND</i> hwnd)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_DockWindowRefreshForHWND(<i>HWND</i> hwnd)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EditTempoTimeSigMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void DockWindowRemove(HWND hwnd)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>DockWindowRemove(<i>HWND</i> hwnd)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.DockWindowRemove(<i>HWND</i> hwnd)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_DockWindowRemove(<i>HWND</i> hwnd)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnsureNotCompletelyOffscreen",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool EditTempoTimeSigMarker(ReaProject* project, int markerindex)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> EditTempoTimeSigMarker(<i>ReaProject</i> project, <i>int </i>markerindex)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.EditTempoTimeSigMarker(<i>ReaProject</i> project, <i>integer</i> markerindex)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_EditTempoTimeSigMarker(<i>ReaProject</i> project, <i>Int</i> markerindex)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnumerateFiles",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void EnsureNotCompletelyOffscreen(RECT* rInOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>EnsureNotCompletelyOffscreen(<i>int &</i>r.left, <i>int &</i>r.top, <i>int &</i>r.right, <i>int &</i>r.bot)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i>r.left, <i>number</i>r.top, <i>number</i>r.right, <i>number</i>r.bot = reaper.EnsureNotCompletelyOffscreen(<i>number</i>r.left, <i>number</i>r.top, <i>number</i>r.right, <i>number</i>r.bot)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_EnsureNotCompletelyOffscreen(<i>RECT</i> rInOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnumerateSubdirectories",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* EnumerateFiles(const char* path, int fileindex)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  EnumerateFiles(#retval, \"path\", <i>int </i>fileindex)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.EnumerateFiles(<i>string</i> path, <i>integer</i> fileindex)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_EnumerateFiles(<i>String</i> path, <i>Int</i> fileindex)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnumPitchShiftModes",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* EnumerateSubdirectories(const char* path, int subdirindex)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  EnumerateSubdirectories(#retval, \"path\", <i>int </i>subdirindex)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.EnumerateSubdirectories(<i>string</i> path, <i>integer</i> subdirindex)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_EnumerateSubdirectories(<i>String</i> path, <i>Int</i> subdirindex)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnumPitchShiftSubModes",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool EnumPitchShiftModes(int mode, const char** strOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> EnumPitchShiftModes(<i>int </i>mode, #str)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>str = reaper.EnumPitchShiftModes(<i>integer</i> mode)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_EnumPitchShiftModes(<i>Int</i> mode, <i>String</i> strOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnumProjectMarkers",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* EnumPitchShiftSubModes(int mode, int submode)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  EnumPitchShiftSubModes(#retval, <i>int </i>mode, <i>int </i>submode)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.EnumPitchShiftSubModes(<i>integer</i> mode, <i>integer</i> submode)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_EnumPitchShiftSubModes(<i>Int</i> mode, <i>Int</i> submode)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnumProjectMarkers2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int EnumProjectMarkers(int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> EnumProjectMarkers(<i>int </i>idx, <i>bool &amp;</i>isrgn, <i>&amp;</i>pos, <i>&amp;</i>rgnend, #name, <i>int &amp;</i>markrgnindexnumber)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>boolean </i>isrgn, <i>number </i>pos, <i>number </i>rgnend, <i>string </i>name, <i>number </i>markrgnindexnumber = reaper.EnumProjectMarkers(<i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>Int</i> idx, <i>Boolean</i> isrgnOut, <i>Float</i> posOut, <i>Float</i> rgnendOut, <i>String</i> nameOut, <i>Int</i> markrgnindexnumberOut) = RPR_EnumProjectMarkers(idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnumProjectMarkers3",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int EnumProjectMarkers2(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> EnumProjectMarkers2(<i>ReaProject</i> proj, <i>int </i>idx, <i>bool &amp;</i>isrgn, <i>&amp;</i>pos, <i>&amp;</i>rgnend, #name, <i>int &amp;</i>markrgnindexnumber)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>boolean </i>isrgn, <i>number </i>pos, <i>number </i>rgnend, <i>string </i>name, <i>number </i>markrgnindexnumber = reaper.EnumProjectMarkers2(<i>ReaProject</i> proj, <i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>ReaProject</i> proj, <i>Int</i> idx, <i>Boolean</i> isrgnOut, <i>Float</i> posOut, <i>Float</i> rgnendOut, <i>String</i> nameOut, <i>Int</i> markrgnindexnumberOut) = RPR_EnumProjectMarkers2(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnumProjects",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int EnumProjectMarkers3(ReaProject* proj, int idx, bool* isrgnOut, double* posOut, double* rgnendOut, const char** nameOut, int* markrgnindexnumberOut, int* colorOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> EnumProjectMarkers3(<i>ReaProject</i> proj, <i>int </i>idx, <i>bool &amp;</i>isrgn, <i>&amp;</i>pos, <i>&amp;</i>rgnend, #name, <i>int &amp;</i>markrgnindexnumber, <i>int &amp;</i>color)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>boolean </i>isrgn, <i>number </i>pos, <i>number </i>rgnend, <i>string </i>name, <i>number </i>markrgnindexnumber, <i>number </i>color = reaper.EnumProjectMarkers3(<i>ReaProject</i> proj, <i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>ReaProject</i> proj, <i>Int</i> idx, <i>Boolean</i> isrgnOut, <i>Float</i> posOut, <i>Float</i> rgnendOut, <i>String</i> nameOut, <i>Int</i> markrgnindexnumberOut, <i>Int</i> colorOut) = RPR_EnumProjectMarkers3(proj, idx, isrgnOut, posOut, rgnendOut, nameOut, markrgnindexnumberOut, colorOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnumProjExtState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>ReaProject* EnumProjects(int idx, char* projfnOutOptional, int projfnOutOptional_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>ReaProject</i>  EnumProjects(<i>int </i>idx, <i>optional </i>#projfn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>ReaProject</i> retval, <i>optional </i><i>string </i>projfn = reaper.EnumProjects(<i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>ReaProject</i> retval, <i>Int</i> idx, <i>String</i> projfnOutOptional, <i>Int</i> projfnOutOptional_sz) = RPR_EnumProjects(idx, projfnOutOptional, projfnOutOptional_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnumRegionRenderMatrix",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool EnumProjExtState(ReaProject* proj, const char* extname, int idx, char* keyOutOptional, int keyOutOptional_sz, char* valOutOptional, int valOutOptional_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> EnumProjExtState(<i>ReaProject</i> proj, \"extname\", <i>int </i>idx, <i>optional </i>#key, <i>optional </i>#val)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>optional </i><i>string </i>key, <i>optional </i><i>string </i>val = reaper.EnumProjExtState(<i>ReaProject</i> proj, <i>string</i> extname, <i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>ReaProject</i> proj, <i>String</i> extname, <i>Int</i> idx, <i>String</i> keyOutOptional, <i>Int</i> keyOutOptional_sz, <i>String</i> valOutOptional, <i>Int</i> valOutOptional_sz) = RPR_EnumProjExtState(proj, extname, idx, keyOutOptional, keyOutOptional_sz, valOutOptional, valOutOptional_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnumTrackMIDIProgramNames",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* EnumRegionRenderMatrix(ReaProject* proj, int regionindex, int rendertrack)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  EnumRegionRenderMatrix(<i>ReaProject</i> proj, <i>int </i>regionindex, <i>int </i>rendertrack)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.EnumRegionRenderMatrix(<i>ReaProject</i> proj, <i>integer</i> regionindex, <i>integer</i> rendertrack)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_EnumRegionRenderMatrix(<i>ReaProject</i> proj, <i>Int</i> regionindex, <i>Int</i> rendertrack)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "EnumTrackMIDIProgramNamesEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool EnumTrackMIDIProgramNames(int track, int programNumber, char* programName, int programName_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> EnumTrackMIDIProgramNames(<i>int </i>track, <i>int </i>programNumber, #programName)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>programName = reaper.EnumTrackMIDIProgramNames(<i>integer</i> track, <i>integer</i> programNumber, <i>string </i>programName)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>Int</i> track, <i>Int</i> programNumber, <i>String</i> programName, <i>Int</i> programName_sz) = RPR_EnumTrackMIDIProgramNames(track, programNumber, programName, programName_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Envelope_Evaluate",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool EnumTrackMIDIProgramNamesEx(ReaProject* proj, MediaTrack* track, int programNumber, char* programName, int programName_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> EnumTrackMIDIProgramNamesEx(<i>ReaProject</i> proj, <i>MediaTrack</i> track, <i>int </i>programNumber, #programName)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>programName = reaper.EnumTrackMIDIProgramNamesEx(<i>ReaProject</i> proj, <i>MediaTrack</i> track, <i>integer</i> programNumber, <i>string </i>programName)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>ReaProject</i> proj, <i>MediaTrack</i> track, <i>Int</i> programNumber, <i>String</i> programName, <i>Int</i> programName_sz) = RPR_EnumTrackMIDIProgramNamesEx(proj, track, programNumber, programName, programName_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Envelope_FormatValue",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int Envelope_Evaluate(TrackEnvelope* envelope, double time, double samplerate, int samplesRequested, double* valueOutOptional, double* dVdSOutOptional, double* ddVdSOutOptional, double* dddVdSOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> Envelope_Evaluate(<i>TrackEnvelope</i> envelope, time, samplerate, <i>int </i>samplesRequested, <i>optional &amp;</i>value, <i>optional &amp;</i>dVdS, <i>optional &amp;</i>ddVdS, <i>optional &amp;</i>dddVdS)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>optional number </i>value, <i>optional number </i>dVdS, <i>optional number </i>ddVdS, <i>optional number </i>dddVdS = reaper.Envelope_Evaluate(<i>TrackEnvelope</i> envelope, <i>number</i> time, <i>number</i> samplerate, <i>integer</i> samplesRequested)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>TrackEnvelope</i> envelope, <i>Float</i> time, <i>Float</i> samplerate, <i>Int</i> samplesRequested, <i>Float</i> valueOutOptional, <i>Float</i> dVdSOutOptional, <i>Float</i> ddVdSOutOptional, <i>Float</i> dddVdSOutOptional) = RPR_Envelope_Evaluate(envelope, time, samplerate, samplesRequested, valueOutOptional, dVdSOutOptional, ddVdSOutOptional, dddVdSOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Envelope_GetParentTake",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Envelope_FormatValue(TrackEnvelope* env, double value, char* bufOut, int bufOut_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Envelope_FormatValue(<i>TrackEnvelope</i> env, value, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>buf = reaper.Envelope_FormatValue(<i>TrackEnvelope</i> env, <i>number</i> value)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>TrackEnvelope</i> env, <i>Float</i> value, <i>String</i> bufOut, <i>Int</i> bufOut_sz) = RPR_Envelope_FormatValue(env, value, bufOut, bufOut_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Envelope_GetParentTrack",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem_Take* Envelope_GetParentTake(TrackEnvelope* env, int* indexOutOptional, int* index2OutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem_Take</i>  Envelope_GetParentTake(<i>TrackEnvelope</i> env, <i>optional int &amp;</i>index, <i>optional int &amp;</i>index2)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem_Take</i> retval, <i>optional number </i>index, <i>optional number </i>index2 = reaper.Envelope_GetParentTake(<i>TrackEnvelope</i> env)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>MediaItem_Take</i> retval, <i>TrackEnvelope</i> env, <i>Int</i> indexOutOptional, <i>Int</i> index2OutOptional) = RPR_Envelope_GetParentTake(env, indexOutOptional, index2OutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Envelope_SortPoints",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* Envelope_GetParentTrack(TrackEnvelope* env, int* indexOutOptional, int* index2OutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  Envelope_GetParentTrack(<i>TrackEnvelope</i> env, <i>optional int &amp;</i>index, <i>optional int &amp;</i>index2)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> retval, <i>optional number </i>index, <i>optional number </i>index2 = reaper.Envelope_GetParentTrack(<i>TrackEnvelope</i> env)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>MediaTrack</i> retval, <i>TrackEnvelope</i> env, <i>Int</i> indexOutOptional, <i>Int</i> index2OutOptional) = RPR_Envelope_GetParentTrack(env, indexOutOptional, index2OutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Envelope_SortPointsEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool Envelope_SortPoints(TrackEnvelope* envelope)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> Envelope_SortPoints(<i>TrackEnvelope</i> envelope)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.Envelope_SortPoints(<i>TrackEnvelope</i> envelope)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_Envelope_SortPoints(<i>TrackEnvelope</i> envelope)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ExecProcess",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool Envelope_SortPointsEx(TrackEnvelope* envelope, int autoitem_idx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> Envelope_SortPointsEx(<i>TrackEnvelope</i> envelope, <i>int </i>autoitem_idx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.Envelope_SortPointsEx(<i>TrackEnvelope</i> envelope, <i>integer</i> autoitem_idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_Envelope_SortPointsEx(<i>TrackEnvelope</i> envelope, <i>Int</i> autoitem_idx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "file_exists",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* ExecProcess(const char* cmdline, int timeoutmsec)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  ExecProcess(#retval, \"cmdline\", <i>int </i>timeoutmsec)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.ExecProcess(<i>string</i> cmdline, <i>integer</i> timeoutmsec)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_ExecProcess(<i>String</i> cmdline, <i>Int</i> timeoutmsec)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "FindTempoTimeSigMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool file_exists(const char* path)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> file_exists(\"path\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.file_exists(<i>string</i> path)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_file_exists(<i>String</i> path)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "format_timestr",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int FindTempoTimeSigMarker(ReaProject* project, double time)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> FindTempoTimeSigMarker(<i>ReaProject</i> project, time)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.FindTempoTimeSigMarker(<i>ReaProject</i> project, <i>number</i> time)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_FindTempoTimeSigMarker(<i>ReaProject</i> project, <i>Float</i> time)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "format_timestr_len",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void format_timestr(double tpos, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>format_timestr(tpos, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>buf = reaper.format_timestr(<i>number</i> tpos, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> tpos, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_format_timestr(tpos, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "format_timestr_pos",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void format_timestr_len(double tpos, char* buf, int buf_sz, double offset, int modeoverride)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>format_timestr_len(tpos, #buf, offset, <i>int </i>modeoverride)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>buf = reaper.format_timestr_len(<i>number</i> tpos, <i>string </i>buf, <i>number</i> offset, <i>integer</i> modeoverride)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> tpos, <i>String</i> buf, <i>Int</i> buf_sz, <i>Float</i> offset, <i>Int</i> modeoverride) = RPR_format_timestr_len(tpos, buf, buf_sz, offset, modeoverride)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "genGuid",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void format_timestr_pos(double tpos, char* buf, int buf_sz, int modeoverride)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>format_timestr_pos(tpos, #buf, <i>int </i>modeoverride)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>buf = reaper.format_timestr_pos(<i>number</i> tpos, <i>string </i>buf, <i>integer</i> modeoverride)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> tpos, <i>String</i> buf, <i>Int</i> buf_sz, <i>Int</i> modeoverride) = RPR_format_timestr_pos(tpos, buf, buf_sz, modeoverride)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "get_config_var_string",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void genGuid(GUID* g)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>genGuid(#gGUID)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>gGUID = reaper.genGuid(<i>string </i>gGUID)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_genGuid(<i>GUID</i> g)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "get_ini_file",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool get_config_var_string(const char* name, char* bufOut, int bufOut_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> get_config_var_string(\"name\", #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.get_config_var_string(<i>string</i> name)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>String</i> name, <i>String</i> bufOut, <i>Int</i> bufOut_sz) = RPR_get_config_var_string(name, bufOut, bufOut_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetActiveTake",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* get_ini_file()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  get_ini_file(#retval)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.get_ini_file()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_get_ini_file()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetAllProjectPlayStates",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem_Take* GetActiveTake(MediaItem* item)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem_Take</i>  GetActiveTake(<i>MediaItem</i> item)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem_Take</i> reaper.GetActiveTake(<i>MediaItem</i> item)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem_Take</i>  RPR_GetActiveTake(<i>MediaItem</i> item)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetAppVersion",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetAllProjectPlayStates(ReaProject* ignoreProject)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetAllProjectPlayStates(<i>ReaProject</i> ignoreProject)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetAllProjectPlayStates(<i>ReaProject</i> ignoreProject)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetAllProjectPlayStates(<i>ReaProject</i> ignoreProject)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetArmedCommand",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* GetAppVersion()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetAppVersion(#retval)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.GetAppVersion()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_GetAppVersion()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetAudioAccessorEndTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetArmedCommand(char* secOut, int secOut_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetArmedCommand(#sec)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>string </i>sec = reaper.GetArmedCommand()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>String</i> secOut, <i>Int</i> secOut_sz) = RPR_GetArmedCommand(secOut, secOut_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetAudioAccessorHash",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetAudioAccessorEndTime(AudioAccessor* accessor)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetAudioAccessorEndTime(<i>AudioAccessor</i> accessor)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetAudioAccessorEndTime(<i>AudioAccessor</i> accessor)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetAudioAccessorEndTime(<i>AudioAccessor</i> accessor)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetAudioAccessorSamples",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetAudioAccessorHash(AudioAccessor* accessor, char* hashNeed128)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetAudioAccessorHash(<i>AudioAccessor</i> accessor, #hashNeed128)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>hashNeed128 = reaper.GetAudioAccessorHash(<i>AudioAccessor</i> accessor, <i>string </i>hashNeed128)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>AudioAccessor</i> accessor, <i>String</i> hashNeed128) = RPR_GetAudioAccessorHash(accessor, hashNeed128)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetAudioAccessorStartTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetAudioAccessorSamples(AudioAccessor* accessor, int samplerate, int numchannels, double starttime_sec, int numsamplesperchannel, double* samplebuffer)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetAudioAccessorSamples(<i>AudioAccessor</i> accessor, <i>int </i>samplerate, <i>int </i>numchannels, starttime_sec, <i>int </i>numsamplesperchannel, <i>buffer_ptr </i>samplebuffer)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetAudioAccessorSamples(<i>AudioAccessor</i> accessor, <i>integer</i> samplerate, <i>integer</i> numchannels, <i>number</i> starttime_sec, <i>integer</i> numsamplesperchannel, <i>reaper.array </i>samplebuffer)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>AudioAccessor</i> accessor, <i>Int</i> samplerate, <i>Int</i> numchannels, <i>Float</i> starttime_sec, <i>Int</i> numsamplesperchannel, <i>Float</i> samplebuffer) = RPR_GetAudioAccessorSamples(accessor, samplerate, numchannels, starttime_sec, numsamplesperchannel, samplebuffer)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetAudioDeviceInfo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetAudioAccessorStartTime(AudioAccessor* accessor)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetAudioAccessorStartTime(<i>AudioAccessor</i> accessor)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetAudioAccessorStartTime(<i>AudioAccessor</i> accessor)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetAudioAccessorStartTime(<i>AudioAccessor</i> accessor)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetConfigWantsDock",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetAudioDeviceInfo(const char* attribute, char* desc, int desc_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetAudioDeviceInfo(\"attribute\", #desc)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>desc = reaper.GetAudioDeviceInfo(<i>string</i> attribute, <i>string </i>desc)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>String</i> attribute, <i>String</i> desc, <i>Int</i> desc_sz) = RPR_GetAudioDeviceInfo(attribute, desc, desc_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetCurrentProjectInLoadSave",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetConfigWantsDock(const char* ident_str)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetConfigWantsDock(\"ident_str\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetConfigWantsDock(<i>string</i> ident_str)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetConfigWantsDock(<i>String</i> ident_str)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetCursorContext",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>ReaProject* GetCurrentProjectInLoadSave()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>ReaProject</i>  GetCurrentProjectInLoadSave()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>ReaProject</i> reaper.GetCurrentProjectInLoadSave()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>ReaProject</i>  RPR_GetCurrentProjectInLoadSave()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetCursorContext2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetCursorContext()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetCursorContext()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetCursorContext()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetCursorContext()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetCursorPosition",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetCursorContext2(bool want_last_valid)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetCursorContext2(<i>bool </i>want_last_valid)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetCursorContext2(<i>boolean</i> want_last_valid)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetCursorContext2(<i>Boolean</i> want_last_valid)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetCursorPositionEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetCursorPosition()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetCursorPosition()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetCursorPosition()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetCursorPosition()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetDisplayedMediaItemColor",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetCursorPositionEx(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetCursorPositionEx(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetCursorPositionEx(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetCursorPositionEx(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetDisplayedMediaItemColor2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetDisplayedMediaItemColor(MediaItem* item)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetDisplayedMediaItemColor(<i>MediaItem</i> item)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetDisplayedMediaItemColor(<i>MediaItem</i> item)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetDisplayedMediaItemColor(<i>MediaItem</i> item)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetEnvelopeInfo_Value",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetDisplayedMediaItemColor2(MediaItem* item, MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetDisplayedMediaItemColor2(<i>MediaItem</i> item, <i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetDisplayedMediaItemColor2(<i>MediaItem</i> item, <i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetDisplayedMediaItemColor2(<i>MediaItem</i> item, <i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetEnvelopeName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetEnvelopeInfo_Value(TrackEnvelope* tr, const char* parmname)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetEnvelopeInfo_Value(<i>TrackEnvelope</i> tr, \"parmname\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetEnvelopeInfo_Value(<i>TrackEnvelope</i> tr, <i>string</i> parmname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetEnvelopeInfo_Value(<i>TrackEnvelope</i> tr, <i>String</i> parmname)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetEnvelopePoint",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetEnvelopeName(TrackEnvelope* env, char* bufOut, int bufOut_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetEnvelopeName(<i>TrackEnvelope</i> env, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.GetEnvelopeName(<i>TrackEnvelope</i> env)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>TrackEnvelope</i> env, <i>String</i> bufOut, <i>Int</i> bufOut_sz) = RPR_GetEnvelopeName(env, bufOut, bufOut_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetEnvelopePointByTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeOutOptional, double* valueOutOptional, int* shapeOutOptional, double* tensionOutOptional, bool* selectedOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetEnvelopePoint(<i>TrackEnvelope</i> envelope, <i>int </i>ptidx, <i>optional &amp;</i>time, <i>optional &amp;</i>value, <i>optional int &amp;</i>shape, <i>optional &amp;</i>tension, <i>optional bool &amp;</i>selected)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>optional number </i>time, <i>optional number </i>value, <i>optional number </i>shape, <i>optional number </i>tension, <i>optional boolean </i>selected = reaper.GetEnvelopePoint(<i>TrackEnvelope</i> envelope, <i>integer</i> ptidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>TrackEnvelope</i> envelope, <i>Int</i> ptidx, <i>Float</i> timeOutOptional, <i>Float</i> valueOutOptional, <i>Int</i> shapeOutOptional, <i>Float</i> tensionOutOptional, <i>Boolean</i> selectedOutOptional) = RPR_GetEnvelopePoint(envelope, ptidx, timeOutOptional, valueOutOptional, shapeOutOptional, tensionOutOptional, selectedOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetEnvelopePointByTimeEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetEnvelopePointByTime(TrackEnvelope* envelope, double time)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetEnvelopePointByTime(<i>TrackEnvelope</i> envelope, time)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetEnvelopePointByTime(<i>TrackEnvelope</i> envelope, <i>number</i> time)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetEnvelopePointByTime(<i>TrackEnvelope</i> envelope, <i>Float</i> time)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetEnvelopePointEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetEnvelopePointByTimeEx(TrackEnvelope* envelope, int autoitem_idx, double time)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetEnvelopePointByTimeEx(<i>TrackEnvelope</i> envelope, <i>int </i>autoitem_idx, time)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetEnvelopePointByTimeEx(<i>TrackEnvelope</i> envelope, <i>integer</i> autoitem_idx, <i>number</i> time)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetEnvelopePointByTimeEx(<i>TrackEnvelope</i> envelope, <i>Int</i> autoitem_idx, <i>Float</i> time)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetEnvelopeScalingMode",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeOutOptional, double* valueOutOptional, int* shapeOutOptional, double* tensionOutOptional, bool* selectedOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetEnvelopePointEx(<i>TrackEnvelope</i> envelope, <i>int </i>autoitem_idx, <i>int </i>ptidx, <i>optional &amp;</i>time, <i>optional &amp;</i>value, <i>optional int &amp;</i>shape, <i>optional &amp;</i>tension, <i>optional bool &amp;</i>selected)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>optional number </i>time, <i>optional number </i>value, <i>optional number </i>shape, <i>optional number </i>tension, <i>optional boolean </i>selected = reaper.GetEnvelopePointEx(<i>TrackEnvelope</i> envelope, <i>integer</i> autoitem_idx, <i>integer</i> ptidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>TrackEnvelope</i> envelope, <i>Int</i> autoitem_idx, <i>Int</i> ptidx, <i>Float</i> timeOutOptional, <i>Float</i> valueOutOptional, <i>Int</i> shapeOutOptional, <i>Float</i> tensionOutOptional, <i>Boolean</i> selectedOutOptional) = RPR_GetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeOutOptional, valueOutOptional, shapeOutOptional, tensionOutOptional, selectedOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetEnvelopeStateChunk",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetEnvelopeScalingMode(TrackEnvelope* env)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetEnvelopeScalingMode(<i>TrackEnvelope</i> env)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetEnvelopeScalingMode(<i>TrackEnvelope</i> env)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetEnvelopeScalingMode(<i>TrackEnvelope</i> env)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetExePath",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetEnvelopeStateChunk(TrackEnvelope* env, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetEnvelopeStateChunk(<i>TrackEnvelope</i> env, #str, <i>bool </i>isundo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>str = reaper.GetEnvelopeStateChunk(<i>TrackEnvelope</i> env, <i>string </i>str, <i>boolean</i> isundo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>TrackEnvelope</i> env, <i>String</i> strNeedBig, <i>Int</i> strNeedBig_sz, <i>Boolean</i> isundoOptional) = RPR_GetEnvelopeStateChunk(env, strNeedBig, strNeedBig_sz, isundoOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetExtState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* GetExePath()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetExePath(#retval)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.GetExePath()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_GetExePath()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetFocusedFX",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* GetExtState(const char* section, const char* key)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetExtState(#retval, \"section\", \"key\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.GetExtState(<i>string</i> section, <i>string</i> key)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_GetExtState(<i>String</i> section, <i>String</i> key)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetFocusedFX2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetFocusedFX(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetFocusedFX(<i>int &amp;</i>tracknumber, <i>int &amp;</i>itemnumber, <i>int &amp;</i>fxnumber)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>number </i>tracknumber, <i>number </i>itemnumber, <i>number </i>fxnumber = reaper.GetFocusedFX()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>Int</i> tracknumberOut, <i>Int</i> itemnumberOut, <i>Int</i> fxnumberOut) = RPR_GetFocusedFX(tracknumberOut, itemnumberOut, fxnumberOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetFreeDiskSpaceForRecordPath",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetFocusedFX2(int* tracknumberOut, int* itemnumberOut, int* fxnumberOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetFocusedFX2(<i>int &amp;</i>tracknumber, <i>int &amp;</i>itemnumber, <i>int &amp;</i>fxnumber)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>number </i>tracknumber, <i>number </i>itemnumber, <i>number </i>fxnumber = reaper.GetFocusedFX2()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>Int</i> tracknumberOut, <i>Int</i> itemnumberOut, <i>Int</i> fxnumberOut) = RPR_GetFocusedFX2(tracknumberOut, itemnumberOut, fxnumberOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetFXEnvelope",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetFreeDiskSpaceForRecordPath(ReaProject* proj, int pathidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetFreeDiskSpaceForRecordPath(<i>ReaProject</i> proj, <i>int </i>pathidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetFreeDiskSpaceForRecordPath(<i>ReaProject</i> proj, <i>integer</i> pathidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetFreeDiskSpaceForRecordPath(<i>ReaProject</i> proj, <i>Int</i> pathidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetGlobalAutomationOverride",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>TrackEnvelope* GetFXEnvelope(MediaTrack* track, int fxindex, int parameterindex, bool create)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>TrackEnvelope</i>  GetFXEnvelope(<i>MediaTrack</i> track, <i>int </i>fxindex, <i>int </i>parameterindex, <i>bool </i>create)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>TrackEnvelope</i> reaper.GetFXEnvelope(<i>MediaTrack</i> track, <i>integer</i> fxindex, <i>integer</i> parameterindex, <i>boolean</i> create)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>TrackEnvelope</i>  RPR_GetFXEnvelope(<i>MediaTrack</i> track, <i>Int</i> fxindex, <i>Int</i> parameterindex, <i>Boolean</i> create)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetHZoomLevel",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetGlobalAutomationOverride()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetGlobalAutomationOverride()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetGlobalAutomationOverride()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetGlobalAutomationOverride()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetInputChannelName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetHZoomLevel()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetHZoomLevel()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetHZoomLevel()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetHZoomLevel()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetInputOutputLatency",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* GetInputChannelName(int channelIndex)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetInputChannelName(#retval, <i>int </i>channelIndex)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.GetInputChannelName(<i>integer</i> channelIndex)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_GetInputChannelName(<i>Int</i> channelIndex)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetItemEditingTime2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetInputOutputLatency(int* inputlatencyOut, int* outputLatencyOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetInputOutputLatency(<i>int &amp;</i>inputlatency, <i>int &amp;</i>outputLatency)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number </i>inputlatency, <i>number </i>outputLatency = reaper.GetInputOutputLatency()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> inputlatencyOut, <i>Int</i> outputLatencyOut) = RPR_GetInputOutputLatency(inputlatencyOut, outputLatencyOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetItemFromPoint",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetItemEditingTime2(PCM_source** which_itemOut, int* flagsOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetItemEditingTime2(<i>PCM_source &amp;</i>which_item, <i>int &amp;</i>flags)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i>, <i>PCM_source</i> which_item, <i>number </i>flags = reaper.GetItemEditingTime2()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> retval, <i>PCM_source*</i> which_itemOut, <i>Int</i> flagsOut) = RPR_GetItemEditingTime2(which_itemOut, flagsOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetItemProjectContext",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem* GetItemFromPoint(int screen_x, int screen_y, bool allow_locked, MediaItem_Take** takeOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem</i>  GetItemFromPoint(<i>int </i>screen_x, <i>int </i>screen_y, <i>bool </i>allow_locked, <i>MediaItem_Take &amp;</i>take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem</i>, <i>MediaItem_Take</i> take = reaper.GetItemFromPoint(<i>integer</i> screen_x, <i>integer</i> screen_y, <i>boolean</i> allow_locked)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem</i>  RPR_GetItemFromPoint(<i>Int</i> screen_x, <i>Int</i> screen_y, <i>Boolean</i> allow_locked, <i>MediaItem_Take*</i> takeOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetItemStateChunk",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>ReaProject* GetItemProjectContext(MediaItem* item)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>ReaProject</i>  GetItemProjectContext(<i>MediaItem</i> item)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>ReaProject</i> reaper.GetItemProjectContext(<i>MediaItem</i> item)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>ReaProject</i>  RPR_GetItemProjectContext(<i>MediaItem</i> item)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetLastColorThemeFile",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetItemStateChunk(MediaItem* item, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetItemStateChunk(<i>MediaItem</i> item, #str, <i>bool </i>isundo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>str = reaper.GetItemStateChunk(<i>MediaItem</i> item, <i>string </i>str, <i>boolean</i> isundo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem</i> item, <i>String</i> strNeedBig, <i>Int</i> strNeedBig_sz, <i>Boolean</i> isundoOptional) = RPR_GetItemStateChunk(item, strNeedBig, strNeedBig_sz, isundoOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetLastMarkerAndCurRegion",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* GetLastColorThemeFile()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetLastColorThemeFile(#retval)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.GetLastColorThemeFile()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_GetLastColorThemeFile()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetLastTouchedFX",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetLastMarkerAndCurRegion(ReaProject* proj, double time, int* markeridxOut, int* regionidxOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetLastMarkerAndCurRegion(<i>ReaProject</i> proj, time, <i>int &amp;</i>markeridx, <i>int &amp;</i>regionidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number </i>markeridx, <i>number </i>regionidx = reaper.GetLastMarkerAndCurRegion(<i>ReaProject</i> proj, <i>number</i> time)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>ReaProject</i> proj, <i>Float</i> time, <i>Int</i> markeridxOut, <i>Int</i> regionidxOut) = RPR_GetLastMarkerAndCurRegion(proj, time, markeridxOut, regionidxOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetLastTouchedTrack",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetLastTouchedFX(int* tracknumberOut, int* fxnumberOut, int* paramnumberOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetLastTouchedFX(<i>int &amp;</i>tracknumber, <i>int &amp;</i>fxnumber, <i>int &amp;</i>paramnumber)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>tracknumber, <i>number </i>fxnumber, <i>number </i>paramnumber = reaper.GetLastTouchedFX()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>Int</i> tracknumberOut, <i>Int</i> fxnumberOut, <i>Int</i> paramnumberOut) = RPR_GetLastTouchedFX(tracknumberOut, fxnumberOut, paramnumberOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMainHwnd",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* GetLastTouchedTrack()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  GetLastTouchedTrack()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.GetLastTouchedTrack()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_GetLastTouchedTrack()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMasterMuteSoloFlags",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>HWND GetMainHwnd()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>HWND</i>  GetMainHwnd()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>HWND</i> reaper.GetMainHwnd()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>HWND</i>  RPR_GetMainHwnd()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMasterTrack",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetMasterMuteSoloFlags()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetMasterMuteSoloFlags()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetMasterMuteSoloFlags()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetMasterMuteSoloFlags()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMasterTrackVisibility",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* GetMasterTrack(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  GetMasterTrack(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.GetMasterTrack(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_GetMasterTrack(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMaxMidiInputs",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetMasterTrackVisibility()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetMasterTrackVisibility()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetMasterTrackVisibility()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetMasterTrackVisibility()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMaxMidiOutputs",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetMaxMidiInputs()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetMaxMidiInputs()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetMaxMidiInputs()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetMaxMidiInputs()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaFileMetadata",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetMaxMidiOutputs()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetMaxMidiOutputs()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetMaxMidiOutputs()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetMaxMidiOutputs()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaItem",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetMediaFileMetadata(PCM_source* mediaSource, const char* identifier, char* bufOutNeedBig, int bufOutNeedBig_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetMediaFileMetadata(<i>PCM_source</i> mediaSource, \"identifier\", #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>string </i>buf = reaper.GetMediaFileMetadata(<i>PCM_source</i> mediaSource, <i>string</i> identifier)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>PCM_source</i> mediaSource, <i>String</i> identifier, <i>String</i> bufOutNeedBig, <i>Int</i> bufOutNeedBig_sz) = RPR_GetMediaFileMetadata(mediaSource, identifier, bufOutNeedBig, bufOutNeedBig_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaItem_Track",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem* GetMediaItem(ReaProject* proj, int itemidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem</i>  GetMediaItem(<i>ReaProject</i> proj, <i>int </i>itemidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem</i> reaper.GetMediaItem(<i>ReaProject</i> proj, <i>integer</i> itemidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem</i>  RPR_GetMediaItem(<i>ReaProject</i> proj, <i>Int</i> itemidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaItemInfo_Value",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* GetMediaItem_Track(MediaItem* item)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  GetMediaItem_Track(<i>MediaItem</i> item)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.GetMediaItem_Track(<i>MediaItem</i> item)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_GetMediaItem_Track(<i>MediaItem</i> item)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaItemNumTakes",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetMediaItemInfo_Value(MediaItem* item, const char* parmname)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetMediaItemInfo_Value(<i>MediaItem</i> item, \"parmname\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetMediaItemInfo_Value(<i>MediaItem</i> item, <i>string</i> parmname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetMediaItemInfo_Value(<i>MediaItem</i> item, <i>String</i> parmname)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaItemTake",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetMediaItemNumTakes(MediaItem* item)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetMediaItemNumTakes(<i>MediaItem</i> item)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetMediaItemNumTakes(<i>MediaItem</i> item)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetMediaItemNumTakes(<i>MediaItem</i> item)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaItemTake_Item",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem_Take* GetMediaItemTake(MediaItem* item, int tk)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem_Take</i>  GetMediaItemTake(<i>MediaItem</i> item, <i>int </i>tk)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem_Take</i> reaper.GetMediaItemTake(<i>MediaItem</i> item, <i>integer</i> tk)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem_Take</i>  RPR_GetMediaItemTake(<i>MediaItem</i> item, <i>Int</i> tk)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaItemTake_Peaks",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem* GetMediaItemTake_Item(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem</i>  GetMediaItemTake_Item(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem</i> reaper.GetMediaItemTake_Item(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem</i>  RPR_GetMediaItemTake_Item(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaItemTake_Source",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetMediaItemTake_Peaks(MediaItem_Take* take, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetMediaItemTake_Peaks(<i>MediaItem_Take</i> take, peakrate, starttime, <i>int </i>numchannels, <i>int </i>numsamplesperchannel, <i>int </i>want_extra_type, <i>buffer_ptr </i>buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetMediaItemTake_Peaks(<i>MediaItem_Take</i> take, <i>number</i> peakrate, <i>number</i> starttime, <i>integer</i> numchannels, <i>integer</i> numsamplesperchannel, <i>integer</i> want_extra_type, <i>reaper.array </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>MediaItem_Take</i> take, <i>Float</i> peakrate, <i>Float</i> starttime, <i>Int</i> numchannels, <i>Int</i> numsamplesperchannel, <i>Int</i> want_extra_type, <i>Float</i> buf) = RPR_GetMediaItemTake_Peaks(take, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaItemTake_Track",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>PCM_source* GetMediaItemTake_Source(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>PCM_source</i>  GetMediaItemTake_Source(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>PCM_source</i> reaper.GetMediaItemTake_Source(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>PCM_source</i>  RPR_GetMediaItemTake_Source(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaItemTakeByGUID",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* GetMediaItemTake_Track(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  GetMediaItemTake_Track(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.GetMediaItemTake_Track(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_GetMediaItemTake_Track(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaItemTakeInfo_Value",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem_Take* GetMediaItemTakeByGUID(ReaProject* project, const GUID* guid)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem_Take</i>  GetMediaItemTakeByGUID(<i>ReaProject</i> project, \"guidGUID\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem_Take</i> reaper.GetMediaItemTakeByGUID(<i>ReaProject</i> project, <i>string</i> guidGUID)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem_Take</i>  RPR_GetMediaItemTakeByGUID(<i>ReaProject</i> project, <i>const GUID</i> guid)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaItemTrack",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetMediaItemTakeInfo_Value(<i>MediaItem_Take</i> take, \"parmname\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetMediaItemTakeInfo_Value(<i>MediaItem_Take</i> take, <i>string</i> parmname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetMediaItemTakeInfo_Value(<i>MediaItem_Take</i> take, <i>String</i> parmname)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaSourceFileName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* GetMediaItemTrack(MediaItem* item)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  GetMediaItemTrack(<i>MediaItem</i> item)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.GetMediaItemTrack(<i>MediaItem</i> item)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_GetMediaItemTrack(<i>MediaItem</i> item)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaSourceLength",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetMediaSourceFileName(PCM_source* source, char* filenamebuf, int filenamebuf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetMediaSourceFileName(<i>PCM_source</i> source, #filenamebuf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>filenamebuf = reaper.GetMediaSourceFileName(<i>PCM_source</i> source, <i>string </i>filenamebuf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>PCM_source</i> source, <i>String</i> filenamebuf, <i>Int</i> filenamebuf_sz) = RPR_GetMediaSourceFileName(source, filenamebuf, filenamebuf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaSourceNumChannels",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetMediaSourceLength(PCM_source* source, bool* lengthIsQNOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetMediaSourceLength(<i>PCM_source</i> source, <i>bool &amp;</i>lengthIsQN)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> retval, <i>boolean </i>lengthIsQN = reaper.GetMediaSourceLength(<i>PCM_source</i> source)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> retval, <i>PCM_source</i> source, <i>Boolean</i> lengthIsQNOut) = RPR_GetMediaSourceLength(source, lengthIsQNOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaSourceParent",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetMediaSourceNumChannels(PCM_source* source)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetMediaSourceNumChannels(<i>PCM_source</i> source)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetMediaSourceNumChannels(<i>PCM_source</i> source)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetMediaSourceNumChannels(<i>PCM_source</i> source)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaSourceSampleRate",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>PCM_source* GetMediaSourceParent(PCM_source* src)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>PCM_source</i>  GetMediaSourceParent(<i>PCM_source</i> src)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>PCM_source</i> reaper.GetMediaSourceParent(<i>PCM_source</i> src)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>PCM_source</i>  RPR_GetMediaSourceParent(<i>PCM_source</i> src)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaSourceType",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetMediaSourceSampleRate(PCM_source* source)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetMediaSourceSampleRate(<i>PCM_source</i> source)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetMediaSourceSampleRate(<i>PCM_source</i> source)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetMediaSourceSampleRate(<i>PCM_source</i> source)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMediaTrackInfo_Value",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetMediaSourceType(PCM_source* source, char* typebuf, int typebuf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetMediaSourceType(<i>PCM_source</i> source, #typebuf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>typebuf = reaper.GetMediaSourceType(<i>PCM_source</i> source, <i>string </i>typebuf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>PCM_source</i> source, <i>String</i> typebuf, <i>Int</i> typebuf_sz) = RPR_GetMediaSourceType(source, typebuf, typebuf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMIDIInputName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetMediaTrackInfo_Value(<i>MediaTrack</i> tr, \"parmname\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetMediaTrackInfo_Value(<i>MediaTrack</i> tr, <i>string</i> parmname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetMediaTrackInfo_Value(<i>MediaTrack</i> tr, <i>String</i> parmname)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMIDIOutputName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetMIDIInputName(int dev, char* nameout, int nameout_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetMIDIInputName(<i>int </i>dev, #nameout)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>nameout = reaper.GetMIDIInputName(<i>integer</i> dev, <i>string </i>nameout)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>Int</i> dev, <i>String</i> nameout, <i>Int</i> nameout_sz) = RPR_GetMIDIInputName(dev, nameout, nameout_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMixerScroll",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetMIDIOutputName(int dev, char* nameout, int nameout_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetMIDIOutputName(<i>int </i>dev, #nameout)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>nameout = reaper.GetMIDIOutputName(<i>integer</i> dev, <i>string </i>nameout)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>Int</i> dev, <i>String</i> nameout, <i>Int</i> nameout_sz) = RPR_GetMIDIOutputName(dev, nameout, nameout_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMouseModifier",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* GetMixerScroll()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  GetMixerScroll()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.GetMixerScroll()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_GetMixerScroll()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetMousePosition",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetMouseModifier(const char* context, int modifier_flag, char* action, int action_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetMouseModifier(\"context\", <i>int </i>modifier_flag, #action)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>action = reaper.GetMouseModifier(<i>string</i> context, <i>integer</i> modifier_flag, <i>string </i>action)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> context, <i>Int</i> modifier_flag, <i>String</i> action, <i>Int</i> action_sz) = RPR_GetMouseModifier(context, modifier_flag, action, action_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetNumAudioInputs",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetMousePosition(int* xOut, int* yOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetMousePosition(<i>int &amp;</i>x, <i>int &amp;</i>y)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number </i>x, <i>number </i>y = reaper.GetMousePosition()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> xOut, <i>Int</i> yOut) = RPR_GetMousePosition(xOut, yOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetNumAudioOutputs",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetNumAudioInputs()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetNumAudioInputs()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetNumAudioInputs()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetNumAudioInputs()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetNumMIDIInputs",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetNumAudioOutputs()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetNumAudioOutputs()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetNumAudioOutputs()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetNumAudioOutputs()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetNumMIDIOutputs",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetNumMIDIInputs()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetNumMIDIInputs()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetNumMIDIInputs()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetNumMIDIInputs()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetNumTakeMarkers",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetNumMIDIOutputs()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetNumMIDIOutputs()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetNumMIDIOutputs()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetNumMIDIOutputs()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetNumTracks",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetNumTakeMarkers(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetNumTakeMarkers(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetNumTakeMarkers(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetNumTakeMarkers(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetOS",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetNumTracks()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetNumTracks()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetNumTracks()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetNumTracks()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetOutputChannelName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* GetOS()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetOS(#retval)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.GetOS()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_GetOS()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetOutputLatency",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* GetOutputChannelName(int channelIndex)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetOutputChannelName(#retval, <i>int </i>channelIndex)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.GetOutputChannelName(<i>integer</i> channelIndex)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_GetOutputChannelName(<i>Int</i> channelIndex)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetParentTrack",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetOutputLatency()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetOutputLatency()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetOutputLatency()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetOutputLatency()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetPeakFileName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* GetParentTrack(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  GetParentTrack(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.GetParentTrack(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_GetParentTrack(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetPeakFileNameEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetPeakFileName(const char* fn, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetPeakFileName(\"fn\", #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>buf = reaper.GetPeakFileName(<i>string</i> fn, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> fn, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_GetPeakFileName(fn, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetPeakFileNameEx2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetPeakFileNameEx(const char* fn, char* buf, int buf_sz, bool forWrite)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetPeakFileNameEx(\"fn\", #buf, <i>bool </i>forWrite)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>buf = reaper.GetPeakFileNameEx(<i>string</i> fn, <i>string </i>buf, <i>boolean</i> forWrite)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> fn, <i>String</i> buf, <i>Int</i> buf_sz, <i>Boolean</i> forWrite) = RPR_GetPeakFileNameEx(fn, buf, buf_sz, forWrite)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetPlayPosition",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetPeakFileNameEx2(const char* fn, char* buf, int buf_sz, bool forWrite, const char* peaksfileextension)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetPeakFileNameEx2(\"fn\", #buf, <i>bool </i>forWrite, \"peaksfileextension\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>buf = reaper.GetPeakFileNameEx2(<i>string</i> fn, <i>string </i>buf, <i>boolean</i> forWrite, <i>string</i> peaksfileextension)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> fn, <i>String</i> buf, <i>Int</i> buf_sz, <i>Boolean</i> forWrite, <i>String</i> peaksfileextension) = RPR_GetPeakFileNameEx2(fn, buf, buf_sz, forWrite, peaksfileextension)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetPlayPosition2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetPlayPosition()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetPlayPosition()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetPlayPosition()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetPlayPosition()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetPlayPosition2Ex",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetPlayPosition2()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetPlayPosition2()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetPlayPosition2()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetPlayPosition2()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetPlayPositionEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetPlayPosition2Ex(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetPlayPosition2Ex(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetPlayPosition2Ex(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetPlayPosition2Ex(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetPlayState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetPlayPositionEx(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetPlayPositionEx(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetPlayPositionEx(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetPlayPositionEx(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetPlayStateEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetPlayState()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetPlayState()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetPlayState()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetPlayState()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetProjectLength",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetPlayStateEx(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetPlayStateEx(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetPlayStateEx(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetPlayStateEx(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetProjectName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetProjectLength(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetProjectLength(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetProjectLength(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetProjectLength(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetProjectPath",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetProjectName(ReaProject* proj, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetProjectName(<i>ReaProject</i> proj, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>buf = reaper.GetProjectName(<i>ReaProject</i> proj, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>ReaProject</i> proj, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_GetProjectName(proj, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetProjectPathEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetProjectPath(char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetProjectPath(#buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>buf = reaper.GetProjectPath(<i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> buf, <i>Int</i> buf_sz) = RPR_GetProjectPath(buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetProjectStateChangeCount",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetProjectPathEx(ReaProject* proj, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetProjectPathEx(<i>ReaProject</i> proj, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>buf = reaper.GetProjectPathEx(<i>ReaProject</i> proj, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>ReaProject</i> proj, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_GetProjectPathEx(proj, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetProjectTimeOffset",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetProjectStateChangeCount(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetProjectStateChangeCount(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetProjectStateChangeCount(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetProjectStateChangeCount(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetProjectTimeSignature",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetProjectTimeOffset(ReaProject* proj, bool rndframe)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetProjectTimeOffset(<i>ReaProject</i> proj, <i>bool </i>rndframe)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetProjectTimeOffset(<i>ReaProject</i> proj, <i>boolean</i> rndframe)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetProjectTimeOffset(<i>ReaProject</i> proj, <i>Boolean</i> rndframe)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetProjectTimeSignature2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetProjectTimeSignature(double* bpmOut, double* bpiOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetProjectTimeSignature(<i>&amp;</i>bpm, <i>&amp;</i>bpi)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number </i>bpm, <i>number </i>bpi = reaper.GetProjectTimeSignature()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> bpmOut, <i>Float</i> bpiOut) = RPR_GetProjectTimeSignature(bpmOut, bpiOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetProjExtState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetProjectTimeSignature2(ReaProject* proj, double* bpmOut, double* bpiOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetProjectTimeSignature2(<i>ReaProject</i> proj, <i>&amp;</i>bpm, <i>&amp;</i>bpi)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number </i>bpm, <i>number </i>bpi = reaper.GetProjectTimeSignature2(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>ReaProject</i> proj, <i>Float</i> bpmOut, <i>Float</i> bpiOut) = RPR_GetProjectTimeSignature2(proj, bpmOut, bpiOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetResourcePath",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetProjExtState(ReaProject* proj, const char* extname, const char* key, char* valOutNeedBig, int valOutNeedBig_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetProjExtState(<i>ReaProject</i> proj, \"extname\", \"key\", #val)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>string </i>val = reaper.GetProjExtState(<i>ReaProject</i> proj, <i>string</i> extname, <i>string</i> key)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>ReaProject</i> proj, <i>String</i> extname, <i>String</i> key, <i>String</i> valOutNeedBig, <i>Int</i> valOutNeedBig_sz) = RPR_GetProjExtState(proj, extname, key, valOutNeedBig, valOutNeedBig_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSelectedEnvelope",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* GetResourcePath()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetResourcePath(#retval)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.GetResourcePath()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_GetResourcePath()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSelectedMediaItem",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>TrackEnvelope* GetSelectedEnvelope(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>TrackEnvelope</i>  GetSelectedEnvelope(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>TrackEnvelope</i> reaper.GetSelectedEnvelope(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>TrackEnvelope</i>  RPR_GetSelectedEnvelope(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSelectedTrack",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem* GetSelectedMediaItem(ReaProject* proj, int selitem)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem</i>  GetSelectedMediaItem(<i>ReaProject</i> proj, <i>int </i>selitem)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem</i> reaper.GetSelectedMediaItem(<i>ReaProject</i> proj, <i>integer</i> selitem)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem</i>  RPR_GetSelectedMediaItem(<i>ReaProject</i> proj, <i>Int</i> selitem)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSelectedTrack2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* GetSelectedTrack(ReaProject* proj, int seltrackidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  GetSelectedTrack(<i>ReaProject</i> proj, <i>int </i>seltrackidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.GetSelectedTrack(<i>ReaProject</i> proj, <i>integer</i> seltrackidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_GetSelectedTrack(<i>ReaProject</i> proj, <i>Int</i> seltrackidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSelectedTrackEnvelope",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* GetSelectedTrack2(ReaProject* proj, int seltrackidx, bool wantmaster)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  GetSelectedTrack2(<i>ReaProject</i> proj, <i>int </i>seltrackidx, <i>bool </i>wantmaster)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.GetSelectedTrack2(<i>ReaProject</i> proj, <i>integer</i> seltrackidx, <i>boolean</i> wantmaster)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_GetSelectedTrack2(<i>ReaProject</i> proj, <i>Int</i> seltrackidx, <i>Boolean</i> wantmaster)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSet_ArrangeView2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>TrackEnvelope* GetSelectedTrackEnvelope(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>TrackEnvelope</i>  GetSelectedTrackEnvelope(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>TrackEnvelope</i> reaper.GetSelectedTrackEnvelope(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>TrackEnvelope</i>  RPR_GetSelectedTrackEnvelope(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSet_LoopTimeRange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetSet_ArrangeView2(ReaProject* proj, bool isSet, int screen_x_start, int screen_x_end, double* start_timeOut, double* end_timeOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetSet_ArrangeView2(<i>ReaProject</i> proj, <i>bool </i>isSet, <i>int </i>screen_x_start, <i>int </i>screen_x_end, <i>&amp;</i>start_time, <i>&amp;</i>end_time)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number </i>start_time, <i>number </i>end_time = reaper.GetSet_ArrangeView2(<i>ReaProject</i> proj, <i>boolean</i> isSet, <i>integer</i> screen_x_start, <i>integer</i> screen_x_end)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>ReaProject</i> proj, <i>Boolean</i> isSet, <i>Int</i> screen_x_start, <i>Int</i> screen_x_end, <i>Float</i> start_timeOut, <i>Float</i> end_timeOut) = RPR_GetSet_ArrangeView2(proj, isSet, screen_x_start, screen_x_end, start_timeOut, end_timeOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSet_LoopTimeRange2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetSet_LoopTimeRange(bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetSet_LoopTimeRange(<i>bool </i>isSet, <i>bool </i>isLoop, <i>&amp;</i>start, <i>&amp;</i>end, <i>bool </i>allowautoseek)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number </i>start, <i>number </i>end = reaper.GetSet_LoopTimeRange(<i>boolean</i> isSet, <i>boolean</i> isLoop, <i>number </i>start, <i>number </i>end, <i>boolean</i> allowautoseek)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> isSet, <i>Boolean</i> isLoop, <i>Float</i> startOut, <i>Float</i> endOut, <i>Boolean</i> allowautoseek) = RPR_GetSet_LoopTimeRange(isSet, isLoop, startOut, endOut, allowautoseek)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetAutomationItemInfo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetSet_LoopTimeRange2(ReaProject* proj, bool isSet, bool isLoop, double* startOut, double* endOut, bool allowautoseek)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetSet_LoopTimeRange2(<i>ReaProject</i> proj, <i>bool </i>isSet, <i>bool </i>isLoop, <i>&amp;</i>start, <i>&amp;</i>end, <i>bool </i>allowautoseek)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number </i>start, <i>number </i>end = reaper.GetSet_LoopTimeRange2(<i>ReaProject</i> proj, <i>boolean</i> isSet, <i>boolean</i> isLoop, <i>number </i>start, <i>number </i>end, <i>boolean</i> allowautoseek)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>ReaProject</i> proj, <i>Boolean</i> isSet, <i>Boolean</i> isLoop, <i>Float</i> startOut, <i>Float</i> endOut, <i>Boolean</i> allowautoseek) = RPR_GetSet_LoopTimeRange2(proj, isSet, isLoop, startOut, endOut, allowautoseek)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetAutomationItemInfo_String",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetSetAutomationItemInfo(TrackEnvelope* env, int autoitem_idx, const char* desc, double value, bool is_set)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetSetAutomationItemInfo(<i>TrackEnvelope</i> env, <i>int </i>autoitem_idx, \"desc\", value, <i>bool </i>is_set)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetSetAutomationItemInfo(<i>TrackEnvelope</i> env, <i>integer</i> autoitem_idx, <i>string</i> desc, <i>number</i> value, <i>boolean</i> is_set)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetSetAutomationItemInfo(<i>TrackEnvelope</i> env, <i>Int</i> autoitem_idx, <i>String</i> desc, <i>Float</i> value, <i>Boolean</i> is_set)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetEnvelopeInfo_String",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetAutomationItemInfo_String(TrackEnvelope* env, int autoitem_idx, const char* desc, char* valuestrNeedBig, bool is_set)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetAutomationItemInfo_String(<i>TrackEnvelope</i> env, <i>int </i>autoitem_idx, \"desc\", #valuestrNeedBig, <i>bool </i>is_set)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>valuestrNeedBig = reaper.GetSetAutomationItemInfo_String(<i>TrackEnvelope</i> env, <i>integer</i> autoitem_idx, <i>string</i> desc, <i>string </i>valuestrNeedBig, <i>boolean</i> is_set)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>TrackEnvelope</i> env, <i>Int</i> autoitem_idx, <i>String</i> desc, <i>String</i> valuestrNeedBig, <i>Boolean</i> is_set) = RPR_GetSetAutomationItemInfo_String(env, autoitem_idx, desc, valuestrNeedBig, is_set)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetEnvelopeState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetEnvelopeInfo_String(TrackEnvelope* env, const char* parmname, char* stringNeedBig, bool setNewValue)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetEnvelopeInfo_String(<i>TrackEnvelope</i> env, \"parmname\", #stringNeedBig, <i>bool </i>setNewValue)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>stringNeedBig = reaper.GetSetEnvelopeInfo_String(<i>TrackEnvelope</i> env, <i>string</i> parmname, <i>string </i>stringNeedBig, <i>boolean</i> setNewValue)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>TrackEnvelope</i> env, <i>String</i> parmname, <i>String</i> stringNeedBig, <i>Boolean</i> setNewValue) = RPR_GetSetEnvelopeInfo_String(env, parmname, stringNeedBig, setNewValue)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetEnvelopeState2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetEnvelopeState(TrackEnvelope* env, char* str, int str_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetEnvelopeState(<i>TrackEnvelope</i> env, #str)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>str = reaper.GetSetEnvelopeState(<i>TrackEnvelope</i> env, <i>string </i>str)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>TrackEnvelope</i> env, <i>String</i> str, <i>Int</i> str_sz) = RPR_GetSetEnvelopeState(env, str, str_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetItemState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetEnvelopeState2(TrackEnvelope* env, char* str, int str_sz, bool isundo)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetEnvelopeState2(<i>TrackEnvelope</i> env, #str, <i>bool </i>isundo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>str = reaper.GetSetEnvelopeState2(<i>TrackEnvelope</i> env, <i>string </i>str, <i>boolean</i> isundo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>TrackEnvelope</i> env, <i>String</i> str, <i>Int</i> str_sz, <i>Boolean</i> isundo) = RPR_GetSetEnvelopeState2(env, str, str_sz, isundo)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetItemState2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetItemState(MediaItem* item, char* str, int str_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetItemState(<i>MediaItem</i> item, #str)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>str = reaper.GetSetItemState(<i>MediaItem</i> item, <i>string </i>str)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem</i> item, <i>String</i> str, <i>Int</i> str_sz) = RPR_GetSetItemState(item, str, str_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetMediaItemInfo_String",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetItemState2(MediaItem* item, char* str, int str_sz, bool isundo)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetItemState2(<i>MediaItem</i> item, #str, <i>bool </i>isundo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>str = reaper.GetSetItemState2(<i>MediaItem</i> item, <i>string </i>str, <i>boolean</i> isundo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem</i> item, <i>String</i> str, <i>Int</i> str_sz, <i>Boolean</i> isundo) = RPR_GetSetItemState2(item, str, str_sz, isundo)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetMediaItemTakeInfo_String",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetMediaItemInfo_String(MediaItem* item, const char* parmname, char* stringNeedBig, bool setNewValue)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetMediaItemInfo_String(<i>MediaItem</i> item, \"parmname\", #stringNeedBig, <i>bool </i>setNewValue)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>stringNeedBig = reaper.GetSetMediaItemInfo_String(<i>MediaItem</i> item, <i>string</i> parmname, <i>string </i>stringNeedBig, <i>boolean</i> setNewValue)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem</i> item, <i>String</i> parmname, <i>String</i> stringNeedBig, <i>Boolean</i> setNewValue) = RPR_GetSetMediaItemInfo_String(item, parmname, stringNeedBig, setNewValue)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetMediaTrackInfo_String",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetMediaItemTakeInfo_String(MediaItem_Take* tk, const char* parmname, char* stringNeedBig, bool setNewValue)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetMediaItemTakeInfo_String(<i>MediaItem_Take</i> tk, \"parmname\", #stringNeedBig, <i>bool </i>setNewValue)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>stringNeedBig = reaper.GetSetMediaItemTakeInfo_String(<i>MediaItem_Take</i> tk, <i>string</i> parmname, <i>string </i>stringNeedBig, <i>boolean</i> setNewValue)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> tk, <i>String</i> parmname, <i>String</i> stringNeedBig, <i>Boolean</i> setNewValue) = RPR_GetSetMediaItemTakeInfo_String(tk, parmname, stringNeedBig, setNewValue)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetProjectAuthor",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetMediaTrackInfo_String(MediaTrack* tr, const char* parmname, char* stringNeedBig, bool setNewValue)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetMediaTrackInfo_String(<i>MediaTrack</i> tr, \"parmname\", #stringNeedBig, <i>bool </i>setNewValue)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>stringNeedBig = reaper.GetSetMediaTrackInfo_String(<i>MediaTrack</i> tr, <i>string</i> parmname, <i>string </i>stringNeedBig, <i>boolean</i> setNewValue)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> tr, <i>String</i> parmname, <i>String</i> stringNeedBig, <i>Boolean</i> setNewValue) = RPR_GetSetMediaTrackInfo_String(tr, parmname, stringNeedBig, setNewValue)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetProjectGrid",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetSetProjectAuthor(ReaProject* proj, bool set, char* author, int author_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetSetProjectAuthor(<i>ReaProject</i> proj, <i>bool </i>set, #author)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>author = reaper.GetSetProjectAuthor(<i>ReaProject</i> proj, <i>boolean</i> set, <i>string </i>author)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>ReaProject</i> proj, <i>Boolean</i> set, <i>String</i> author, <i>Int</i> author_sz) = RPR_GetSetProjectAuthor(proj, set, author, author_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetProjectInfo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetSetProjectGrid(ReaProject* project, bool set, double* divisionInOutOptional, int* swingmodeInOutOptional, double* swingamtInOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetSetProjectGrid(<i>ReaProject</i> project, <i>bool </i>set, <i>optional &amp;</i>division, <i>optional int &amp;</i>swingmode, <i>optional &amp;</i>swingamt)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>optional number </i>division, <i>optional number </i>swingmode, <i>optional number </i>swingamt = reaper.GetSetProjectGrid(<i>ReaProject</i> project, <i>boolean</i> set, <i>optional number </i>division, <i>optional number </i>swingmode, <i>optional number </i>swingamt)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>ReaProject</i> project, <i>Boolean</i> set, <i>Float</i> divisionInOutOptional, <i>Int</i> swingmodeInOutOptional, <i>Float</i> swingamtInOutOptional) = RPR_GetSetProjectGrid(project, set, divisionInOutOptional, swingmodeInOutOptional, swingamtInOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetProjectInfo_String",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetSetProjectInfo(ReaProject* project, const char* desc, double value, bool is_set)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetSetProjectInfo(<i>ReaProject</i> project, \"desc\", value, <i>bool </i>is_set)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetSetProjectInfo(<i>ReaProject</i> project, <i>string</i> desc, <i>number</i> value, <i>boolean</i> is_set)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetSetProjectInfo(<i>ReaProject</i> project, <i>String</i> desc, <i>Float</i> value, <i>Boolean</i> is_set)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetProjectNotes",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetProjectInfo_String(ReaProject* project, const char* desc, char* valuestrNeedBig, bool is_set)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetProjectInfo_String(<i>ReaProject</i> project, \"desc\", #valuestrNeedBig, <i>bool </i>is_set)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>valuestrNeedBig = reaper.GetSetProjectInfo_String(<i>ReaProject</i> project, <i>string</i> desc, <i>string </i>valuestrNeedBig, <i>boolean</i> is_set)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>ReaProject</i> project, <i>String</i> desc, <i>String</i> valuestrNeedBig, <i>Boolean</i> is_set) = RPR_GetSetProjectInfo_String(project, desc, valuestrNeedBig, is_set)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetRepeat",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetSetProjectNotes(ReaProject* proj, bool set, char* notesNeedBig, int notesNeedBig_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetSetProjectNotes(<i>ReaProject</i> proj, <i>bool </i>set, #notes)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>notes = reaper.GetSetProjectNotes(<i>ReaProject</i> proj, <i>boolean</i> set, <i>string </i>notes)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>ReaProject</i> proj, <i>Boolean</i> set, <i>String</i> notesNeedBig, <i>Int</i> notesNeedBig_sz) = RPR_GetSetProjectNotes(proj, set, notesNeedBig, notesNeedBig_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetRepeatEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetSetRepeat(int val)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetSetRepeat(<i>int </i>val)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetSetRepeat(<i>integer</i> val)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetSetRepeat(<i>Int</i> val)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetTrackGroupMembership",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetSetRepeatEx(ReaProject* proj, int val)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetSetRepeatEx(<i>ReaProject</i> proj, <i>int </i>val)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetSetRepeatEx(<i>ReaProject</i> proj, <i>integer</i> val)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetSetRepeatEx(<i>ReaProject</i> proj, <i>Int</i> val)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetTrackGroupMembershipHigh",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>unsigned int GetSetTrackGroupMembership(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>uint </i> GetSetTrackGroupMembership(<i>MediaTrack</i> tr, \"groupname\", <i>uint </i>setmask, <i>uint </i>setvalue)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetSetTrackGroupMembership(<i>MediaTrack</i> tr, <i>string</i> groupname, <i>integer</i> setmask, <i>integer</i> setvalue)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Unknown</i>  RPR_GetSetTrackGroupMembership(<i>MediaTrack</i> tr, <i>String</i> groupname, <i>Unknown</i> setmask, <i>Unknown</i> setvalue)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetTrackSendInfo_String",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>unsigned int GetSetTrackGroupMembershipHigh(MediaTrack* tr, const char* groupname, unsigned int setmask, unsigned int setvalue)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>uint </i> GetSetTrackGroupMembershipHigh(<i>MediaTrack</i> tr, \"groupname\", <i>uint </i>setmask, <i>uint </i>setvalue)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetSetTrackGroupMembershipHigh(<i>MediaTrack</i> tr, <i>string</i> groupname, <i>integer</i> setmask, <i>integer</i> setvalue)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Unknown</i>  RPR_GetSetTrackGroupMembershipHigh(<i>MediaTrack</i> tr, <i>String</i> groupname, <i>Unknown</i> setmask, <i>Unknown</i> setvalue)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetTrackState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetTrackSendInfo_String(MediaTrack* tr, int category, int sendidx, const char* parmname, char* stringNeedBig, bool setNewValue)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetTrackSendInfo_String(<i>MediaTrack</i> tr, <i>int </i>category, <i>int </i>sendidx, \"parmname\", #stringNeedBig, <i>bool </i>setNewValue)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>stringNeedBig = reaper.GetSetTrackSendInfo_String(<i>MediaTrack</i> tr, <i>integer</i> category, <i>integer</i> sendidx, <i>string</i> parmname, <i>string </i>stringNeedBig, <i>boolean</i> setNewValue)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> tr, <i>Int</i> category, <i>Int</i> sendidx, <i>String</i> parmname, <i>String</i> stringNeedBig, <i>Boolean</i> setNewValue) = RPR_GetSetTrackSendInfo_String(tr, category, sendidx, parmname, stringNeedBig, setNewValue)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSetTrackState2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetTrackState(MediaTrack* track, char* str, int str_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetTrackState(<i>MediaTrack</i> track, #str)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>str = reaper.GetSetTrackState(<i>MediaTrack</i> track, <i>string </i>str)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>String</i> str, <i>Int</i> str_sz) = RPR_GetSetTrackState(track, str, str_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetSubProjectFromSource",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetSetTrackState2(MediaTrack* track, char* str, int str_sz, bool isundo)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetSetTrackState2(<i>MediaTrack</i> track, #str, <i>bool </i>isundo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>str = reaper.GetSetTrackState2(<i>MediaTrack</i> track, <i>string </i>str, <i>boolean</i> isundo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>String</i> str, <i>Int</i> str_sz, <i>Boolean</i> isundo) = RPR_GetSetTrackState2(track, str, str_sz, isundo)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTake",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>ReaProject* GetSubProjectFromSource(PCM_source* src)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>ReaProject</i>  GetSubProjectFromSource(<i>PCM_source</i> src)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>ReaProject</i> reaper.GetSubProjectFromSource(<i>PCM_source</i> src)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>ReaProject</i>  RPR_GetSubProjectFromSource(<i>PCM_source</i> src)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTakeEnvelope",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem_Take* GetTake(MediaItem* item, int takeidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem_Take</i>  GetTake(<i>MediaItem</i> item, <i>int </i>takeidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem_Take</i> reaper.GetTake(<i>MediaItem</i> item, <i>integer</i> takeidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem_Take</i>  RPR_GetTake(<i>MediaItem</i> item, <i>Int</i> takeidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTakeEnvelopeByName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>TrackEnvelope* GetTakeEnvelope(MediaItem_Take* take, int envidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>TrackEnvelope</i>  GetTakeEnvelope(<i>MediaItem_Take</i> take, <i>int </i>envidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>TrackEnvelope</i> reaper.GetTakeEnvelope(<i>MediaItem_Take</i> take, <i>integer</i> envidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>TrackEnvelope</i>  RPR_GetTakeEnvelope(<i>MediaItem_Take</i> take, <i>Int</i> envidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTakeMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>TrackEnvelope* GetTakeEnvelopeByName(MediaItem_Take* take, const char* envname)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>TrackEnvelope</i>  GetTakeEnvelopeByName(<i>MediaItem_Take</i> take, \"envname\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>TrackEnvelope</i> reaper.GetTakeEnvelopeByName(<i>MediaItem_Take</i> take, <i>string</i> envname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>TrackEnvelope</i>  RPR_GetTakeEnvelopeByName(<i>MediaItem_Take</i> take, <i>String</i> envname)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTakeName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetTakeMarker(MediaItem_Take* take, int idx, char* nameOut, int nameOut_sz, int* colorOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetTakeMarker(<i>MediaItem_Take</i> take, <i>int </i>idx, #name, <i>optional int &amp;</i>color)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> retval, <i>string </i>name, <i>optional number </i>color = reaper.GetTakeMarker(<i>MediaItem_Take</i> take, <i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> idx, <i>String</i> nameOut, <i>Int</i> nameOut_sz, <i>Int</i> colorOutOptional) = RPR_GetTakeMarker(take, idx, nameOut, nameOut_sz, colorOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTakeNumStretchMarkers",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* GetTakeName(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetTakeName(#retval, <i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.GetTakeName(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_GetTakeName(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTakeStretchMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetTakeNumStretchMarkers(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetTakeNumStretchMarkers(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetTakeNumStretchMarkers(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetTakeNumStretchMarkers(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTakeStretchMarkerSlope",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetTakeStretchMarker(MediaItem_Take* take, int idx, double* posOut, double* srcposOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetTakeStretchMarker(<i>MediaItem_Take</i> take, <i>int </i>idx, <i>&amp;</i>pos, <i>optional &amp;</i>srcpos)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>number </i>pos, <i>optional number </i>srcpos = reaper.GetTakeStretchMarker(<i>MediaItem_Take</i> take, <i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> idx, <i>Float</i> posOut, <i>Float</i> srcposOutOptional) = RPR_GetTakeStretchMarker(take, idx, posOut, srcposOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTCPFXParm",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetTakeStretchMarkerSlope(MediaItem_Take* take, int idx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetTakeStretchMarkerSlope(<i>MediaItem_Take</i> take, <i>int </i>idx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetTakeStretchMarkerSlope(<i>MediaItem_Take</i> take, <i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetTakeStretchMarkerSlope(<i>MediaItem_Take</i> take, <i>Int</i> idx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTempoMatchPlayRate",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTCPFXParm(ReaProject* project, MediaTrack* track, int index, int* fxindexOut, int* parmidxOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTCPFXParm(<i>ReaProject</i> project, <i>MediaTrack</i> track, <i>int </i>index, <i>int &amp;</i>fxindex, <i>int &amp;</i>parmidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>fxindex, <i>number </i>parmidx = reaper.GetTCPFXParm(<i>ReaProject</i> project, <i>MediaTrack</i> track, <i>integer</i> index)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>ReaProject</i> project, <i>MediaTrack</i> track, <i>Int</i> index, <i>Int</i> fxindexOut, <i>Int</i> parmidxOut) = RPR_GetTCPFXParm(project, track, index, fxindexOut, parmidxOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTempoTimeSigMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTempoMatchPlayRate(PCM_source* source, double srcscale, double position, double mult, double* rateOut, double* targetlenOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTempoMatchPlayRate(<i>PCM_source</i> source, srcscale, position, mult, <i>&amp;</i>rate, <i>&amp;</i>targetlen)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>rate, <i>number </i>targetlen = reaper.GetTempoMatchPlayRate(<i>PCM_source</i> source, <i>number</i> srcscale, <i>number</i> position, <i>number</i> mult)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>PCM_source</i> source, <i>Float</i> srcscale, <i>Float</i> position, <i>Float</i> mult, <i>Float</i> rateOut, <i>Float</i> targetlenOut) = RPR_GetTempoMatchPlayRate(source, srcscale, position, mult, rateOut, targetlenOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetThemeColor",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTempoTimeSigMarker(ReaProject* proj, int ptidx, double* timeposOut, int* measureposOut, double* beatposOut, double* bpmOut, int* timesig_numOut, int* timesig_denomOut, bool* lineartempoOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTempoTimeSigMarker(<i>ReaProject</i> proj, <i>int </i>ptidx, <i>&amp;</i>timepos, <i>int &amp;</i>measurepos, <i>&amp;</i>beatpos, <i>&amp;</i>bpm, <i>int &amp;</i>timesig_num, <i>int &amp;</i>timesig_denom, <i>bool &amp;</i>lineartempo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>timepos, <i>number </i>measurepos, <i>number </i>beatpos, <i>number </i>bpm, <i>number </i>timesig_num, <i>number </i>timesig_denom, <i>boolean </i>lineartempo = reaper.GetTempoTimeSigMarker(<i>ReaProject</i> proj, <i>integer</i> ptidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>ReaProject</i> proj, <i>Int</i> ptidx, <i>Float</i> timeposOut, <i>Int</i> measureposOut, <i>Float</i> beatposOut, <i>Float</i> bpmOut, <i>Int</i> timesig_numOut, <i>Int</i> timesig_denomOut, <i>Boolean</i> lineartempoOut) = RPR_GetTempoTimeSigMarker(proj, ptidx, timeposOut, measureposOut, beatposOut, bpmOut, timesig_numOut, timesig_denomOut, lineartempoOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetToggleCommandState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetThemeColor(const char* ini_key, int flagsOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetThemeColor(\"ini_key\", <i>int </i>flags)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetThemeColor(<i>string</i> ini_key, <i>integer</i> flags)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetThemeColor(<i>String</i> ini_key, <i>Int</i> flagsOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetToggleCommandStateEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetToggleCommandState(int command_id)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetToggleCommandState(<i>int </i>command_id)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetToggleCommandState(<i>integer</i> command_id)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetToggleCommandState(<i>Int</i> command_id)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTooltipWindow",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetToggleCommandStateEx(int section_id, int command_id)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetToggleCommandStateEx(<i>int </i>section_id, <i>int </i>command_id)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetToggleCommandStateEx(<i>integer</i> section_id, <i>integer</i> command_id)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetToggleCommandStateEx(<i>Int</i> section_id, <i>Int</i> command_id)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrack",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>HWND GetTooltipWindow()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>HWND</i>  GetTooltipWindow()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>HWND</i> reaper.GetTooltipWindow()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>HWND</i>  RPR_GetTooltipWindow()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackAutomationMode",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* GetTrack(ReaProject* proj, int trackidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  GetTrack(<i>ReaProject</i> proj, <i>int </i>trackidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.GetTrack(<i>ReaProject</i> proj, <i>integer</i> trackidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_GetTrack(<i>ReaProject</i> proj, <i>Int</i> trackidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackColor",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetTrackAutomationMode(MediaTrack* tr)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetTrackAutomationMode(<i>MediaTrack</i> tr)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetTrackAutomationMode(<i>MediaTrack</i> tr)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetTrackAutomationMode(<i>MediaTrack</i> tr)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackDepth",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetTrackColor(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetTrackColor(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetTrackColor(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetTrackColor(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackEnvelope",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetTrackDepth(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetTrackDepth(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetTrackDepth(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetTrackDepth(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackEnvelopeByChunkName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>TrackEnvelope* GetTrackEnvelope(MediaTrack* track, int envidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>TrackEnvelope</i>  GetTrackEnvelope(<i>MediaTrack</i> track, <i>int </i>envidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>TrackEnvelope</i> reaper.GetTrackEnvelope(<i>MediaTrack</i> track, <i>integer</i> envidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>TrackEnvelope</i>  RPR_GetTrackEnvelope(<i>MediaTrack</i> track, <i>Int</i> envidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackEnvelopeByName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>TrackEnvelope* GetTrackEnvelopeByChunkName(MediaTrack* tr, const char* cfgchunkname_or_guid)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>TrackEnvelope</i>  GetTrackEnvelopeByChunkName(<i>MediaTrack</i> tr, \"cfgchunkname_or_guid\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>TrackEnvelope</i> reaper.GetTrackEnvelopeByChunkName(<i>MediaTrack</i> tr, <i>string</i> cfgchunkname_or_guid)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>TrackEnvelope</i>  RPR_GetTrackEnvelopeByChunkName(<i>MediaTrack</i> tr, <i>String</i> cfgchunkname_or_guid)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackFromPoint",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>TrackEnvelope* GetTrackEnvelopeByName(MediaTrack* track, const char* envname)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>TrackEnvelope</i>  GetTrackEnvelopeByName(<i>MediaTrack</i> track, \"envname\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>TrackEnvelope</i> reaper.GetTrackEnvelopeByName(<i>MediaTrack</i> track, <i>string</i> envname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>TrackEnvelope</i>  RPR_GetTrackEnvelopeByName(<i>MediaTrack</i> track, <i>String</i> envname)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackGUID",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* GetTrackFromPoint(int screen_x, int screen_y, int* infoOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  GetTrackFromPoint(<i>int </i>screen_x, <i>int </i>screen_y, <i>optional int &amp;</i>info)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> retval, <i>optional number </i>info = reaper.GetTrackFromPoint(<i>integer</i> screen_x, <i>integer</i> screen_y)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>MediaTrack</i> retval, <i>Int</i> screen_x, <i>Int</i> screen_y, <i>Int</i> infoOutOptional) = RPR_GetTrackFromPoint(screen_x, screen_y, infoOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackMediaItem",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>GUID* GetTrackGUID(MediaTrack* tr)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetTrackGUID(#retguid, <i>MediaTrack</i> tr)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> GUID = reaper.GetTrackGUID(<i>MediaTrack</i> tr)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>GUID</i>  RPR_GetTrackGUID(<i>MediaTrack</i> tr)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackMIDILyrics",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem* GetTrackMediaItem(MediaTrack* tr, int itemidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem</i>  GetTrackMediaItem(<i>MediaTrack</i> tr, <i>int </i>itemidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem</i> reaper.GetTrackMediaItem(<i>MediaTrack</i> tr, <i>integer</i> itemidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem</i>  RPR_GetTrackMediaItem(<i>MediaTrack</i> tr, <i>Int</i> itemidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackMIDINoteName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTrackMIDILyrics(MediaTrack* track, int flag, char* bufWantNeedBig, int* bufWantNeedBig_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTrackMIDILyrics(<i>MediaTrack</i> track, <i>int </i>flag, #bufWant)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>bufWant = reaper.GetTrackMIDILyrics(<i>MediaTrack</i> track, <i>integer</i> flag, <i>string </i>bufWant)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> flag, <i>String</i> bufWantNeedBig, <i>Int</i> bufWantNeedBig_sz) = RPR_GetTrackMIDILyrics(track, flag, bufWantNeedBig, bufWantNeedBig_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackMIDINoteNameEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* GetTrackMIDINoteName(int track, int pitch, int chan)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetTrackMIDINoteName(#retval, <i>int </i>track, <i>int </i>pitch, <i>int </i>chan)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.GetTrackMIDINoteName(<i>integer</i> track, <i>integer</i> pitch, <i>integer</i> chan)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_GetTrackMIDINoteName(<i>Int</i> track, <i>Int</i> pitch, <i>Int</i> chan)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackMIDINoteRange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* GetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetTrackMIDINoteNameEx(#retval, <i>ReaProject</i> proj, <i>MediaTrack</i> track, <i>int </i>pitch, <i>int </i>chan)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.GetTrackMIDINoteNameEx(<i>ReaProject</i> proj, <i>MediaTrack</i> track, <i>integer</i> pitch, <i>integer</i> chan)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_GetTrackMIDINoteNameEx(<i>ReaProject</i> proj, <i>MediaTrack</i> track, <i>Int</i> pitch, <i>Int</i> chan)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetTrackMIDINoteRange(ReaProject* proj, MediaTrack* track, int* note_loOut, int* note_hiOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetTrackMIDINoteRange(<i>ReaProject</i> proj, <i>MediaTrack</i> track, <i>int &amp;</i>note_lo, <i>int &amp;</i>note_hi)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number </i>note_lo, <i>number </i>note_hi = reaper.GetTrackMIDINoteRange(<i>ReaProject</i> proj, <i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>ReaProject</i> proj, <i>MediaTrack</i> track, <i>Int</i> note_loOut, <i>Int</i> note_hiOut) = RPR_GetTrackMIDINoteRange(proj, track, note_loOut, note_hiOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackNumMediaItems",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTrackName(MediaTrack* track, char* bufOut, int bufOut_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTrackName(<i>MediaTrack</i> track, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.GetTrackName(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>String</i> bufOut, <i>Int</i> bufOut_sz) = RPR_GetTrackName(track, bufOut, bufOut_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackNumSends",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetTrackNumMediaItems(MediaTrack* tr)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetTrackNumMediaItems(<i>MediaTrack</i> tr)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetTrackNumMediaItems(<i>MediaTrack</i> tr)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetTrackNumMediaItems(<i>MediaTrack</i> tr)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackReceiveName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GetTrackNumSends(MediaTrack* tr, int category)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GetTrackNumSends(<i>MediaTrack</i> tr, <i>int </i>category)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GetTrackNumSends(<i>MediaTrack</i> tr, <i>integer</i> category)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GetTrackNumSends(<i>MediaTrack</i> tr, <i>Int</i> category)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackReceiveUIMute",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTrackReceiveName(MediaTrack* track, int recv_index, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTrackReceiveName(<i>MediaTrack</i> track, <i>int </i>recv_index, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.GetTrackReceiveName(<i>MediaTrack</i> track, <i>integer</i> recv_index, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> recv_index, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_GetTrackReceiveName(track, recv_index, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackReceiveUIVolPan",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTrackReceiveUIMute(MediaTrack* track, int recv_index, bool* muteOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTrackReceiveUIMute(<i>MediaTrack</i> track, <i>int </i>recv_index, <i>bool &amp;</i>mute)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>boolean </i>mute = reaper.GetTrackReceiveUIMute(<i>MediaTrack</i> track, <i>integer</i> recv_index)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> recv_index, <i>Boolean</i> muteOut) = RPR_GetTrackReceiveUIMute(track, recv_index, muteOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackSendInfo_Value",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTrackReceiveUIVolPan(MediaTrack* track, int recv_index, double* volumeOut, double* panOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTrackReceiveUIVolPan(<i>MediaTrack</i> track, <i>int </i>recv_index, <i>&amp;</i>volume, <i>&amp;</i>pan)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>volume, <i>number </i>pan = reaper.GetTrackReceiveUIVolPan(<i>MediaTrack</i> track, <i>integer</i> recv_index)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> recv_index, <i>Float</i> volumeOut, <i>Float</i> panOut) = RPR_GetTrackReceiveUIVolPan(track, recv_index, volumeOut, panOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackSendName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double GetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> GetTrackSendInfo_Value(<i>MediaTrack</i> tr, <i>int </i>category, <i>int </i>sendidx, \"parmname\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.GetTrackSendInfo_Value(<i>MediaTrack</i> tr, <i>integer</i> category, <i>integer</i> sendidx, <i>string</i> parmname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_GetTrackSendInfo_Value(<i>MediaTrack</i> tr, <i>Int</i> category, <i>Int</i> sendidx, <i>String</i> parmname)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackSendUIMute",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTrackSendName(MediaTrack* track, int send_index, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTrackSendName(<i>MediaTrack</i> track, <i>int </i>send_index, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.GetTrackSendName(<i>MediaTrack</i> track, <i>integer</i> send_index, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> send_index, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_GetTrackSendName(track, send_index, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackSendUIVolPan",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTrackSendUIMute(MediaTrack* track, int send_index, bool* muteOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTrackSendUIMute(<i>MediaTrack</i> track, <i>int </i>send_index, <i>bool &amp;</i>mute)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>boolean </i>mute = reaper.GetTrackSendUIMute(<i>MediaTrack</i> track, <i>integer</i> send_index)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> send_index, <i>Boolean</i> muteOut) = RPR_GetTrackSendUIMute(track, send_index, muteOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTrackSendUIVolPan(MediaTrack* track, int send_index, double* volumeOut, double* panOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTrackSendUIVolPan(<i>MediaTrack</i> track, <i>int </i>send_index, <i>&amp;</i>volume, <i>&amp;</i>pan)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>volume, <i>number </i>pan = reaper.GetTrackSendUIVolPan(<i>MediaTrack</i> track, <i>integer</i> send_index)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> send_index, <i>Float</i> volumeOut, <i>Float</i> panOut) = RPR_GetTrackSendUIVolPan(track, send_index, volumeOut, panOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackStateChunk",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* GetTrackState(MediaTrack* track, int* flagsOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  GetTrackState(#retval, <i>MediaTrack</i> track, <i>int &amp;</i>flags)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> retval, <i>number </i>flags = reaper.GetTrackState(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> retval, <i>MediaTrack</i> track, <i>Int</i> flagsOut) = RPR_GetTrackState(track, flagsOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackUIMute",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTrackStateChunk(MediaTrack* track, char* strNeedBig, int strNeedBig_sz, bool isundoOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTrackStateChunk(<i>MediaTrack</i> track, #str, <i>bool </i>isundo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>str = reaper.GetTrackStateChunk(<i>MediaTrack</i> track, <i>string </i>str, <i>boolean</i> isundo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>String</i> strNeedBig, <i>Int</i> strNeedBig_sz, <i>Boolean</i> isundoOptional) = RPR_GetTrackStateChunk(track, strNeedBig, strNeedBig_sz, isundoOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackUIPan",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTrackUIMute(MediaTrack* track, bool* muteOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTrackUIMute(<i>MediaTrack</i> track, <i>bool &amp;</i>mute)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>boolean </i>mute = reaper.GetTrackUIMute(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Boolean</i> muteOut) = RPR_GetTrackUIMute(track, muteOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetTrackUIVolPan",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTrackUIPan(MediaTrack* track, double* pan1Out, double* pan2Out, int* panmodeOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTrackUIPan(<i>MediaTrack</i> track, <i>&amp;</i>pan1, <i>&amp;</i>pan2, <i>int &amp;</i>panmode)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>pan1, <i>number </i>pan2, <i>number </i>panmode = reaper.GetTrackUIPan(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Float</i> pan1Out, <i>Float</i> pan2Out, <i>Int</i> panmodeOut) = RPR_GetTrackUIPan(track, pan1Out, pan2Out, panmodeOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetUnderrunTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetTrackUIVolPan(MediaTrack* track, double* volumeOut, double* panOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetTrackUIVolPan(<i>MediaTrack</i> track, <i>&amp;</i>volume, <i>&amp;</i>pan)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>volume, <i>number </i>pan = reaper.GetTrackUIVolPan(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Float</i> volumeOut, <i>Float</i> panOut) = RPR_GetTrackUIVolPan(track, volumeOut, panOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetUserFileNameForRead",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GetUnderrunTime(unsigned int* audio_xrunOutOptional, unsigned int* media_xrunOutOptional, unsigned int* curtimeOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GetUnderrunTime(<i>optional unsigned int &amp;</i>audio_xrun, <i>optional unsigned int &amp;</i>media_xrun, <i>optional unsigned int &amp;</i>curtime)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>optional number </i>audio_xrun, <i>optional number </i>media_xrun, <i>optional number </i>curtime = reaper.GetUnderrunTime()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_GetUnderrunTime(<i>unsigned int</i> audio_xrunOutOptional, <i>unsigned int</i> media_xrunOutOptional, <i>unsigned int</i> curtimeOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GetUserInputs",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetUserFileNameForRead(char* filenameNeed4096, const char* title, const char* defext)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetUserFileNameForRead(#filenameNeed4096, \"title\", \"defext\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>filenameNeed4096 = reaper.GetUserFileNameForRead(<i>string </i>filenameNeed4096, <i>string</i> title, <i>string</i> defext)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>String</i> filenameNeed4096, <i>String</i> title, <i>String</i> defext) = RPR_GetUserFileNameForRead(filenameNeed4096, title, defext)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GoToMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool GetUserInputs(const char* title, int num_inputs, const char* captions_csv, char* retvals_csv, int retvals_csv_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> GetUserInputs(\"title\", <i>int </i>num_inputs, \"captions_csv\", #retvals_csv)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>retvals_csv = reaper.GetUserInputs(<i>string</i> title, <i>integer</i> num_inputs, <i>string</i> captions_csv, <i>string </i>retvals_csv)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>String</i> title, <i>Int</i> num_inputs, <i>String</i> captions_csv, <i>String</i> retvals_csv, <i>Int</i> retvals_csv_sz) = RPR_GetUserInputs(title, num_inputs, captions_csv, retvals_csv, retvals_csv_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GoToRegion",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GoToMarker(ReaProject* proj, int marker_index, bool use_timeline_order)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GoToMarker(<i>ReaProject</i> proj, <i>int </i>marker_index, <i>bool </i>use_timeline_order)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.GoToMarker(<i>ReaProject</i> proj, <i>integer</i> marker_index, <i>boolean</i> use_timeline_order)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_GoToMarker(<i>ReaProject</i> proj, <i>Int</i> marker_index, <i>Boolean</i> use_timeline_order)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GR_SelectColor",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void GoToRegion(ReaProject* proj, int region_index, bool use_timeline_order)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>GoToRegion(<i>ReaProject</i> proj, <i>int </i>region_index, <i>bool </i>use_timeline_order)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.GoToRegion(<i>ReaProject</i> proj, <i>integer</i> region_index, <i>boolean</i> use_timeline_order)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_GoToRegion(<i>ReaProject</i> proj, <i>Int</i> region_index, <i>Boolean</i> use_timeline_order)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "GSC_mainwnd",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GR_SelectColor(HWND hwnd, int* colorOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GR_SelectColor(<i>HWND</i> hwnd, <i>int &amp;</i>color)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>number </i>color = reaper.GR_SelectColor(<i>HWND</i> hwnd)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>HWND</i> hwnd, <i>Int</i> colorOut) = RPR_GR_SelectColor(hwnd, colorOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "guidToString",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int GSC_mainwnd(int t)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> GSC_mainwnd(<i>int </i>t)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.GSC_mainwnd(<i>integer</i> t)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_GSC_mainwnd(<i>Int</i> t)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "HasExtState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void guidToString(const GUID* g, char* destNeed64)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>guidToString(\"gGUID\", #destNeed64)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>destNeed64 = reaper.guidToString(<i>string</i> gGUID, <i>string </i>destNeed64)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>const GUID</i> g, <i>String</i> destNeed64) = RPR_guidToString(g, destNeed64)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "HasTrackMIDIPrograms",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool HasExtState(const char* section, const char* key)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> HasExtState(\"section\", \"key\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.HasExtState(<i>string</i> section, <i>string</i> key)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_HasExtState(<i>String</i> section, <i>String</i> key)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "HasTrackMIDIProgramsEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* HasTrackMIDIPrograms(int track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  HasTrackMIDIPrograms(#retval, <i>int </i>track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.HasTrackMIDIPrograms(<i>integer</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_HasTrackMIDIPrograms(<i>Int</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Help_Set",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* HasTrackMIDIProgramsEx(ReaProject* proj, MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  HasTrackMIDIProgramsEx(#retval, <i>ReaProject</i> proj, <i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.HasTrackMIDIProgramsEx(<i>ReaProject</i> proj, <i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_HasTrackMIDIProgramsEx(<i>ReaProject</i> proj, <i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "image_resolve_fn",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Help_Set(const char* helpstring, bool is_temporary_help)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Help_Set(\"helpstring\", <i>bool </i>is_temporary_help)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Help_Set(<i>string</i> helpstring, <i>boolean</i> is_temporary_help)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Help_Set(<i>String</i> helpstring, <i>Boolean</i> is_temporary_help)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "InsertAutomationItem",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void image_resolve_fn(const char* in, char* out, int out_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>image_resolve_fn(\"in\", #out)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>out = reaper.image_resolve_fn(<i>string</i> in, <i>string </i>out)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> in, <i>String</i> out, <i>Int</i> out_sz) = RPR_image_resolve_fn(in, out, out_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "InsertEnvelopePoint",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int InsertAutomationItem(TrackEnvelope* env, int pool_id, double position, double length)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> InsertAutomationItem(<i>TrackEnvelope</i> env, <i>int </i>pool_id, position, length)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.InsertAutomationItem(<i>TrackEnvelope</i> env, <i>integer</i> pool_id, <i>number</i> position, <i>number</i> length)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_InsertAutomationItem(<i>TrackEnvelope</i> env, <i>Int</i> pool_id, <i>Float</i> position, <i>Float</i> length)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "InsertEnvelopePointEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool InsertEnvelopePoint(TrackEnvelope* envelope, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> InsertEnvelopePoint(<i>TrackEnvelope</i> envelope, time, value, <i>int </i>shape, tension, <i>bool </i>selected, <i>optional bool</i> noSortIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.InsertEnvelopePoint(<i>TrackEnvelope</i> envelope, <i>number</i> time, <i>number</i> value, <i>integer</i> shape, <i>number</i> tension, <i>boolean</i> selected, <i>optional boolean</i> noSortIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>TrackEnvelope</i> envelope, <i>Float</i> time, <i>Float</i> value, <i>Int</i> shape, <i>Float</i> tension, <i>Boolean</i> selected, <i>Boolean</i> noSortInOptional) = RPR_InsertEnvelopePoint(envelope, time, value, shape, tension, selected, noSortInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "InsertMedia",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool InsertEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, double time, double value, int shape, double tension, bool selected, bool* noSortInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> InsertEnvelopePointEx(<i>TrackEnvelope</i> envelope, <i>int </i>autoitem_idx, time, value, <i>int </i>shape, tension, <i>bool </i>selected, <i>optional bool</i> noSortIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.InsertEnvelopePointEx(<i>TrackEnvelope</i> envelope, <i>integer</i> autoitem_idx, <i>number</i> time, <i>number</i> value, <i>integer</i> shape, <i>number</i> tension, <i>boolean</i> selected, <i>optional boolean</i> noSortIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>TrackEnvelope</i> envelope, <i>Int</i> autoitem_idx, <i>Float</i> time, <i>Float</i> value, <i>Int</i> shape, <i>Float</i> tension, <i>Boolean</i> selected, <i>Boolean</i> noSortInOptional) = RPR_InsertEnvelopePointEx(envelope, autoitem_idx, time, value, shape, tension, selected, noSortInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "InsertMediaSection",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int InsertMedia(const char* file, int mode)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> InsertMedia(\"file\", <i>int </i>mode)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.InsertMedia(<i>string</i> file, <i>integer</i> mode)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_InsertMedia(<i>String</i> file, <i>Int</i> mode)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "InsertTrackAtIndex",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int InsertMediaSection(const char* file, int mode, double startpct, double endpct, double pitchshift)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> InsertMediaSection(\"file\", <i>int </i>mode, startpct, endpct, pitchshift)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.InsertMediaSection(<i>string</i> file, <i>integer</i> mode, <i>number</i> startpct, <i>number</i> endpct, <i>number</i> pitchshift)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_InsertMediaSection(<i>String</i> file, <i>Int</i> mode, <i>Float</i> startpct, <i>Float</i> endpct, <i>Float</i> pitchshift)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "IsMediaExtension",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void InsertTrackAtIndex(int idx, bool wantDefaults)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>InsertTrackAtIndex(<i>int </i>idx, <i>bool </i>wantDefaults)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.InsertTrackAtIndex(<i>integer</i> idx, <i>boolean</i> wantDefaults)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_InsertTrackAtIndex(<i>Int</i> idx, <i>Boolean</i> wantDefaults)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "IsMediaItemSelected",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool IsMediaExtension(const char* ext, bool wantOthers)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> IsMediaExtension(\"ext\", <i>bool </i>wantOthers)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.IsMediaExtension(<i>string</i> ext, <i>boolean</i> wantOthers)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_IsMediaExtension(<i>String</i> ext, <i>Boolean</i> wantOthers)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "IsProjectDirty",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool IsMediaItemSelected(MediaItem* item)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> IsMediaItemSelected(<i>MediaItem</i> item)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.IsMediaItemSelected(<i>MediaItem</i> item)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_IsMediaItemSelected(<i>MediaItem</i> item)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "IsTrackSelected",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int IsProjectDirty(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> IsProjectDirty(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.IsProjectDirty(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_IsProjectDirty(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "IsTrackVisible",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool IsTrackSelected(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> IsTrackSelected(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.IsTrackSelected(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_IsTrackSelected(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "joystick_create",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool IsTrackVisible(MediaTrack* track, bool mixer)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> IsTrackVisible(<i>MediaTrack</i> track, <i>bool </i>mixer)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.IsTrackVisible(<i>MediaTrack</i> track, <i>boolean</i> mixer)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_IsTrackVisible(<i>MediaTrack</i> track, <i>Boolean</i> mixer)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "joystick_destroy",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>joystick_device* joystick_create(const GUID* guid)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>joystick_device</i>  joystick_create(\"guidGUID\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>joystick_device</i> reaper.joystick_create(<i>string</i> guidGUID)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>joystick_device</i>  RPR_joystick_create(<i>const GUID</i> guid)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "joystick_enum",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void joystick_destroy(joystick_device* device)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>joystick_destroy(<i>joystick_device</i> device)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.joystick_destroy(<i>joystick_device</i> device)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_joystick_destroy(<i>joystick_device</i> device)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "joystick_getaxis",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* joystick_enum(int index, const char** namestrOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  joystick_enum(#retval, <i>int </i>index, <i>optional </i>#namestr)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> retval, <i>optional </i><i>string </i>namestr = reaper.joystick_enum(<i>integer</i> index)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_joystick_enum(<i>Int</i> index, <i>String</i> namestrOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "joystick_getbuttonmask",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double joystick_getaxis(joystick_device* dev, int axis)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> joystick_getaxis(<i>joystick_device</i> dev, <i>int </i>axis)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.joystick_getaxis(<i>joystick_device</i> dev, <i>integer</i> axis)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_joystick_getaxis(<i>joystick_device</i> dev, <i>Int</i> axis)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "joystick_getinfo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>unsigned int joystick_getbuttonmask(joystick_device* dev)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>uint </i> joystick_getbuttonmask(<i>joystick_device</i> dev)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.joystick_getbuttonmask(<i>joystick_device</i> dev)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Unknown</i>  RPR_joystick_getbuttonmask(<i>joystick_device</i> dev)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "joystick_getpov",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int joystick_getinfo(joystick_device* dev, int* axesOutOptional, int* povsOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> joystick_getinfo(<i>joystick_device</i> dev, <i>optional int &amp;</i>axes, <i>optional int &amp;</i>povs)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>optional number </i>axes, <i>optional number </i>povs = reaper.joystick_getinfo(<i>joystick_device</i> dev)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>joystick_device</i> dev, <i>Int</i> axesOutOptional, <i>Int</i> povsOutOptional) = RPR_joystick_getinfo(dev, axesOutOptional, povsOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "joystick_update",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double joystick_getpov(joystick_device* dev, int pov)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> joystick_getpov(<i>joystick_device</i> dev, <i>int </i>pov)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.joystick_getpov(<i>joystick_device</i> dev, <i>integer</i> pov)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_joystick_getpov(<i>joystick_device</i> dev, <i>Int</i> pov)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "LICE_ClipLine",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool joystick_update(joystick_device* dev)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> joystick_update(<i>joystick_device</i> dev)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.joystick_update(<i>joystick_device</i> dev)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_joystick_update(<i>joystick_device</i> dev)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "LocalizeString",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool LICE_ClipLine(int* pX1Out, int* pY1Out, int* pX2Out, int* pY2Out, int xLo, int yLo, int xHi, int yHi)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> LICE_ClipLine(<i>int &amp;</i>pX1, <i>int &amp;</i>pY1, <i>int &amp;</i>pX2, <i>int &amp;</i>pY2, <i>int </i>xLo, <i>int </i>yLo, <i>int </i>xHi, <i>int </i>yHi)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>pX1, <i>number </i>pY1, <i>number </i>pX2, <i>number </i>pY2 = reaper.LICE_ClipLine(<i>number </i>pX1, <i>number </i>pY1, <i>number </i>pX2, <i>number </i>pY2, <i>integer</i> xLo, <i>integer</i> yLo, <i>integer</i> xHi, <i>integer</i> yHi)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>Int</i> pX1Out, <i>Int</i> pY1Out, <i>Int</i> pX2Out, <i>Int</i> pY2Out, <i>Int</i> xLo, <i>Int</i> yLo, <i>Int</i> xHi, <i>Int</i> yHi) = RPR_LICE_ClipLine(pX1Out, pY1Out, pX2Out, pY2Out, xLo, yLo, xHi, yHi)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Loop_OnArrow",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* LocalizeString(const char* src_string, const char* section, int flagsOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  LocalizeString(#retval, \"src_string\", \"section\", <i>int </i>flags)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.LocalizeString(<i>string</i> src_string, <i>string</i> section, <i>integer</i> flags)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_LocalizeString(<i>String</i> src_string, <i>String</i> section, <i>Int</i> flagsOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Main_OnCommand",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool Loop_OnArrow(ReaProject* project, int direction)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> Loop_OnArrow(<i>ReaProject</i> project, <i>int </i>direction)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.Loop_OnArrow(<i>ReaProject</i> project, <i>integer</i> direction)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_Loop_OnArrow(<i>ReaProject</i> project, <i>Int</i> direction)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Main_OnCommandEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Main_OnCommand(int command, int flag)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Main_OnCommand(<i>int </i>command, <i>int </i>flag)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Main_OnCommand(<i>integer</i> command, <i>integer</i> flag)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Main_OnCommand(<i>Int</i> command, <i>Int</i> flag)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Main_openProject",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Main_OnCommandEx(int command, int flag, ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Main_OnCommandEx(<i>int </i>command, <i>int </i>flag, <i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Main_OnCommandEx(<i>integer</i> command, <i>integer</i> flag, <i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Main_OnCommandEx(<i>Int</i> command, <i>Int</i> flag, <i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Main_SaveProject",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Main_openProject(const char* name)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Main_openProject(\"name\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Main_openProject(<i>string</i> name)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Main_openProject(<i>String</i> name)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Main_UpdateLoopInfo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Main_SaveProject(ReaProject* proj, bool forceSaveAsInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Main_SaveProject(<i>ReaProject</i> proj, <i>bool </i>forceSaveAsIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Main_SaveProject(<i>ReaProject</i> proj, <i>boolean</i> forceSaveAsIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Main_SaveProject(<i>ReaProject</i> proj, <i>Boolean</i> forceSaveAsInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MarkProjectDirty",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Main_UpdateLoopInfo(int ignoremask)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Main_UpdateLoopInfo(<i>int </i>ignoremask)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Main_UpdateLoopInfo(<i>integer</i> ignoremask)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Main_UpdateLoopInfo(<i>Int</i> ignoremask)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MarkTrackItemsDirty",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void MarkProjectDirty(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>MarkProjectDirty(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.MarkProjectDirty(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_MarkProjectDirty(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Master_GetPlayRate",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void MarkTrackItemsDirty(MediaTrack* track, MediaItem* item)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>MarkTrackItemsDirty(<i>MediaTrack</i> track, <i>MediaItem</i> item)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.MarkTrackItemsDirty(<i>MediaTrack</i> track, <i>MediaItem</i> item)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_MarkTrackItemsDirty(<i>MediaTrack</i> track, <i>MediaItem</i> item)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Master_GetPlayRateAtTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double Master_GetPlayRate(ReaProject* project)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> Master_GetPlayRate(<i>ReaProject</i> project)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.Master_GetPlayRate(<i>ReaProject</i> project)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_Master_GetPlayRate(<i>ReaProject</i> project)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Master_GetTempo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double Master_GetPlayRateAtTime(double time_s, ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> Master_GetPlayRateAtTime(time_s, <i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.Master_GetPlayRateAtTime(<i>number</i> time_s, <i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_Master_GetPlayRateAtTime(<i>Float</i> time_s, <i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Master_NormalizePlayRate",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double Master_GetTempo()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> Master_GetTempo()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.Master_GetTempo()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_Master_GetTempo()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Master_NormalizeTempo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double Master_NormalizePlayRate(double playrate, bool isnormalized)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> Master_NormalizePlayRate(playrate, <i>bool </i>isnormalized)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.Master_NormalizePlayRate(<i>number</i> playrate, <i>boolean</i> isnormalized)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_Master_NormalizePlayRate(<i>Float</i> playrate, <i>Boolean</i> isnormalized)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MB",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double Master_NormalizeTempo(double bpm, bool isnormalized)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> Master_NormalizeTempo(bpm, <i>bool </i>isnormalized)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.Master_NormalizeTempo(<i>number</i> bpm, <i>boolean</i> isnormalized)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_Master_NormalizeTempo(<i>Float</i> bpm, <i>Boolean</i> isnormalized)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MediaItemDescendsFromTrack",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int MB(const char* msg, const char* title, int type)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> MB(\"msg\", \"title\", <i>int </i>type)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.MB(<i>string</i> msg, <i>string</i> title, <i>integer</i> type)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_MB(<i>String</i> msg, <i>String</i> title, <i>Int</i> type)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_CountEvts",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int MediaItemDescendsFromTrack(MediaItem* item, MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> MediaItemDescendsFromTrack(<i>MediaItem</i> item, <i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.MediaItemDescendsFromTrack(<i>MediaItem</i> item, <i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_MediaItemDescendsFromTrack(<i>MediaItem</i> item, <i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_DeleteCC",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int MIDI_CountEvts(MediaItem_Take* take, int* notecntOut, int* ccevtcntOut, int* textsyxevtcntOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> MIDI_CountEvts(<i>MediaItem_Take</i> take, <i>int &amp;</i>notecnt, <i>int &amp;</i>ccevtcnt, <i>int &amp;</i>textsyxevtcnt)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>number </i>notecnt, <i>number </i>ccevtcnt, <i>number </i>textsyxevtcnt = reaper.MIDI_CountEvts(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> notecntOut, <i>Int</i> ccevtcntOut, <i>Int</i> textsyxevtcntOut) = RPR_MIDI_CountEvts(take, notecntOut, ccevtcntOut, textsyxevtcntOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_DeleteEvt",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_DeleteCC(MediaItem_Take* take, int ccidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_DeleteCC(<i>MediaItem_Take</i> take, <i>int </i>ccidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_DeleteCC(<i>MediaItem_Take</i> take, <i>integer</i> ccidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_DeleteCC(<i>MediaItem_Take</i> take, <i>Int</i> ccidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_DeleteNote",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_DeleteEvt(MediaItem_Take* take, int evtidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_DeleteEvt(<i>MediaItem_Take</i> take, <i>int </i>evtidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_DeleteEvt(<i>MediaItem_Take</i> take, <i>integer</i> evtidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_DeleteEvt(<i>MediaItem_Take</i> take, <i>Int</i> evtidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_DeleteTextSysexEvt",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_DeleteNote(MediaItem_Take* take, int noteidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_DeleteNote(<i>MediaItem_Take</i> take, <i>int </i>noteidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_DeleteNote(<i>MediaItem_Take</i> take, <i>integer</i> noteidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_DeleteNote(<i>MediaItem_Take</i> take, <i>Int</i> noteidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_DisableSort",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_DeleteTextSysexEvt(MediaItem_Take* take, int textsyxevtidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_DeleteTextSysexEvt(<i>MediaItem_Take</i> take, <i>int </i>textsyxevtidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_DeleteTextSysexEvt(<i>MediaItem_Take</i> take, <i>integer</i> textsyxevtidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_DeleteTextSysexEvt(<i>MediaItem_Take</i> take, <i>Int</i> textsyxevtidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_EnumSelCC",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void MIDI_DisableSort(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>MIDI_DisableSort(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.MIDI_DisableSort(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_MIDI_DisableSort(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_EnumSelEvts",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int MIDI_EnumSelCC(MediaItem_Take* take, int ccidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> MIDI_EnumSelCC(<i>MediaItem_Take</i> take, <i>int </i>ccidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.MIDI_EnumSelCC(<i>MediaItem_Take</i> take, <i>integer</i> ccidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_MIDI_EnumSelCC(<i>MediaItem_Take</i> take, <i>Int</i> ccidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_EnumSelNotes",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int MIDI_EnumSelEvts(MediaItem_Take* take, int evtidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> MIDI_EnumSelEvts(<i>MediaItem_Take</i> take, <i>int </i>evtidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.MIDI_EnumSelEvts(<i>MediaItem_Take</i> take, <i>integer</i> evtidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_MIDI_EnumSelEvts(<i>MediaItem_Take</i> take, <i>Int</i> evtidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_EnumSelTextSysexEvts",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int MIDI_EnumSelNotes(MediaItem_Take* take, int noteidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> MIDI_EnumSelNotes(<i>MediaItem_Take</i> take, <i>int </i>noteidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.MIDI_EnumSelNotes(<i>MediaItem_Take</i> take, <i>integer</i> noteidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_MIDI_EnumSelNotes(<i>MediaItem_Take</i> take, <i>Int</i> noteidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetAllEvts",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int MIDI_EnumSelTextSysexEvts(MediaItem_Take* take, int textsyxidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> MIDI_EnumSelTextSysexEvts(<i>MediaItem_Take</i> take, <i>int </i>textsyxidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.MIDI_EnumSelTextSysexEvts(<i>MediaItem_Take</i> take, <i>integer</i> textsyxidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_MIDI_EnumSelTextSysexEvts(<i>MediaItem_Take</i> take, <i>Int</i> textsyxidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetCC",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_GetAllEvts(MediaItem_Take* take, char* bufNeedBig, int* bufNeedBig_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_GetAllEvts(<i>MediaItem_Take</i> take, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.MIDI_GetAllEvts(<i>MediaItem_Take</i> take, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>String</i> bufNeedBig, <i>Int</i> bufNeedBig_sz) = RPR_MIDI_GetAllEvts(take, bufNeedBig, bufNeedBig_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetCCShape",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_GetCC(MediaItem_Take* take, int ccidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, int* chanmsgOut, int* chanOut, int* msg2Out, int* msg3Out)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_GetCC(<i>MediaItem_Take</i> take, <i>int </i>ccidx, <i>bool &amp;</i>selected, <i>bool &amp;</i>muted, <i>&amp;</i>ppqpos, <i>int &amp;</i>chanmsg, <i>int &amp;</i>chan, <i>int &amp;</i>msg2, <i>int &amp;</i>msg3)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>boolean </i>selected, <i>boolean </i>muted, <i>number </i>ppqpos, <i>number </i>chanmsg, <i>number </i>chan, <i>number </i>msg2, <i>number </i>msg3 = reaper.MIDI_GetCC(<i>MediaItem_Take</i> take, <i>integer</i> ccidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> ccidx, <i>Boolean</i> selectedOut, <i>Boolean</i> mutedOut, <i>Float</i> ppqposOut, <i>Int</i> chanmsgOut, <i>Int</i> chanOut, <i>Int</i> msg2Out, <i>Int</i> msg3Out) = RPR_MIDI_GetCC(take, ccidx, selectedOut, mutedOut, ppqposOut, chanmsgOut, chanOut, msg2Out, msg3Out)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetEvt",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_GetCCShape(MediaItem_Take* take, int ccidx, int* shapeOut, double* beztensionOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_GetCCShape(<i>MediaItem_Take</i> take, <i>int </i>ccidx, <i>int &amp;</i>shape, <i>&amp;</i>beztension)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>shape, <i>number </i>beztension = reaper.MIDI_GetCCShape(<i>MediaItem_Take</i> take, <i>integer</i> ccidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> ccidx, <i>Int</i> shapeOut, <i>Float</i> beztensionOut) = RPR_MIDI_GetCCShape(take, ccidx, shapeOut, beztensionOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetGrid",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_GetEvt(MediaItem_Take* take, int evtidx, bool* selectedOut, bool* mutedOut, double* ppqposOut, char* msg, int* msg_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_GetEvt(<i>MediaItem_Take</i> take, <i>int </i>evtidx, <i>bool &amp;</i>selected, <i>bool &amp;</i>muted, <i>&amp;</i>ppqpos, #msg)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>boolean </i>selected, <i>boolean </i>muted, <i>number </i>ppqpos, <i>string </i>msg = reaper.MIDI_GetEvt(<i>MediaItem_Take</i> take, <i>integer</i> evtidx, <i>boolean </i>selected, <i>boolean </i>muted, <i>number </i>ppqpos, <i>string </i>msg)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> evtidx, <i>Boolean</i> selectedOut, <i>Boolean</i> mutedOut, <i>Float</i> ppqposOut, <i>String</i> msg, <i>Int</i> msg_sz) = RPR_MIDI_GetEvt(take, evtidx, selectedOut, mutedOut, ppqposOut, msg, msg_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetHash",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double MIDI_GetGrid(MediaItem_Take* take, double* swingOutOptional, double* noteLenOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> MIDI_GetGrid(<i>MediaItem_Take</i> take, <i>optional &amp;</i>swing, <i>optional &amp;</i>noteLen)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> retval, <i>optional number </i>swing, <i>optional number </i>noteLen = reaper.MIDI_GetGrid(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> retval, <i>MediaItem_Take</i> take, <i>Float</i> swingOutOptional, <i>Float</i> noteLenOutOptional) = RPR_MIDI_GetGrid(take, swingOutOptional, noteLenOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetNote",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_GetHash(MediaItem_Take* take, bool notesonly, char* hash, int hash_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_GetHash(<i>MediaItem_Take</i> take, <i>bool </i>notesonly, #hash)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>hash = reaper.MIDI_GetHash(<i>MediaItem_Take</i> take, <i>boolean</i> notesonly, <i>string </i>hash)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Boolean</i> notesonly, <i>String</i> hash, <i>Int</i> hash_sz) = RPR_MIDI_GetHash(take, notesonly, hash, hash_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetPPQPos_EndOfMeasure",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_GetNote(MediaItem_Take* take, int noteidx, bool* selectedOut, bool* mutedOut, double* startppqposOut, double* endppqposOut, int* chanOut, int* pitchOut, int* velOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_GetNote(<i>MediaItem_Take</i> take, <i>int </i>noteidx, <i>bool &amp;</i>selected, <i>bool &amp;</i>muted, <i>&amp;</i>startppqpos, <i>&amp;</i>endppqpos, <i>int &amp;</i>chan, <i>int &amp;</i>pitch, <i>int &amp;</i>vel)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>boolean </i>selected, <i>boolean </i>muted, <i>number </i>startppqpos, <i>number </i>endppqpos, <i>number </i>chan, <i>number </i>pitch, <i>number </i>vel = reaper.MIDI_GetNote(<i>MediaItem_Take</i> take, <i>integer</i> noteidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> noteidx, <i>Boolean</i> selectedOut, <i>Boolean</i> mutedOut, <i>Float</i> startppqposOut, <i>Float</i> endppqposOut, <i>Int</i> chanOut, <i>Int</i> pitchOut, <i>Int</i> velOut) = RPR_MIDI_GetNote(take, noteidx, selectedOut, mutedOut, startppqposOut, endppqposOut, chanOut, pitchOut, velOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetPPQPos_StartOfMeasure",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double MIDI_GetPPQPos_EndOfMeasure(MediaItem_Take* take, double ppqpos)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> MIDI_GetPPQPos_EndOfMeasure(<i>MediaItem_Take</i> take, ppqpos)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.MIDI_GetPPQPos_EndOfMeasure(<i>MediaItem_Take</i> take, <i>number</i> ppqpos)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_MIDI_GetPPQPos_EndOfMeasure(<i>MediaItem_Take</i> take, <i>Float</i> ppqpos)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetPPQPosFromProjQN",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double MIDI_GetPPQPos_StartOfMeasure(MediaItem_Take* take, double ppqpos)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> MIDI_GetPPQPos_StartOfMeasure(<i>MediaItem_Take</i> take, ppqpos)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.MIDI_GetPPQPos_StartOfMeasure(<i>MediaItem_Take</i> take, <i>number</i> ppqpos)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_MIDI_GetPPQPos_StartOfMeasure(<i>MediaItem_Take</i> take, <i>Float</i> ppqpos)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetPPQPosFromProjTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double MIDI_GetPPQPosFromProjQN(MediaItem_Take* take, double projqn)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> MIDI_GetPPQPosFromProjQN(<i>MediaItem_Take</i> take, projqn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.MIDI_GetPPQPosFromProjQN(<i>MediaItem_Take</i> take, <i>number</i> projqn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_MIDI_GetPPQPosFromProjQN(<i>MediaItem_Take</i> take, <i>Float</i> projqn)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetProjQNFromPPQPos",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double MIDI_GetPPQPosFromProjTime(MediaItem_Take* take, double projtime)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> MIDI_GetPPQPosFromProjTime(<i>MediaItem_Take</i> take, projtime)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.MIDI_GetPPQPosFromProjTime(<i>MediaItem_Take</i> take, <i>number</i> projtime)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_MIDI_GetPPQPosFromProjTime(<i>MediaItem_Take</i> take, <i>Float</i> projtime)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetProjTimeFromPPQPos",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double MIDI_GetProjQNFromPPQPos(MediaItem_Take* take, double ppqpos)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> MIDI_GetProjQNFromPPQPos(<i>MediaItem_Take</i> take, ppqpos)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.MIDI_GetProjQNFromPPQPos(<i>MediaItem_Take</i> take, <i>number</i> ppqpos)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_MIDI_GetProjQNFromPPQPos(<i>MediaItem_Take</i> take, <i>Float</i> ppqpos)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetScale",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double MIDI_GetProjTimeFromPPQPos(MediaItem_Take* take, double ppqpos)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> MIDI_GetProjTimeFromPPQPos(<i>MediaItem_Take</i> take, ppqpos)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.MIDI_GetProjTimeFromPPQPos(<i>MediaItem_Take</i> take, <i>number</i> ppqpos)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_MIDI_GetProjTimeFromPPQPos(<i>MediaItem_Take</i> take, <i>Float</i> ppqpos)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetTextSysexEvt",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_GetScale(MediaItem_Take* take, int* rootOut, int* scaleOut, char* name, int name_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_GetScale(<i>MediaItem_Take</i> take, <i>int &amp;</i>root, <i>int &amp;</i>scale, #name)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>root, <i>number </i>scale, <i>string </i>name = reaper.MIDI_GetScale(<i>MediaItem_Take</i> take, <i>number </i>root, <i>number </i>scale, <i>string </i>name)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> rootOut, <i>Int</i> scaleOut, <i>String</i> name, <i>Int</i> name_sz) = RPR_MIDI_GetScale(take, rootOut, scaleOut, name, name_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_GetTrackHash",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_GetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, bool* selectedOutOptional, bool* mutedOutOptional, double* ppqposOutOptional, int* typeOutOptional, char* msgOptional, int* msgOptional_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_GetTextSysexEvt(<i>MediaItem_Take</i> take, <i>int </i>textsyxevtidx, <i>optional bool &amp;</i>selected, <i>optional bool &amp;</i>muted, <i>optional &amp;</i>ppqpos, <i>optional int &amp;</i>type, <i>optional </i>#msg)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>optional boolean </i>selected, <i>optional boolean </i>muted, <i>optional number </i>ppqpos, <i>optional number </i>type, <i>optional </i><i>string </i>msg = reaper.MIDI_GetTextSysexEvt(<i>MediaItem_Take</i> take, <i>integer</i> textsyxevtidx, <i>optional boolean </i>selected, <i>optional boolean </i>muted, <i>optional number </i>ppqpos, <i>optional number </i>type, <i>optional </i><i>string </i>msg)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> textsyxevtidx, <i>Boolean</i> selectedOutOptional, <i>Boolean</i> mutedOutOptional, <i>Float</i> ppqposOutOptional, <i>Int</i> typeOutOptional, <i>String</i> msgOptional, <i>Int</i> msgOptional_sz) = RPR_MIDI_GetTextSysexEvt(take, textsyxevtidx, selectedOutOptional, mutedOutOptional, ppqposOutOptional, typeOutOptional, msgOptional, msgOptional_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_InsertCC",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_GetTrackHash(MediaTrack* track, bool notesonly, char* hash, int hash_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_GetTrackHash(<i>MediaTrack</i> track, <i>bool </i>notesonly, #hash)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>hash = reaper.MIDI_GetTrackHash(<i>MediaTrack</i> track, <i>boolean</i> notesonly, <i>string </i>hash)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Boolean</i> notesonly, <i>String</i> hash, <i>Int</i> hash_sz) = RPR_MIDI_GetTrackHash(track, notesonly, hash, hash_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_InsertEvt",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_InsertCC(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int chanmsg, int chan, int msg2, int msg3)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_InsertCC(<i>MediaItem_Take</i> take, <i>bool </i>selected, <i>bool </i>muted, ppqpos, <i>int </i>chanmsg, <i>int </i>chan, <i>int </i>msg2, <i>int </i>msg3)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_InsertCC(<i>MediaItem_Take</i> take, <i>boolean</i> selected, <i>boolean</i> muted, <i>number</i> ppqpos, <i>integer</i> chanmsg, <i>integer</i> chan, <i>integer</i> msg2, <i>integer</i> msg3)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_InsertCC(<i>MediaItem_Take</i> take, <i>Boolean</i> selected, <i>Boolean</i> muted, <i>Float</i> ppqpos, <i>Int</i> chanmsg, <i>Int</i> chan, <i>Int</i> msg2, <i>Int</i> msg3)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_InsertNote",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_InsertEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, const char* bytestr, int bytestr_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_InsertEvt(<i>MediaItem_Take</i> take, <i>bool </i>selected, <i>bool </i>muted, ppqpos, \"bytestr\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_InsertEvt(<i>MediaItem_Take</i> take, <i>boolean</i> selected, <i>boolean</i> muted, <i>number</i> ppqpos, <i>string</i> bytestr)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_InsertEvt(<i>MediaItem_Take</i> take, <i>Boolean</i> selected, <i>Boolean</i> muted, <i>Float</i> ppqpos, <i>String</i> bytestr, <i>Int</i> bytestr_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_InsertTextSysexEvt",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_InsertNote(MediaItem_Take* take, bool selected, bool muted, double startppqpos, double endppqpos, int chan, int pitch, int vel, const bool* noSortInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_InsertNote(<i>MediaItem_Take</i> take, <i>bool </i>selected, <i>bool </i>muted, startppqpos, endppqpos, <i>int </i>chan, <i>int </i>pitch, <i>int </i>vel, <i>optional bool</i> noSortIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_InsertNote(<i>MediaItem_Take</i> take, <i>boolean</i> selected, <i>boolean</i> muted, <i>number</i> startppqpos, <i>number</i> endppqpos, <i>integer</i> chan, <i>integer</i> pitch, <i>integer</i> vel, <i>optional boolean</i> noSortIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_InsertNote(<i>MediaItem_Take</i> take, <i>Boolean</i> selected, <i>Boolean</i> muted, <i>Float</i> startppqpos, <i>Float</i> endppqpos, <i>Int</i> chan, <i>Int</i> pitch, <i>Int</i> vel, <i>const bool</i> noSortInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "midi_reinit",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_InsertTextSysexEvt(MediaItem_Take* take, bool selected, bool muted, double ppqpos, int type, const char* bytestr, int bytestr_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_InsertTextSysexEvt(<i>MediaItem_Take</i> take, <i>bool </i>selected, <i>bool </i>muted, ppqpos, <i>int </i>type, \"bytestr\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_InsertTextSysexEvt(<i>MediaItem_Take</i> take, <i>boolean</i> selected, <i>boolean</i> muted, <i>number</i> ppqpos, <i>integer</i> type, <i>string</i> bytestr)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_InsertTextSysexEvt(<i>MediaItem_Take</i> take, <i>Boolean</i> selected, <i>Boolean</i> muted, <i>Float</i> ppqpos, <i>Int</i> type, <i>String</i> bytestr, <i>Int</i> bytestr_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_SelectAll",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void midi_reinit()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>midi_reinit()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.midi_reinit()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_midi_reinit()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_SetAllEvts",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void MIDI_SelectAll(MediaItem_Take* take, bool select)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>MIDI_SelectAll(<i>MediaItem_Take</i> take, <i>bool </i>select)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.MIDI_SelectAll(<i>MediaItem_Take</i> take, <i>boolean</i> select)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_MIDI_SelectAll(<i>MediaItem_Take</i> take, <i>Boolean</i> select)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_SetCC",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_SetAllEvts(MediaItem_Take* take, const char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_SetAllEvts(<i>MediaItem_Take</i> take, \"buf\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_SetAllEvts(<i>MediaItem_Take</i> take, <i>string</i> buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_SetAllEvts(<i>MediaItem_Take</i> take, <i>String</i> buf, <i>Int</i> buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_SetCCShape",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_SetCC(MediaItem_Take* take, int ccidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* chanmsgInOptional, const int* chanInOptional, const int* msg2InOptional, const int* msg3InOptional, const bool* noSortInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_SetCC(<i>MediaItem_Take</i> take, <i>int </i>ccidx, <i>optional bool</i> selectedIn, <i>optional bool</i> mutedIn, <i>optional </i>ppqposIn, <i>optional int</i> chanmsgIn, <i>optional int</i> chanIn, <i>optional int</i> msg2In, <i>optional int</i> msg3In, <i>optional bool</i> noSortIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_SetCC(<i>MediaItem_Take</i> take, <i>integer</i> ccidx, <i>optional boolean</i> selectedIn, <i>optional boolean</i> mutedIn, <i>optional number </i>ppqposIn, <i>optional number</i> chanmsgIn, <i>optional number</i> chanIn, <i>optional number</i> msg2In, <i>optional number</i> msg3In, <i>optional boolean</i> noSortIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_SetCC(<i>MediaItem_Take</i> take, <i>Int</i> ccidx, <i>const bool</i> selectedInOptional, <i>const bool</i> mutedInOptional, <i>const double</i> ppqposInOptional, <i>const int</i> chanmsgInOptional, <i>const int</i> chanInOptional, <i>const int</i> msg2InOptional, <i>const int</i> msg3InOptional, <i>const bool</i> noSortInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_SetEvt",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_SetCCShape(MediaItem_Take* take, int ccidx, int shape, double beztension, const bool* noSortInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_SetCCShape(<i>MediaItem_Take</i> take, <i>int </i>ccidx, <i>int </i>shape, beztension, <i>optional bool</i> noSortIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_SetCCShape(<i>MediaItem_Take</i> take, <i>integer</i> ccidx, <i>integer</i> shape, <i>number</i> beztension, <i>optional boolean</i> noSortIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_SetCCShape(<i>MediaItem_Take</i> take, <i>Int</i> ccidx, <i>Int</i> shape, <i>Float</i> beztension, <i>const bool</i> noSortInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_SetItemExtents",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_SetEvt(MediaItem_Take* take, int evtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_SetEvt(<i>MediaItem_Take</i> take, <i>int </i>evtidx, <i>optional bool</i> selectedIn, <i>optional bool</i> mutedIn, <i>optional </i>ppqposIn, <i>optional </i>\"msg\", <i>optional bool</i> noSortIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_SetEvt(<i>MediaItem_Take</i> take, <i>integer</i> evtidx, <i>optional boolean</i> selectedIn, <i>optional boolean</i> mutedIn, <i>optional number </i>ppqposIn, <i>optional </i><i>string</i> msg, <i>optional boolean</i> noSortIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_SetEvt(<i>MediaItem_Take</i> take, <i>Int</i> evtidx, <i>const bool</i> selectedInOptional, <i>const bool</i> mutedInOptional, <i>const double</i> ppqposInOptional, <i>String</i> msgOptional, <i>Int</i> msgOptional_sz, <i>const bool</i> noSortInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_SetNote",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_SetItemExtents(MediaItem* item, double startQN, double endQN)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_SetItemExtents(<i>MediaItem</i> item, startQN, endQN)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_SetItemExtents(<i>MediaItem</i> item, <i>number</i> startQN, <i>number</i> endQN)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_SetItemExtents(<i>MediaItem</i> item, <i>Float</i> startQN, <i>Float</i> endQN)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_SetTextSysexEvt",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_SetNote(MediaItem_Take* take, int noteidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* startppqposInOptional, const double* endppqposInOptional, const int* chanInOptional, const int* pitchInOptional, const int* velInOptional, const bool* noSortInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_SetNote(<i>MediaItem_Take</i> take, <i>int </i>noteidx, <i>optional bool</i> selectedIn, <i>optional bool</i> mutedIn, <i>optional </i>startppqposIn, <i>optional </i>endppqposIn, <i>optional int</i> chanIn, <i>optional int</i> pitchIn, <i>optional int</i> velIn, <i>optional bool</i> noSortIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_SetNote(<i>MediaItem_Take</i> take, <i>integer</i> noteidx, <i>optional boolean</i> selectedIn, <i>optional boolean</i> mutedIn, <i>optional number </i>startppqposIn, <i>optional number </i>endppqposIn, <i>optional number</i> chanIn, <i>optional number</i> pitchIn, <i>optional number</i> velIn, <i>optional boolean</i> noSortIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_SetNote(<i>MediaItem_Take</i> take, <i>Int</i> noteidx, <i>const bool</i> selectedInOptional, <i>const bool</i> mutedInOptional, <i>const double</i> startppqposInOptional, <i>const double</i> endppqposInOptional, <i>const int</i> chanInOptional, <i>const int</i> pitchInOptional, <i>const int</i> velInOptional, <i>const bool</i> noSortInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDI_Sort",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDI_SetTextSysexEvt(MediaItem_Take* take, int textsyxevtidx, const bool* selectedInOptional, const bool* mutedInOptional, const double* ppqposInOptional, const int* typeInOptional, const char* msgOptional, int msgOptional_sz, const bool* noSortInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDI_SetTextSysexEvt(<i>MediaItem_Take</i> take, <i>int </i>textsyxevtidx, <i>optional bool</i> selectedIn, <i>optional bool</i> mutedIn, <i>optional </i>ppqposIn, <i>optional int</i> typeIn, <i>optional </i>\"msg\", <i>optional bool</i> noSortIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDI_SetTextSysexEvt(<i>MediaItem_Take</i> take, <i>integer</i> textsyxevtidx, <i>optional boolean</i> selectedIn, <i>optional boolean</i> mutedIn, <i>optional number </i>ppqposIn, <i>optional number</i> typeIn, <i>optional </i><i>string</i> msg, <i>optional boolean</i> noSortIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDI_SetTextSysexEvt(<i>MediaItem_Take</i> take, <i>Int</i> textsyxevtidx, <i>const bool</i> selectedInOptional, <i>const bool</i> mutedInOptional, <i>const double</i> ppqposInOptional, <i>const int</i> typeInOptional, <i>String</i> msgOptional, <i>Int</i> msgOptional_sz, <i>const bool</i> noSortInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDIEditor_GetActive",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void MIDI_Sort(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>MIDI_Sort(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.MIDI_Sort(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_MIDI_Sort(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDIEditor_GetMode",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>HWND MIDIEditor_GetActive()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>HWND</i>  MIDIEditor_GetActive()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>HWND</i> reaper.MIDIEditor_GetActive()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>HWND</i>  RPR_MIDIEditor_GetActive()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDIEditor_GetSetting_int",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int MIDIEditor_GetMode(HWND midieditor)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> MIDIEditor_GetMode(<i>HWND</i> midieditor)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.MIDIEditor_GetMode(<i>HWND</i> midieditor)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_MIDIEditor_GetMode(<i>HWND</i> midieditor)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDIEditor_GetSetting_str",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int MIDIEditor_GetSetting_int(HWND midieditor, const char* setting_desc)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> MIDIEditor_GetSetting_int(<i>HWND</i> midieditor, \"setting_desc\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.MIDIEditor_GetSetting_int(<i>HWND</i> midieditor, <i>string</i> setting_desc)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_MIDIEditor_GetSetting_int(<i>HWND</i> midieditor, <i>String</i> setting_desc)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDIEditor_GetTake",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDIEditor_GetSetting_str(HWND midieditor, const char* setting_desc, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDIEditor_GetSetting_str(<i>HWND</i> midieditor, \"setting_desc\", #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.MIDIEditor_GetSetting_str(<i>HWND</i> midieditor, <i>string</i> setting_desc, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>HWND</i> midieditor, <i>String</i> setting_desc, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_MIDIEditor_GetSetting_str(midieditor, setting_desc, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDIEditor_LastFocused_OnCommand",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem_Take* MIDIEditor_GetTake(HWND midieditor)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem_Take</i>  MIDIEditor_GetTake(<i>HWND</i> midieditor)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem_Take</i> reaper.MIDIEditor_GetTake(<i>HWND</i> midieditor)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem_Take</i>  RPR_MIDIEditor_GetTake(<i>HWND</i> midieditor)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDIEditor_OnCommand",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDIEditor_LastFocused_OnCommand(int command_id, bool islistviewcommand)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDIEditor_LastFocused_OnCommand(<i>int </i>command_id, <i>bool </i>islistviewcommand)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDIEditor_LastFocused_OnCommand(<i>integer</i> command_id, <i>boolean</i> islistviewcommand)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDIEditor_LastFocused_OnCommand(<i>Int</i> command_id, <i>Boolean</i> islistviewcommand)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MIDIEditor_SetSetting_int",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDIEditor_OnCommand(HWND midieditor, int command_id)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDIEditor_OnCommand(<i>HWND</i> midieditor, <i>int </i>command_id)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDIEditor_OnCommand(<i>HWND</i> midieditor, <i>integer</i> command_id)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDIEditor_OnCommand(<i>HWND</i> midieditor, <i>Int</i> command_id)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "mkpanstr",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MIDIEditor_SetSetting_int(HWND midieditor, const char* setting_desc, int setting)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MIDIEditor_SetSetting_int(<i>HWND</i> midieditor, \"setting_desc\", <i>int </i>setting)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MIDIEditor_SetSetting_int(<i>HWND</i> midieditor, <i>string</i> setting_desc, <i>integer</i> setting)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MIDIEditor_SetSetting_int(<i>HWND</i> midieditor, <i>String</i> setting_desc, <i>Int</i> setting)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "mkvolpanstr",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void mkpanstr(char* strNeed64, double pan)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>mkpanstr(#strNeed64, pan)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>strNeed64 = reaper.mkpanstr(<i>string </i>strNeed64, <i>number</i> pan)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> strNeed64, <i>Float</i> pan) = RPR_mkpanstr(strNeed64, pan)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "mkvolstr",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void mkvolpanstr(char* strNeed64, double vol, double pan)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>mkvolpanstr(#strNeed64, vol, pan)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>strNeed64 = reaper.mkvolpanstr(<i>string </i>strNeed64, <i>number</i> vol, <i>number</i> pan)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> strNeed64, <i>Float</i> vol, <i>Float</i> pan) = RPR_mkvolpanstr(strNeed64, vol, pan)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MoveEditCursor",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void mkvolstr(char* strNeed64, double vol)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>mkvolstr(#strNeed64, vol)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>strNeed64 = reaper.mkvolstr(<i>string </i>strNeed64, <i>number</i> vol)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> strNeed64, <i>Float</i> vol) = RPR_mkvolstr(strNeed64, vol)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MoveMediaItemToTrack",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void MoveEditCursor(double adjamt, bool dosel)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>MoveEditCursor(adjamt, <i>bool </i>dosel)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.MoveEditCursor(<i>number</i> adjamt, <i>boolean</i> dosel)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_MoveEditCursor(<i>Float</i> adjamt, <i>Boolean</i> dosel)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "MuteAllTracks",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool MoveMediaItemToTrack(MediaItem* item, MediaTrack* desttr)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> MoveMediaItemToTrack(<i>MediaItem</i> item, <i>MediaTrack</i> desttr)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.MoveMediaItemToTrack(<i>MediaItem</i> item, <i>MediaTrack</i> desttr)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_MoveMediaItemToTrack(<i>MediaItem</i> item, <i>MediaTrack</i> desttr)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "my_getViewport",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void MuteAllTracks(bool mute)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>MuteAllTracks(<i>bool </i>mute)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.MuteAllTracks(<i>boolean</i> mute)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_MuteAllTracks(<i>Boolean</i> mute)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "NamedCommandLookup",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void my_getViewport(RECT* r, const RECT* sr, bool wantWorkArea)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>my_getViewport(<i>int &</i>r.left, <i>int &</i>r.top, <i>int &</i>r.right, <i>int &</i>r.bot, <i>int</i> sr.left, <i>int</i> sr.top, <i>int</i> sr.right, <i>int</i> sr.bot, <i>bool </i>wantWorkArea)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.my_getViewport(<i>number</i>r.left, <i>number</i>r.top, <i>number</i>r.right, <i>number</i>r.bot, <i>number</i> sr.left, <i>number</i> sr.top, <i>number</i> sr.right, <i>number</i> sr.bot, <i>boolean</i> wantWorkArea)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_my_getViewport(<i>RECT</i> r, <i>const RECT</i> sr, <i>Boolean</i> wantWorkArea)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "OnPauseButton",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int NamedCommandLookup(const char* command_name)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> NamedCommandLookup(\"command_name\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.NamedCommandLookup(<i>string</i> command_name)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_NamedCommandLookup(<i>String</i> command_name)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "OnPauseButtonEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void OnPauseButton()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>OnPauseButton()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.OnPauseButton()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_OnPauseButton()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "OnPlayButton",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void OnPauseButtonEx(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>OnPauseButtonEx(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.OnPauseButtonEx(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_OnPauseButtonEx(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "OnPlayButtonEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void OnPlayButton()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>OnPlayButton()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.OnPlayButton()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_OnPlayButton()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "OnStopButton",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void OnPlayButtonEx(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>OnPlayButtonEx(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.OnPlayButtonEx(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_OnPlayButtonEx(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "OnStopButtonEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void OnStopButton()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>OnStopButton()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.OnStopButton()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_OnStopButton()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "OpenColorThemeFile",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void OnStopButtonEx(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>OnStopButtonEx(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.OnStopButtonEx(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_OnStopButtonEx(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "OpenMediaExplorer",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool OpenColorThemeFile(const char* fn)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> OpenColorThemeFile(\"fn\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.OpenColorThemeFile(<i>string</i> fn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_OpenColorThemeFile(<i>String</i> fn)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "OscLocalMessageToHost",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>HWND OpenMediaExplorer(const char* mediafn, bool play)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>HWND</i>  OpenMediaExplorer(\"mediafn\", <i>bool </i>play)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>HWND</i> reaper.OpenMediaExplorer(<i>string</i> mediafn, <i>boolean</i> play)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>HWND</i>  RPR_OpenMediaExplorer(<i>String</i> mediafn, <i>Boolean</i> play)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "parse_timestr",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void OscLocalMessageToHost(const char* message, const double* valueInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>OscLocalMessageToHost(\"message\", <i>optional </i>valueIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.OscLocalMessageToHost(<i>string</i> message, <i>optional number </i>valueIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_OscLocalMessageToHost(<i>String</i> message, <i>const double</i> valueInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "parse_timestr_len",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double parse_timestr(const char* buf)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> parse_timestr(\"buf\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.parse_timestr(<i>string</i> buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_parse_timestr(<i>String</i> buf)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "parse_timestr_pos",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double parse_timestr_len(const char* buf, double offset, int modeoverride)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> parse_timestr_len(\"buf\", offset, <i>int </i>modeoverride)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.parse_timestr_len(<i>string</i> buf, <i>number</i> offset, <i>integer</i> modeoverride)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_parse_timestr_len(<i>String</i> buf, <i>Float</i> offset, <i>Int</i> modeoverride)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "parsepanstr",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double parse_timestr_pos(const char* buf, int modeoverride)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> parse_timestr_pos(\"buf\", <i>int </i>modeoverride)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.parse_timestr_pos(<i>string</i> buf, <i>integer</i> modeoverride)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_parse_timestr_pos(<i>String</i> buf, <i>Int</i> modeoverride)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "PCM_Sink_Enum",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double parsepanstr(const char* str)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> parsepanstr(\"str\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.parsepanstr(<i>string</i> str)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_parsepanstr(<i>String</i> str)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "PCM_Sink_GetExtension",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>unsigned int PCM_Sink_Enum(int idx, const char** descstrOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>uint </i> PCM_Sink_Enum(<i>int </i>idx, #descstr)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>string </i>descstr = reaper.PCM_Sink_Enum(<i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Unknown</i>  RPR_PCM_Sink_Enum(<i>Int</i> idx, <i>String</i> descstrOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "PCM_Sink_ShowConfig",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* PCM_Sink_GetExtension(const char* data, int data_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  PCM_Sink_GetExtension(#retval, \"data\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.PCM_Sink_GetExtension(<i>string</i> data)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_PCM_Sink_GetExtension(<i>String</i> data, <i>Int</i> data_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "PCM_Source_CreateFromFile",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>HWND PCM_Sink_ShowConfig(const char* cfg, int cfg_sz, HWND hwndParent)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>HWND</i>  PCM_Sink_ShowConfig(\"cfg\", <i>HWND</i> hwndParent)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>HWND</i> reaper.PCM_Sink_ShowConfig(<i>string</i> cfg, <i>HWND</i> hwndParent)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>HWND</i>  RPR_PCM_Sink_ShowConfig(<i>String</i> cfg, <i>Int</i> cfg_sz, <i>HWND</i> hwndParent)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "PCM_Source_CreateFromFileEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>PCM_source* PCM_Source_CreateFromFile(const char* filename)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>PCM_source</i>  PCM_Source_CreateFromFile(\"filename\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>PCM_source</i> reaper.PCM_Source_CreateFromFile(<i>string</i> filename)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>PCM_source</i>  RPR_PCM_Source_CreateFromFile(<i>String</i> filename)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "PCM_Source_CreateFromType",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>PCM_source* PCM_Source_CreateFromFileEx(const char* filename, bool forcenoMidiImp)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>PCM_source</i>  PCM_Source_CreateFromFileEx(\"filename\", <i>bool </i>forcenoMidiImp)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>PCM_source</i> reaper.PCM_Source_CreateFromFileEx(<i>string</i> filename, <i>boolean</i> forcenoMidiImp)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>PCM_source</i>  RPR_PCM_Source_CreateFromFileEx(<i>String</i> filename, <i>Boolean</i> forcenoMidiImp)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "PCM_Source_Destroy",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>PCM_source* PCM_Source_CreateFromType(const char* sourcetype)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>PCM_source</i>  PCM_Source_CreateFromType(\"sourcetype\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>PCM_source</i> reaper.PCM_Source_CreateFromType(<i>string</i> sourcetype)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>PCM_source</i>  RPR_PCM_Source_CreateFromType(<i>String</i> sourcetype)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "PCM_Source_GetPeaks",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void PCM_Source_Destroy(PCM_source* src)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>PCM_Source_Destroy(<i>PCM_source</i> src)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.PCM_Source_Destroy(<i>PCM_source</i> src)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_PCM_Source_Destroy(<i>PCM_source</i> src)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "PCM_Source_GetSectionInfo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int PCM_Source_GetPeaks(PCM_source* src, double peakrate, double starttime, int numchannels, int numsamplesperchannel, int want_extra_type, double* buf)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> PCM_Source_GetPeaks(<i>PCM_source</i> src, peakrate, starttime, <i>int </i>numchannels, <i>int </i>numsamplesperchannel, <i>int </i>want_extra_type, <i>buffer_ptr </i>buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.PCM_Source_GetPeaks(<i>PCM_source</i> src, <i>number</i> peakrate, <i>number</i> starttime, <i>integer</i> numchannels, <i>integer</i> numsamplesperchannel, <i>integer</i> want_extra_type, <i>reaper.array </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>PCM_source</i> src, <i>Float</i> peakrate, <i>Float</i> starttime, <i>Int</i> numchannels, <i>Int</i> numsamplesperchannel, <i>Int</i> want_extra_type, <i>Float</i> buf) = RPR_PCM_Source_GetPeaks(src, peakrate, starttime, numchannels, numsamplesperchannel, want_extra_type, buf)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "PluginWantsAlwaysRunFx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool PCM_Source_GetSectionInfo(PCM_source* src, double* offsOut, double* lenOut, bool* revOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> PCM_Source_GetSectionInfo(<i>PCM_source</i> src, <i>&amp;</i>offs, <i>&amp;</i>len, <i>bool &amp;</i>rev)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>offs, <i>number </i>len, <i>boolean </i>rev = reaper.PCM_Source_GetSectionInfo(<i>PCM_source</i> src)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>PCM_source</i> src, <i>Float</i> offsOut, <i>Float</i> lenOut, <i>Boolean</i> revOut) = RPR_PCM_Source_GetSectionInfo(src, offsOut, lenOut, revOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "PreventUIRefresh",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void PluginWantsAlwaysRunFx(int amt)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>PluginWantsAlwaysRunFx(<i>int </i>amt)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.PluginWantsAlwaysRunFx(<i>integer</i> amt)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_PluginWantsAlwaysRunFx(<i>Int</i> amt)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "PromptForAction",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void PreventUIRefresh(int prevent_count)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>PreventUIRefresh(<i>int </i>prevent_count)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.PreventUIRefresh(<i>integer</i> prevent_count)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_PreventUIRefresh(<i>Int</i> prevent_count)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ReaScriptError",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int PromptForAction(int session_mode, int init_id, int section_id)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> PromptForAction(<i>int </i>session_mode, <i>int </i>init_id, <i>int </i>section_id)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.PromptForAction(<i>integer</i> session_mode, <i>integer</i> init_id, <i>integer</i> section_id)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_PromptForAction(<i>Int</i> session_mode, <i>Int</i> init_id, <i>Int</i> section_id)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "RecursiveCreateDirectory",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void ReaScriptError(const char* errmsg)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>ReaScriptError(\"errmsg\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.ReaScriptError(<i>string</i> errmsg)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_ReaScriptError(<i>String</i> errmsg)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "reduce_open_files",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int RecursiveCreateDirectory(const char* path, size_t ignored)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> RecursiveCreateDirectory(\"path\", <i>size_t </i>ignored)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.RecursiveCreateDirectory(<i>string</i> path, <i>integer</i> ignored)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_RecursiveCreateDirectory(<i>String</i> path, <i>Unknown</i> ignored)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "RefreshToolbar",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int reduce_open_files(int flags)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> reduce_open_files(<i>int </i>flags)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.reduce_open_files(<i>integer</i> flags)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_reduce_open_files(<i>Int</i> flags)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "RefreshToolbar2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void RefreshToolbar(int command_id)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>RefreshToolbar(<i>int </i>command_id)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.RefreshToolbar(<i>integer</i> command_id)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_RefreshToolbar(<i>Int</i> command_id)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "relative_fn",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void RefreshToolbar2(int section_id, int command_id)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>RefreshToolbar2(<i>int </i>section_id, <i>int </i>command_id)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.RefreshToolbar2(<i>integer</i> section_id, <i>integer</i> command_id)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_RefreshToolbar2(<i>Int</i> section_id, <i>Int</i> command_id)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "RemoveTrackSend",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void relative_fn(const char* in, char* out, int out_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>relative_fn(\"in\", #out)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>out = reaper.relative_fn(<i>string</i> in, <i>string </i>out)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> in, <i>String</i> out, <i>Int</i> out_sz) = RPR_relative_fn(in, out, out_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "RenderFileSection",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool RemoveTrackSend(MediaTrack* tr, int category, int sendidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> RemoveTrackSend(<i>MediaTrack</i> tr, <i>int </i>category, <i>int </i>sendidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.RemoveTrackSend(<i>MediaTrack</i> tr, <i>integer</i> category, <i>integer</i> sendidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_RemoveTrackSend(<i>MediaTrack</i> tr, <i>Int</i> category, <i>Int</i> sendidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ReorderSelectedTracks",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool RenderFileSection(const char* source_filename, const char* target_filename, double start_percent, double end_percent, double playrate)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> RenderFileSection(\"source_filename\", \"target_filename\", start_percent, end_percent, playrate)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.RenderFileSection(<i>string</i> source_filename, <i>string</i> target_filename, <i>number</i> start_percent, <i>number</i> end_percent, <i>number</i> playrate)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_RenderFileSection(<i>String</i> source_filename, <i>String</i> target_filename, <i>Float</i> start_percent, <i>Float</i> end_percent, <i>Float</i> playrate)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Resample_EnumModes",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool ReorderSelectedTracks(int beforeTrackIdx, int makePrevFolder)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> ReorderSelectedTracks(<i>int </i>beforeTrackIdx, <i>int </i>makePrevFolder)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.ReorderSelectedTracks(<i>integer</i> beforeTrackIdx, <i>integer</i> makePrevFolder)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_ReorderSelectedTracks(<i>Int</i> beforeTrackIdx, <i>Int</i> makePrevFolder)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "resolve_fn",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* Resample_EnumModes(int mode)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  Resample_EnumModes(#retval, <i>int </i>mode)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.Resample_EnumModes(<i>integer</i> mode)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_Resample_EnumModes(<i>Int</i> mode)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "resolve_fn2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void resolve_fn(const char* in, char* out, int out_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>resolve_fn(\"in\", #out)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>out = reaper.resolve_fn(<i>string</i> in, <i>string </i>out)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> in, <i>String</i> out, <i>Int</i> out_sz) = RPR_resolve_fn(in, out, out_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ReverseNamedCommandLookup",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void resolve_fn2(const char* in, char* out, int out_sz, const char* checkSubDirOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>resolve_fn2(\"in\", #out, <i>optional </i>\"checkSubDir\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>out = reaper.resolve_fn2(<i>string</i> in, <i>string </i>out, <i>optional </i><i>string</i> checkSubDir)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> in, <i>String</i> out, <i>Int</i> out_sz, <i>String</i> checkSubDirOptional) = RPR_resolve_fn2(in, out, out_sz, checkSubDirOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ScaleFromEnvelopeMode",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* ReverseNamedCommandLookup(int command_id)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  ReverseNamedCommandLookup(#retval, <i>int </i>command_id)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.ReverseNamedCommandLookup(<i>integer</i> command_id)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_ReverseNamedCommandLookup(<i>Int</i> command_id)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ScaleToEnvelopeMode",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double ScaleFromEnvelopeMode(int scaling_mode, double val)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> ScaleFromEnvelopeMode(<i>int </i>scaling_mode, val)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.ScaleFromEnvelopeMode(<i>integer</i> scaling_mode, <i>number</i> val)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_ScaleFromEnvelopeMode(<i>Int</i> scaling_mode, <i>Float</i> val)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SelectAllMediaItems",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double ScaleToEnvelopeMode(int scaling_mode, double val)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> ScaleToEnvelopeMode(<i>int </i>scaling_mode, val)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.ScaleToEnvelopeMode(<i>integer</i> scaling_mode, <i>number</i> val)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_ScaleToEnvelopeMode(<i>Int</i> scaling_mode, <i>Float</i> val)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SelectProjectInstance",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SelectAllMediaItems(ReaProject* proj, bool selected)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SelectAllMediaItems(<i>ReaProject</i> proj, <i>bool </i>selected)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SelectAllMediaItems(<i>ReaProject</i> proj, <i>boolean</i> selected)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SelectAllMediaItems(<i>ReaProject</i> proj, <i>Boolean</i> selected)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetActiveTake",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SelectProjectInstance(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SelectProjectInstance(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SelectProjectInstance(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SelectProjectInstance(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetAutomationMode",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetActiveTake(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetActiveTake(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetActiveTake(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetActiveTake(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetCurrentBPM",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetAutomationMode(int mode, bool onlySel)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetAutomationMode(<i>int </i>mode, <i>bool </i>onlySel)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetAutomationMode(<i>integer</i> mode, <i>boolean</i> onlySel)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetAutomationMode(<i>Int</i> mode, <i>Boolean</i> onlySel)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetCursorContext",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetCurrentBPM(ReaProject* __proj, double bpm, bool wantUndo)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetCurrentBPM(<i>ReaProject</i> __proj, bpm, <i>bool </i>wantUndo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetCurrentBPM(<i>ReaProject</i> __proj, <i>number</i> bpm, <i>boolean</i> wantUndo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetCurrentBPM(<i>ReaProject</i> __proj, <i>Float</i> bpm, <i>Boolean</i> wantUndo)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetEditCurPos",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetCursorContext(int mode, TrackEnvelope* envInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetCursorContext(<i>int </i>mode, <i>TrackEnvelope</i> envIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetCursorContext(<i>integer</i> mode, <i>TrackEnvelope</i> envIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetCursorContext(<i>Int</i> mode, <i>TrackEnvelope</i> envInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetEditCurPos2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetEditCurPos(double time, bool moveview, bool seekplay)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetEditCurPos(time, <i>bool </i>moveview, <i>bool </i>seekplay)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetEditCurPos(<i>number</i> time, <i>boolean</i> moveview, <i>boolean</i> seekplay)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetEditCurPos(<i>Float</i> time, <i>Boolean</i> moveview, <i>Boolean</i> seekplay)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetEnvelopePoint",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetEditCurPos2(ReaProject* proj, double time, bool moveview, bool seekplay)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetEditCurPos2(<i>ReaProject</i> proj, time, <i>bool </i>moveview, <i>bool </i>seekplay)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetEditCurPos2(<i>ReaProject</i> proj, <i>number</i> time, <i>boolean</i> moveview, <i>boolean</i> seekplay)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetEditCurPos2(<i>ReaProject</i> proj, <i>Float</i> time, <i>Boolean</i> moveview, <i>Boolean</i> seekplay)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetEnvelopePointEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetEnvelopePoint(TrackEnvelope* envelope, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetEnvelopePoint(<i>TrackEnvelope</i> envelope, <i>int </i>ptidx, <i>optional </i>timeIn, <i>optional </i>valueIn, <i>optional int</i> shapeIn, <i>optional </i>tensionIn, <i>optional bool</i> selectedIn, <i>optional bool</i> noSortIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetEnvelopePoint(<i>TrackEnvelope</i> envelope, <i>integer</i> ptidx, <i>optional number </i>timeIn, <i>optional number </i>valueIn, <i>optional number</i> shapeIn, <i>optional number </i>tensionIn, <i>optional boolean</i> selectedIn, <i>optional boolean</i> noSortIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>TrackEnvelope</i> envelope, <i>Int</i> ptidx, <i>Float</i> timeInOptional, <i>Float</i> valueInOptional, <i>Int</i> shapeInOptional, <i>Float</i> tensionInOptional, <i>Boolean</i> selectedInOptional, <i>Boolean</i> noSortInOptional) = RPR_SetEnvelopePoint(envelope, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetEnvelopeStateChunk",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetEnvelopePointEx(TrackEnvelope* envelope, int autoitem_idx, int ptidx, double* timeInOptional, double* valueInOptional, int* shapeInOptional, double* tensionInOptional, bool* selectedInOptional, bool* noSortInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetEnvelopePointEx(<i>TrackEnvelope</i> envelope, <i>int </i>autoitem_idx, <i>int </i>ptidx, <i>optional </i>timeIn, <i>optional </i>valueIn, <i>optional int</i> shapeIn, <i>optional </i>tensionIn, <i>optional bool</i> selectedIn, <i>optional bool</i> noSortIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetEnvelopePointEx(<i>TrackEnvelope</i> envelope, <i>integer</i> autoitem_idx, <i>integer</i> ptidx, <i>optional number </i>timeIn, <i>optional number </i>valueIn, <i>optional number</i> shapeIn, <i>optional number </i>tensionIn, <i>optional boolean</i> selectedIn, <i>optional boolean</i> noSortIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>TrackEnvelope</i> envelope, <i>Int</i> autoitem_idx, <i>Int</i> ptidx, <i>Float</i> timeInOptional, <i>Float</i> valueInOptional, <i>Int</i> shapeInOptional, <i>Float</i> tensionInOptional, <i>Boolean</i> selectedInOptional, <i>Boolean</i> noSortInOptional) = RPR_SetEnvelopePointEx(envelope, autoitem_idx, ptidx, timeInOptional, valueInOptional, shapeInOptional, tensionInOptional, selectedInOptional, noSortInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetExtState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetEnvelopeStateChunk(TrackEnvelope* env, const char* str, bool isundoOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetEnvelopeStateChunk(<i>TrackEnvelope</i> env, \"str\", <i>bool </i>isundo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetEnvelopeStateChunk(<i>TrackEnvelope</i> env, <i>string</i> str, <i>boolean</i> isundo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetEnvelopeStateChunk(<i>TrackEnvelope</i> env, <i>String</i> str, <i>Boolean</i> isundoOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetGlobalAutomationOverride",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetExtState(const char* section, const char* key, const char* value, bool persist)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetExtState(\"section\", \"key\", \"value\", <i>bool </i>persist)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetExtState(<i>string</i> section, <i>string</i> key, <i>string</i> value, <i>boolean</i> persist)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetExtState(<i>String</i> section, <i>String</i> key, <i>String</i> value, <i>Boolean</i> persist)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetItemStateChunk",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetGlobalAutomationOverride(int mode)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetGlobalAutomationOverride(<i>int </i>mode)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetGlobalAutomationOverride(<i>integer</i> mode)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetGlobalAutomationOverride(<i>Int</i> mode)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetMasterTrackVisibility",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetItemStateChunk(MediaItem* item, const char* str, bool isundoOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetItemStateChunk(<i>MediaItem</i> item, \"str\", <i>bool </i>isundo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetItemStateChunk(<i>MediaItem</i> item, <i>string</i> str, <i>boolean</i> isundo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetItemStateChunk(<i>MediaItem</i> item, <i>String</i> str, <i>Boolean</i> isundoOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetMediaItemInfo_Value",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int SetMasterTrackVisibility(int flag)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> SetMasterTrackVisibility(<i>int </i>flag)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.SetMasterTrackVisibility(<i>integer</i> flag)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_SetMasterTrackVisibility(<i>Int</i> flag)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetMediaItemLength",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetMediaItemInfo_Value(MediaItem* item, const char* parmname, double newvalue)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetMediaItemInfo_Value(<i>MediaItem</i> item, \"parmname\", newvalue)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetMediaItemInfo_Value(<i>MediaItem</i> item, <i>string</i> parmname, <i>number</i> newvalue)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetMediaItemInfo_Value(<i>MediaItem</i> item, <i>String</i> parmname, <i>Float</i> newvalue)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetMediaItemPosition",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetMediaItemLength(MediaItem* item, double length, bool refreshUI)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetMediaItemLength(<i>MediaItem</i> item, length, <i>bool </i>refreshUI)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetMediaItemLength(<i>MediaItem</i> item, <i>number</i> length, <i>boolean</i> refreshUI)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetMediaItemLength(<i>MediaItem</i> item, <i>Float</i> length, <i>Boolean</i> refreshUI)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetMediaItemSelected",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetMediaItemPosition(MediaItem* item, double position, bool refreshUI)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetMediaItemPosition(<i>MediaItem</i> item, position, <i>bool </i>refreshUI)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetMediaItemPosition(<i>MediaItem</i> item, <i>number</i> position, <i>boolean</i> refreshUI)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetMediaItemPosition(<i>MediaItem</i> item, <i>Float</i> position, <i>Boolean</i> refreshUI)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetMediaItemTake_Source",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetMediaItemSelected(MediaItem* item, bool selected)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetMediaItemSelected(<i>MediaItem</i> item, <i>bool </i>selected)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetMediaItemSelected(<i>MediaItem</i> item, <i>boolean</i> selected)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetMediaItemSelected(<i>MediaItem</i> item, <i>Boolean</i> selected)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetMediaItemTakeInfo_Value",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetMediaItemTake_Source(MediaItem_Take* take, PCM_source* source)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetMediaItemTake_Source(<i>MediaItem_Take</i> take, <i>PCM_source</i> source)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetMediaItemTake_Source(<i>MediaItem_Take</i> take, <i>PCM_source</i> source)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetMediaItemTake_Source(<i>MediaItem_Take</i> take, <i>PCM_source</i> source)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetMediaTrackInfo_Value",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetMediaItemTakeInfo_Value(MediaItem_Take* take, const char* parmname, double newvalue)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetMediaItemTakeInfo_Value(<i>MediaItem_Take</i> take, \"parmname\", newvalue)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetMediaItemTakeInfo_Value(<i>MediaItem_Take</i> take, <i>string</i> parmname, <i>number</i> newvalue)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetMediaItemTakeInfo_Value(<i>MediaItem_Take</i> take, <i>String</i> parmname, <i>Float</i> newvalue)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetMIDIEditorGrid",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetMediaTrackInfo_Value(MediaTrack* tr, const char* parmname, double newvalue)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetMediaTrackInfo_Value(<i>MediaTrack</i> tr, \"parmname\", newvalue)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetMediaTrackInfo_Value(<i>MediaTrack</i> tr, <i>string</i> parmname, <i>number</i> newvalue)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetMediaTrackInfo_Value(<i>MediaTrack</i> tr, <i>String</i> parmname, <i>Float</i> newvalue)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetMixerScroll",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetMIDIEditorGrid(ReaProject* project, double division)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetMIDIEditorGrid(<i>ReaProject</i> project, division)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetMIDIEditorGrid(<i>ReaProject</i> project, <i>number</i> division)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetMIDIEditorGrid(<i>ReaProject</i> project, <i>Float</i> division)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetMouseModifier",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaTrack* SetMixerScroll(MediaTrack* leftmosttrack)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaTrack</i>  SetMixerScroll(<i>MediaTrack</i> leftmosttrack)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaTrack</i> reaper.SetMixerScroll(<i>MediaTrack</i> leftmosttrack)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaTrack</i>  RPR_SetMixerScroll(<i>MediaTrack</i> leftmosttrack)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetOnlyTrackSelected",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetMouseModifier(const char* context, int modifier_flag, const char* action)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetMouseModifier(\"context\", <i>int </i>modifier_flag, \"action\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetMouseModifier(<i>string</i> context, <i>integer</i> modifier_flag, <i>string</i> action)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetMouseModifier(<i>String</i> context, <i>Int</i> modifier_flag, <i>String</i> action)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetProjectGrid",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetOnlyTrackSelected(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetOnlyTrackSelected(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetOnlyTrackSelected(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetOnlyTrackSelected(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetProjectMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetProjectGrid(ReaProject* project, double division)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetProjectGrid(<i>ReaProject</i> project, division)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetProjectGrid(<i>ReaProject</i> project, <i>number</i> division)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetProjectGrid(<i>ReaProject</i> project, <i>Float</i> division)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetProjectMarker2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetProjectMarker(int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetProjectMarker(<i>int </i>markrgnindexnumber, <i>bool </i>isrgn, pos, rgnend, \"name\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetProjectMarker(<i>integer</i> markrgnindexnumber, <i>boolean</i> isrgn, <i>number</i> pos, <i>number</i> rgnend, <i>string</i> name)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetProjectMarker(<i>Int</i> markrgnindexnumber, <i>Boolean</i> isrgn, <i>Float</i> pos, <i>Float</i> rgnend, <i>String</i> name)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetProjectMarker3",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetProjectMarker2(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetProjectMarker2(<i>ReaProject</i> proj, <i>int </i>markrgnindexnumber, <i>bool </i>isrgn, pos, rgnend, \"name\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetProjectMarker2(<i>ReaProject</i> proj, <i>integer</i> markrgnindexnumber, <i>boolean</i> isrgn, <i>number</i> pos, <i>number</i> rgnend, <i>string</i> name)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetProjectMarker2(<i>ReaProject</i> proj, <i>Int</i> markrgnindexnumber, <i>Boolean</i> isrgn, <i>Float</i> pos, <i>Float</i> rgnend, <i>String</i> name)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetProjectMarker4",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetProjectMarker3(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetProjectMarker3(<i>ReaProject</i> proj, <i>int </i>markrgnindexnumber, <i>bool </i>isrgn, pos, rgnend, \"name\", <i>int </i>color)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetProjectMarker3(<i>ReaProject</i> proj, <i>integer</i> markrgnindexnumber, <i>boolean</i> isrgn, <i>number</i> pos, <i>number</i> rgnend, <i>string</i> name, <i>integer</i> color)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetProjectMarker3(<i>ReaProject</i> proj, <i>Int</i> markrgnindexnumber, <i>Boolean</i> isrgn, <i>Float</i> pos, <i>Float</i> rgnend, <i>String</i> name, <i>Int</i> color)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetProjectMarkerByIndex",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetProjectMarker4(ReaProject* proj, int markrgnindexnumber, bool isrgn, double pos, double rgnend, const char* name, int color, int flags)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetProjectMarker4(<i>ReaProject</i> proj, <i>int </i>markrgnindexnumber, <i>bool </i>isrgn, pos, rgnend, \"name\", <i>int </i>color, <i>int </i>flags)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetProjectMarker4(<i>ReaProject</i> proj, <i>integer</i> markrgnindexnumber, <i>boolean</i> isrgn, <i>number</i> pos, <i>number</i> rgnend, <i>string</i> name, <i>integer</i> color, <i>integer</i> flags)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetProjectMarker4(<i>ReaProject</i> proj, <i>Int</i> markrgnindexnumber, <i>Boolean</i> isrgn, <i>Float</i> pos, <i>Float</i> rgnend, <i>String</i> name, <i>Int</i> color, <i>Int</i> flags)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetProjectMarkerByIndex2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetProjectMarkerByIndex(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetProjectMarkerByIndex(<i>ReaProject</i> proj, <i>int </i>markrgnidx, <i>bool </i>isrgn, pos, rgnend, <i>int </i>IDnumber, \"name\", <i>int </i>color)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetProjectMarkerByIndex(<i>ReaProject</i> proj, <i>integer</i> markrgnidx, <i>boolean</i> isrgn, <i>number</i> pos, <i>number</i> rgnend, <i>integer</i> IDnumber, <i>string</i> name, <i>integer</i> color)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetProjectMarkerByIndex(<i>ReaProject</i> proj, <i>Int</i> markrgnidx, <i>Boolean</i> isrgn, <i>Float</i> pos, <i>Float</i> rgnend, <i>Int</i> IDnumber, <i>String</i> name, <i>Int</i> color)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetProjExtState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetProjectMarkerByIndex2(ReaProject* proj, int markrgnidx, bool isrgn, double pos, double rgnend, int IDnumber, const char* name, int color, int flags)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetProjectMarkerByIndex2(<i>ReaProject</i> proj, <i>int </i>markrgnidx, <i>bool </i>isrgn, pos, rgnend, <i>int </i>IDnumber, \"name\", <i>int </i>color, <i>int </i>flags)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetProjectMarkerByIndex2(<i>ReaProject</i> proj, <i>integer</i> markrgnidx, <i>boolean</i> isrgn, <i>number</i> pos, <i>number</i> rgnend, <i>integer</i> IDnumber, <i>string</i> name, <i>integer</i> color, <i>integer</i> flags)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetProjectMarkerByIndex2(<i>ReaProject</i> proj, <i>Int</i> markrgnidx, <i>Boolean</i> isrgn, <i>Float</i> pos, <i>Float</i> rgnend, <i>Int</i> IDnumber, <i>String</i> name, <i>Int</i> color, <i>Int</i> flags)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetRegionRenderMatrix",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int SetProjExtState(ReaProject* proj, const char* extname, const char* key, const char* value)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> SetProjExtState(<i>ReaProject</i> proj, \"extname\", \"key\", \"value\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.SetProjExtState(<i>ReaProject</i> proj, <i>string</i> extname, <i>string</i> key, <i>string</i> value)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_SetProjExtState(<i>ReaProject</i> proj, <i>String</i> extname, <i>String</i> key, <i>String</i> value)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTakeMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetRegionRenderMatrix(ReaProject* proj, int regionindex, MediaTrack* track, int addorremove)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetRegionRenderMatrix(<i>ReaProject</i> proj, <i>int </i>regionindex, <i>MediaTrack</i> track, <i>int </i>addorremove)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetRegionRenderMatrix(<i>ReaProject</i> proj, <i>integer</i> regionindex, <i>MediaTrack</i> track, <i>integer</i> addorremove)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetRegionRenderMatrix(<i>ReaProject</i> proj, <i>Int</i> regionindex, <i>MediaTrack</i> track, <i>Int</i> addorremove)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTakeStretchMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int SetTakeMarker(MediaItem_Take* take, int idx, const char* nameIn, double* srcposInOptional, int* colorInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> SetTakeMarker(<i>MediaItem_Take</i> take, <i>int </i>idx, \"nameIn\", <i>optional </i>srcposIn, <i>optional int</i> colorIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.SetTakeMarker(<i>MediaItem_Take</i> take, <i>integer</i> idx, <i>string</i> nameIn, <i>optional number </i>srcposIn, <i>optional number</i> colorIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> idx, <i>String</i> nameIn, <i>Float</i> srcposInOptional, <i>Int</i> colorInOptional) = RPR_SetTakeMarker(take, idx, nameIn, srcposInOptional, colorInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTakeStretchMarkerSlope",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int SetTakeStretchMarker(MediaItem_Take* take, int idx, double pos, const double* srcposInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> SetTakeStretchMarker(<i>MediaItem_Take</i> take, <i>int </i>idx, pos, <i>optional </i>srcposIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.SetTakeStretchMarker(<i>MediaItem_Take</i> take, <i>integer</i> idx, <i>number</i> pos, <i>optional number </i>srcposIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_SetTakeStretchMarker(<i>MediaItem_Take</i> take, <i>Int</i> idx, <i>Float</i> pos, <i>const double</i> srcposInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTempoTimeSigMarker",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetTakeStretchMarkerSlope(MediaItem_Take* take, int idx, double slope)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetTakeStretchMarkerSlope(<i>MediaItem_Take</i> take, <i>int </i>idx, slope)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetTakeStretchMarkerSlope(<i>MediaItem_Take</i> take, <i>integer</i> idx, <i>number</i> slope)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetTakeStretchMarkerSlope(<i>MediaItem_Take</i> take, <i>Int</i> idx, <i>Float</i> slope)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetThemeColor",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetTempoTimeSigMarker(ReaProject* proj, int ptidx, double timepos, int measurepos, double beatpos, double bpm, int timesig_num, int timesig_denom, bool lineartempo)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetTempoTimeSigMarker(<i>ReaProject</i> proj, <i>int </i>ptidx, timepos, <i>int </i>measurepos, beatpos, bpm, <i>int </i>timesig_num, <i>int </i>timesig_denom, <i>bool </i>lineartempo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetTempoTimeSigMarker(<i>ReaProject</i> proj, <i>integer</i> ptidx, <i>number</i> timepos, <i>integer</i> measurepos, <i>number</i> beatpos, <i>number</i> bpm, <i>integer</i> timesig_num, <i>integer</i> timesig_denom, <i>boolean</i> lineartempo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetTempoTimeSigMarker(<i>ReaProject</i> proj, <i>Int</i> ptidx, <i>Float</i> timepos, <i>Int</i> measurepos, <i>Float</i> beatpos, <i>Float</i> bpm, <i>Int</i> timesig_num, <i>Int</i> timesig_denom, <i>Boolean</i> lineartempo)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetToggleCommandState",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int SetThemeColor(const char* ini_key, int color, int flagsOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> SetThemeColor(\"ini_key\", <i>int </i>color, <i>int </i>flags)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.SetThemeColor(<i>string</i> ini_key, <i>integer</i> color, <i>integer</i> flags)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_SetThemeColor(<i>String</i> ini_key, <i>Int</i> color, <i>Int</i> flagsOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTrackAutomationMode",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetToggleCommandState(int section_id, int command_id, int state)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetToggleCommandState(<i>int </i>section_id, <i>int </i>command_id, <i>int </i>state)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetToggleCommandState(<i>integer</i> section_id, <i>integer</i> command_id, <i>integer</i> state)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetToggleCommandState(<i>Int</i> section_id, <i>Int</i> command_id, <i>Int</i> state)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTrackColor",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetTrackAutomationMode(MediaTrack* tr, int mode)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetTrackAutomationMode(<i>MediaTrack</i> tr, <i>int </i>mode)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetTrackAutomationMode(<i>MediaTrack</i> tr, <i>integer</i> mode)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetTrackAutomationMode(<i>MediaTrack</i> tr, <i>Int</i> mode)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTrackMIDILyrics",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetTrackColor(MediaTrack* track, int color)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetTrackColor(<i>MediaTrack</i> track, <i>int </i>color)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetTrackColor(<i>MediaTrack</i> track, <i>integer</i> color)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetTrackColor(<i>MediaTrack</i> track, <i>Int</i> color)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTrackMIDINoteName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetTrackMIDILyrics(MediaTrack* track, int flag, const char* str)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetTrackMIDILyrics(<i>MediaTrack</i> track, <i>int </i>flag, \"str\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetTrackMIDILyrics(<i>MediaTrack</i> track, <i>integer</i> flag, <i>string</i> str)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetTrackMIDILyrics(<i>MediaTrack</i> track, <i>Int</i> flag, <i>String</i> str)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTrackMIDINoteNameEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetTrackMIDINoteName(int track, int pitch, int chan, const char* name)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetTrackMIDINoteName(<i>int </i>track, <i>int </i>pitch, <i>int </i>chan, \"name\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetTrackMIDINoteName(<i>integer</i> track, <i>integer</i> pitch, <i>integer</i> chan, <i>string</i> name)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetTrackMIDINoteName(<i>Int</i> track, <i>Int</i> pitch, <i>Int</i> chan, <i>String</i> name)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTrackSelected",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetTrackMIDINoteNameEx(ReaProject* proj, MediaTrack* track, int pitch, int chan, const char* name)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetTrackMIDINoteNameEx(<i>ReaProject</i> proj, <i>MediaTrack</i> track, <i>int </i>pitch, <i>int </i>chan, \"name\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetTrackMIDINoteNameEx(<i>ReaProject</i> proj, <i>MediaTrack</i> track, <i>integer</i> pitch, <i>integer</i> chan, <i>string</i> name)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetTrackMIDINoteNameEx(<i>ReaProject</i> proj, <i>MediaTrack</i> track, <i>Int</i> pitch, <i>Int</i> chan, <i>String</i> name)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTrackSendInfo_Value",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SetTrackSelected(MediaTrack* track, bool selected)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SetTrackSelected(<i>MediaTrack</i> track, <i>bool </i>selected)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SetTrackSelected(<i>MediaTrack</i> track, <i>boolean</i> selected)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SetTrackSelected(<i>MediaTrack</i> track, <i>Boolean</i> selected)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTrackSendUIPan",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetTrackSendInfo_Value(MediaTrack* tr, int category, int sendidx, const char* parmname, double newvalue)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetTrackSendInfo_Value(<i>MediaTrack</i> tr, <i>int </i>category, <i>int </i>sendidx, \"parmname\", newvalue)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetTrackSendInfo_Value(<i>MediaTrack</i> tr, <i>integer</i> category, <i>integer</i> sendidx, <i>string</i> parmname, <i>number</i> newvalue)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetTrackSendInfo_Value(<i>MediaTrack</i> tr, <i>Int</i> category, <i>Int</i> sendidx, <i>String</i> parmname, <i>Float</i> newvalue)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTrackSendUIVol",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetTrackSendUIPan(MediaTrack* track, int send_idx, double pan, int isend)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetTrackSendUIPan(<i>MediaTrack</i> track, <i>int </i>send_idx, pan, <i>int </i>isend)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetTrackSendUIPan(<i>MediaTrack</i> track, <i>integer</i> send_idx, <i>number</i> pan, <i>integer</i> isend)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetTrackSendUIPan(<i>MediaTrack</i> track, <i>Int</i> send_idx, <i>Float</i> pan, <i>Int</i> isend)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SetTrackStateChunk",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetTrackSendUIVol(MediaTrack* track, int send_idx, double vol, int isend)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetTrackSendUIVol(<i>MediaTrack</i> track, <i>int </i>send_idx, vol, <i>int </i>isend)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetTrackSendUIVol(<i>MediaTrack</i> track, <i>integer</i> send_idx, <i>number</i> vol, <i>integer</i> isend)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetTrackSendUIVol(<i>MediaTrack</i> track, <i>Int</i> send_idx, <i>Float</i> vol, <i>Int</i> isend)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ShowActionList",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool SetTrackStateChunk(MediaTrack* track, const char* str, bool isundoOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> SetTrackStateChunk(<i>MediaTrack</i> track, \"str\", <i>bool </i>isundo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.SetTrackStateChunk(<i>MediaTrack</i> track, <i>string</i> str, <i>boolean</i> isundo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_SetTrackStateChunk(<i>MediaTrack</i> track, <i>String</i> str, <i>Boolean</i> isundoOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ShowConsoleMsg",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void ShowActionList(KbdSectionInfo* caller, HWND callerWnd)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>ShowActionList(<i>KbdSectionInfo</i> caller, <i>HWND</i> callerWnd)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.ShowActionList(<i>KbdSectionInfo</i> caller, <i>HWND</i> callerWnd)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_ShowActionList(<i>KbdSectionInfo</i> caller, <i>HWND</i> callerWnd)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ShowMessageBox",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void ShowConsoleMsg(const char* msg)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>ShowConsoleMsg(\"msg\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.ShowConsoleMsg(<i>string</i> msg)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_ShowConsoleMsg(<i>String</i> msg)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ShowPopupMenu",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int ShowMessageBox(const char* msg, const char* title, int type)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> ShowMessageBox(\"msg\", \"title\", <i>int </i>type)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.ShowMessageBox(<i>string</i> msg, <i>string</i> title, <i>integer</i> type)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_ShowMessageBox(<i>String</i> msg, <i>String</i> title, <i>Int</i> type)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SLIDER2DB",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void ShowPopupMenu(const char* name, int x, int y, HWND hwndParentOptional, void* ctxOptional, int ctx2Optional, int ctx3Optional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>ShowPopupMenu(\"name\", <i>int </i>x, <i>int </i>y, <i>HWND</i> hwndParent, <i>void*</i> ctx, <i>int </i>ctx2, <i>int </i>ctx3)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.ShowPopupMenu(<i>string</i> name, <i>integer</i> x, <i>integer</i> y, <i>HWND</i> hwndParent, <i>identifier</i> ctx, <i>integer</i> ctx2, <i>integer</i> ctx3)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_ShowPopupMenu(<i>String</i> name, <i>Int</i> x, <i>Int</i> y, <i>HWND</i> hwndParentOptional, <i>void</i> ctxOptional, <i>Int</i> ctx2Optional, <i>Int</i> ctx3Optional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SnapToGrid",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double SLIDER2DB(double y)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> SLIDER2DB(y)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.SLIDER2DB(<i>number</i> y)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_SLIDER2DB(<i>Float</i> y)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SoloAllTracks",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double SnapToGrid(ReaProject* project, double time_pos)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> SnapToGrid(<i>ReaProject</i> project, time_pos)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.SnapToGrid(<i>ReaProject</i> project, <i>number</i> time_pos)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_SnapToGrid(<i>ReaProject</i> project, <i>Float</i> time_pos)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Splash_GetWnd",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void SoloAllTracks(int solo)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>SoloAllTracks(<i>int </i>solo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.SoloAllTracks(<i>integer</i> solo)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_SoloAllTracks(<i>Int</i> solo)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "SplitMediaItem",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>HWND Splash_GetWnd()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>HWND</i>  Splash_GetWnd()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>HWND</i> reaper.Splash_GetWnd()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>HWND</i>  RPR_Splash_GetWnd()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "stringToGuid",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>MediaItem* SplitMediaItem(MediaItem* item, double position)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>MediaItem</i>  SplitMediaItem(<i>MediaItem</i> item, position)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>MediaItem</i> reaper.SplitMediaItem(<i>MediaItem</i> item, <i>number</i> position)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>MediaItem</i>  RPR_SplitMediaItem(<i>MediaItem</i> item, <i>Float</i> position)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "StuffMIDIMessage",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void stringToGuid(const char* str, GUID* g)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>stringToGuid(\"str\", #gGUID)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>gGUID = reaper.stringToGuid(<i>string</i> str, <i>string </i>gGUID)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_stringToGuid(<i>String</i> str, <i>GUID</i> g)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_AddByName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void StuffMIDIMessage(int mode, int msg1, int msg2, int msg3)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>StuffMIDIMessage(<i>int </i>mode, <i>int </i>msg1, <i>int </i>msg2, <i>int </i>msg3)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.StuffMIDIMessage(<i>integer</i> mode, <i>integer</i> msg1, <i>integer</i> msg2, <i>integer</i> msg3)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_StuffMIDIMessage(<i>Int</i> mode, <i>Int</i> msg1, <i>Int</i> msg2, <i>Int</i> msg3)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_CopyToTake",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TakeFX_AddByName(MediaItem_Take* take, const char* fxname, int instantiate)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TakeFX_AddByName(<i>MediaItem_Take</i> take, \"fxname\", <i>int </i>instantiate)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TakeFX_AddByName(<i>MediaItem_Take</i> take, <i>string</i> fxname, <i>integer</i> instantiate)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TakeFX_AddByName(<i>MediaItem_Take</i> take, <i>String</i> fxname, <i>Int</i> instantiate)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_CopyToTrack",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TakeFX_CopyToTake(MediaItem_Take* src_take, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TakeFX_CopyToTake(<i>MediaItem_Take</i> src_take, <i>int </i>src_fx, <i>MediaItem_Take</i> dest_take, <i>int </i>dest_fx, <i>bool </i>is_move)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TakeFX_CopyToTake(<i>MediaItem_Take</i> src_take, <i>integer</i> src_fx, <i>MediaItem_Take</i> dest_take, <i>integer</i> dest_fx, <i>boolean</i> is_move)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TakeFX_CopyToTake(<i>MediaItem_Take</i> src_take, <i>Int</i> src_fx, <i>MediaItem_Take</i> dest_take, <i>Int</i> dest_fx, <i>Boolean</i> is_move)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_Delete",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TakeFX_CopyToTrack(MediaItem_Take* src_take, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TakeFX_CopyToTrack(<i>MediaItem_Take</i> src_take, <i>int </i>src_fx, <i>MediaTrack</i> dest_track, <i>int </i>dest_fx, <i>bool </i>is_move)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TakeFX_CopyToTrack(<i>MediaItem_Take</i> src_take, <i>integer</i> src_fx, <i>MediaTrack</i> dest_track, <i>integer</i> dest_fx, <i>boolean</i> is_move)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TakeFX_CopyToTrack(<i>MediaItem_Take</i> src_take, <i>Int</i> src_fx, <i>MediaTrack</i> dest_track, <i>Int</i> dest_fx, <i>Boolean</i> is_move)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_EndParamEdit",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_Delete(MediaItem_Take* take, int fx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_Delete(<i>MediaItem_Take</i> take, <i>int </i>fx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeFX_Delete(<i>MediaItem_Take</i> take, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeFX_Delete(<i>MediaItem_Take</i> take, <i>Int</i> fx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_FormatParamValue",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_EndParamEdit(MediaItem_Take* take, int fx, int param)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_EndParamEdit(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>param)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeFX_EndParamEdit(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> param)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeFX_EndParamEdit(<i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> param)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_FormatParamValueNormalized",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_FormatParamValue(MediaItem_Take* take, int fx, int param, double val, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_FormatParamValue(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>param, val, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.TakeFX_FormatParamValue(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> param, <i>number</i> val, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> val, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_TakeFX_FormatParamValue(take, fx, param, val, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetChainVisible",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_FormatParamValueNormalized(MediaItem_Take* take, int fx, int param, double value, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_FormatParamValueNormalized(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>param, value, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.TakeFX_FormatParamValueNormalized(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> param, <i>number</i> value, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> value, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_TakeFX_FormatParamValueNormalized(take, fx, param, value, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetCount",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TakeFX_GetChainVisible(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TakeFX_GetChainVisible(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TakeFX_GetChainVisible(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TakeFX_GetChainVisible(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetEnabled",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TakeFX_GetCount(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TakeFX_GetCount(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TakeFX_GetCount(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TakeFX_GetCount(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetEnvelope",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_GetEnabled(MediaItem_Take* take, int fx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_GetEnabled(<i>MediaItem_Take</i> take, <i>int </i>fx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeFX_GetEnabled(<i>MediaItem_Take</i> take, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeFX_GetEnabled(<i>MediaItem_Take</i> take, <i>Int</i> fx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetFloatingWindow",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>TrackEnvelope* TakeFX_GetEnvelope(MediaItem_Take* take, int fxindex, int parameterindex, bool create)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>TrackEnvelope</i>  TakeFX_GetEnvelope(<i>MediaItem_Take</i> take, <i>int </i>fxindex, <i>int </i>parameterindex, <i>bool </i>create)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>TrackEnvelope</i> reaper.TakeFX_GetEnvelope(<i>MediaItem_Take</i> take, <i>integer</i> fxindex, <i>integer</i> parameterindex, <i>boolean</i> create)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>TrackEnvelope</i>  RPR_TakeFX_GetEnvelope(<i>MediaItem_Take</i> take, <i>Int</i> fxindex, <i>Int</i> parameterindex, <i>Boolean</i> create)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetFormattedParamValue",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>HWND TakeFX_GetFloatingWindow(MediaItem_Take* take, int index)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>HWND</i>  TakeFX_GetFloatingWindow(<i>MediaItem_Take</i> take, <i>int </i>index)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>HWND</i> reaper.TakeFX_GetFloatingWindow(<i>MediaItem_Take</i> take, <i>integer</i> index)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>HWND</i>  RPR_TakeFX_GetFloatingWindow(<i>MediaItem_Take</i> take, <i>Int</i> index)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetFXGUID",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_GetFormattedParamValue(MediaItem_Take* take, int fx, int param, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_GetFormattedParamValue(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>param, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.TakeFX_GetFormattedParamValue(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> param, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> param, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_TakeFX_GetFormattedParamValue(take, fx, param, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetFXName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>GUID* TakeFX_GetFXGUID(MediaItem_Take* take, int fx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  TakeFX_GetFXGUID(#retguid, <i>MediaItem_Take</i> take, <i>int </i>fx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> GUID = reaper.TakeFX_GetFXGUID(<i>MediaItem_Take</i> take, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>GUID</i>  RPR_TakeFX_GetFXGUID(<i>MediaItem_Take</i> take, <i>Int</i> fx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetIOSize",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_GetFXName(MediaItem_Take* take, int fx, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_GetFXName(<i>MediaItem_Take</i> take, <i>int </i>fx, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.TakeFX_GetFXName(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> fx, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_TakeFX_GetFXName(take, fx, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetNamedConfigParm",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TakeFX_GetIOSize(MediaItem_Take* take, int fx, int* inputPinsOutOptional, int* outputPinsOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TakeFX_GetIOSize(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>optional int &amp;</i>inputPins, <i>optional int &amp;</i>outputPins)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>optional number </i>inputPins, <i>optional number </i>outputPins = reaper.TakeFX_GetIOSize(<i>MediaItem_Take</i> take, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> inputPinsOutOptional, <i>Int</i> outputPinsOutOptional) = RPR_TakeFX_GetIOSize(take, fx, inputPinsOutOptional, outputPinsOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetNumParams",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_GetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, char* bufOut, int bufOut_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_GetNamedConfigParm(<i>MediaItem_Take</i> take, <i>int </i>fx, \"parmname\", #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.TakeFX_GetNamedConfigParm(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>string</i> parmname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> fx, <i>String</i> parmname, <i>String</i> bufOut, <i>Int</i> bufOut_sz) = RPR_TakeFX_GetNamedConfigParm(take, fx, parmname, bufOut, bufOut_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetOffline",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TakeFX_GetNumParams(MediaItem_Take* take, int fx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TakeFX_GetNumParams(<i>MediaItem_Take</i> take, <i>int </i>fx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TakeFX_GetNumParams(<i>MediaItem_Take</i> take, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TakeFX_GetNumParams(<i>MediaItem_Take</i> take, <i>Int</i> fx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetOpen",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_GetOffline(MediaItem_Take* take, int fx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_GetOffline(<i>MediaItem_Take</i> take, <i>int </i>fx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeFX_GetOffline(<i>MediaItem_Take</i> take, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeFX_GetOffline(<i>MediaItem_Take</i> take, <i>Int</i> fx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetParam",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_GetOpen(MediaItem_Take* take, int fx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_GetOpen(<i>MediaItem_Take</i> take, <i>int </i>fx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeFX_GetOpen(<i>MediaItem_Take</i> take, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeFX_GetOpen(<i>MediaItem_Take</i> take, <i>Int</i> fx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetParameterStepSizes",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TakeFX_GetParam(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TakeFX_GetParam(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>param, <i>&amp;</i>minval, <i>&amp;</i>maxval)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> retval, <i>number </i>minval, <i>number </i>maxval = reaper.TakeFX_GetParam(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> param)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> minvalOut, <i>Float</i> maxvalOut) = RPR_TakeFX_GetParam(take, fx, param, minvalOut, maxvalOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetParamEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_GetParameterStepSizes(MediaItem_Take* take, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_GetParameterStepSizes(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>param, <i>&amp;</i>step, <i>&amp;</i>smallstep, <i>&amp;</i>largestep, <i>bool &amp;</i>istoggle)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>step, <i>number </i>smallstep, <i>number </i>largestep, <i>boolean </i>istoggle = reaper.TakeFX_GetParameterStepSizes(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> param)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> stepOut, <i>Float</i> smallstepOut, <i>Float</i> largestepOut, <i>Boolean</i> istoggleOut) = RPR_TakeFX_GetParameterStepSizes(take, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetParamName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TakeFX_GetParamEx(MediaItem_Take* take, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TakeFX_GetParamEx(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>param, <i>&amp;</i>minval, <i>&amp;</i>maxval, <i>&amp;</i>midval)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> retval, <i>number </i>minval, <i>number </i>maxval, <i>number </i>midval = reaper.TakeFX_GetParamEx(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> param)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> minvalOut, <i>Float</i> maxvalOut, <i>Float</i> midvalOut) = RPR_TakeFX_GetParamEx(take, fx, param, minvalOut, maxvalOut, midvalOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetParamNormalized",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_GetParamName(MediaItem_Take* take, int fx, int param, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_GetParamName(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>param, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.TakeFX_GetParamName(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> param, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> param, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_TakeFX_GetParamName(take, fx, param, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetPinMappings",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TakeFX_GetParamNormalized(MediaItem_Take* take, int fx, int param)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TakeFX_GetParamNormalized(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>param)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.TakeFX_GetParamNormalized(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> param)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_TakeFX_GetParamNormalized(<i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> param)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetPreset",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TakeFX_GetPinMappings(MediaItem_Take* tr, int fx, int isoutput, int pin, int* high32OutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TakeFX_GetPinMappings(<i>MediaItem_Take</i> tr, <i>int </i>fx, <i>int </i>isoutput, <i>int </i>pin, <i>optional int &amp;</i>high32)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>optional number </i>high32 = reaper.TakeFX_GetPinMappings(<i>MediaItem_Take</i> tr, <i>integer</i> fx, <i>integer</i> isoutput, <i>integer</i> pin)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>MediaItem_Take</i> tr, <i>Int</i> fx, <i>Int</i> isoutput, <i>Int</i> pin, <i>Int</i> high32OutOptional) = RPR_TakeFX_GetPinMappings(tr, fx, isoutput, pin, high32OutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetPresetIndex",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_GetPreset(MediaItem_Take* take, int fx, char* presetname, int presetname_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_GetPreset(<i>MediaItem_Take</i> take, <i>int </i>fx, #presetname)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>presetname = reaper.TakeFX_GetPreset(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>string </i>presetname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> fx, <i>String</i> presetname, <i>Int</i> presetname_sz) = RPR_TakeFX_GetPreset(take, fx, presetname, presetname_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_GetUserPresetFilename",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TakeFX_GetPresetIndex(MediaItem_Take* take, int fx, int* numberOfPresetsOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TakeFX_GetPresetIndex(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int &amp;</i>numberOfPresets)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>number </i>numberOfPresets = reaper.TakeFX_GetPresetIndex(<i>MediaItem_Take</i> take, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> numberOfPresetsOut) = RPR_TakeFX_GetPresetIndex(take, fx, numberOfPresetsOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_NavigatePresets",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TakeFX_GetUserPresetFilename(MediaItem_Take* take, int fx, char* fn, int fn_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TakeFX_GetUserPresetFilename(<i>MediaItem_Take</i> take, <i>int </i>fx, #fn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>fn = reaper.TakeFX_GetUserPresetFilename(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>string </i>fn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>MediaItem_Take</i> take, <i>Int</i> fx, <i>String</i> fn, <i>Int</i> fn_sz) = RPR_TakeFX_GetUserPresetFilename(take, fx, fn, fn_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_SetEnabled",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_NavigatePresets(MediaItem_Take* take, int fx, int presetmove)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_NavigatePresets(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>presetmove)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeFX_NavigatePresets(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> presetmove)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeFX_NavigatePresets(<i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> presetmove)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_SetNamedConfigParm",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TakeFX_SetEnabled(MediaItem_Take* take, int fx, bool enabled)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TakeFX_SetEnabled(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>bool </i>enabled)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TakeFX_SetEnabled(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>boolean</i> enabled)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TakeFX_SetEnabled(<i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Boolean</i> enabled)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_SetOffline",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_SetNamedConfigParm(MediaItem_Take* take, int fx, const char* parmname, const char* value)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_SetNamedConfigParm(<i>MediaItem_Take</i> take, <i>int </i>fx, \"parmname\", \"value\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeFX_SetNamedConfigParm(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>string</i> parmname, <i>string</i> value)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeFX_SetNamedConfigParm(<i>MediaItem_Take</i> take, <i>Int</i> fx, <i>String</i> parmname, <i>String</i> value)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_SetOpen",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TakeFX_SetOffline(MediaItem_Take* take, int fx, bool offline)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TakeFX_SetOffline(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>bool </i>offline)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TakeFX_SetOffline(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>boolean</i> offline)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TakeFX_SetOffline(<i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Boolean</i> offline)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_SetParam",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TakeFX_SetOpen(MediaItem_Take* take, int fx, bool open)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TakeFX_SetOpen(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>bool </i>open)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TakeFX_SetOpen(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>boolean</i> open)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TakeFX_SetOpen(<i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Boolean</i> open)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_SetParamNormalized",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_SetParam(MediaItem_Take* take, int fx, int param, double val)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_SetParam(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>param, val)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeFX_SetParam(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> param, <i>number</i> val)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeFX_SetParam(<i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> val)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_SetPinMappings",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_SetParamNormalized(MediaItem_Take* take, int fx, int param, double value)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_SetParamNormalized(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>param, value)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeFX_SetParamNormalized(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> param, <i>number</i> value)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeFX_SetParamNormalized(<i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> value)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_SetPreset",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_SetPinMappings(MediaItem_Take* tr, int fx, int isoutput, int pin, int low32bits, int hi32bits)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_SetPinMappings(<i>MediaItem_Take</i> tr, <i>int </i>fx, <i>int </i>isoutput, <i>int </i>pin, <i>int </i>low32bits, <i>int </i>hi32bits)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeFX_SetPinMappings(<i>MediaItem_Take</i> tr, <i>integer</i> fx, <i>integer</i> isoutput, <i>integer</i> pin, <i>integer</i> low32bits, <i>integer</i> hi32bits)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeFX_SetPinMappings(<i>MediaItem_Take</i> tr, <i>Int</i> fx, <i>Int</i> isoutput, <i>Int</i> pin, <i>Int</i> low32bits, <i>Int</i> hi32bits)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_SetPresetByIndex",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_SetPreset(MediaItem_Take* take, int fx, const char* presetname)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_SetPreset(<i>MediaItem_Take</i> take, <i>int </i>fx, \"presetname\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeFX_SetPreset(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>string</i> presetname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeFX_SetPreset(<i>MediaItem_Take</i> take, <i>Int</i> fx, <i>String</i> presetname)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeFX_Show",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeFX_SetPresetByIndex(MediaItem_Take* take, int fx, int idx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeFX_SetPresetByIndex(<i>MediaItem_Take</i> take, <i>int </i>fx, <i>int </i>idx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeFX_SetPresetByIndex(<i>MediaItem_Take</i> take, <i>integer</i> fx, <i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeFX_SetPresetByIndex(<i>MediaItem_Take</i> take, <i>Int</i> fx, <i>Int</i> idx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TakeIsMIDI",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TakeFX_Show(MediaItem_Take* take, int index, int showFlag)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TakeFX_Show(<i>MediaItem_Take</i> take, <i>int </i>index, <i>int </i>showFlag)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TakeFX_Show(<i>MediaItem_Take</i> take, <i>integer</i> index, <i>integer</i> showFlag)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TakeFX_Show(<i>MediaItem_Take</i> take, <i>Int</i> index, <i>Int</i> showFlag)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ThemeLayout_GetLayout",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TakeIsMIDI(MediaItem_Take* take)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TakeIsMIDI(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TakeIsMIDI(<i>MediaItem_Take</i> take)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TakeIsMIDI(<i>MediaItem_Take</i> take)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ThemeLayout_GetParameter",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool ThemeLayout_GetLayout(const char* section, int idx, char* nameOut, int nameOut_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> ThemeLayout_GetLayout(\"section\", <i>int </i>idx, #name)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>name = reaper.ThemeLayout_GetLayout(<i>string</i> section, <i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>String</i> section, <i>Int</i> idx, <i>String</i> nameOut, <i>Int</i> nameOut_sz) = RPR_ThemeLayout_GetLayout(section, idx, nameOut, nameOut_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ThemeLayout_RefreshAll",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* ThemeLayout_GetParameter(int wp, const char** descOutOptional, int* valueOutOptional, int* defValueOutOptional, int* minValueOutOptional, int* maxValueOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  ThemeLayout_GetParameter(#retval, <i>int </i>wp, <i>optional </i>#desc, <i>optional int &amp;</i>value, <i>optional int &amp;</i>defValue, <i>optional int &amp;</i>minValue, <i>optional int &amp;</i>maxValue)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> retval, <i>optional </i><i>string </i>desc, <i>optional number </i>value, <i>optional number </i>defValue, <i>optional number </i>minValue, <i>optional number </i>maxValue = reaper.ThemeLayout_GetParameter(<i>integer</i> wp)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>String</i> retval, <i>Int</i> wp, <i>String</i> descOutOptional, <i>Int</i> valueOutOptional, <i>Int</i> defValueOutOptional, <i>Int</i> minValueOutOptional, <i>Int</i> maxValueOutOptional) = RPR_ThemeLayout_GetParameter(wp, descOutOptional, valueOutOptional, defValueOutOptional, minValueOutOptional, maxValueOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ThemeLayout_SetLayout",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void ThemeLayout_RefreshAll()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>ThemeLayout_RefreshAll()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.ThemeLayout_RefreshAll()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_ThemeLayout_RefreshAll()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ThemeLayout_SetParameter",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool ThemeLayout_SetLayout(const char* section, const char*  layout)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> ThemeLayout_SetLayout(\"section\", \" layout\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.ThemeLayout_SetLayout(<i>string</i> section, <i>string</i>  layout)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_ThemeLayout_SetLayout(<i>String</i> section, <i>String</i>  layout)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "time_precise",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool ThemeLayout_SetParameter(int wp, int value, bool persist)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> ThemeLayout_SetParameter(<i>int </i>wp, <i>int </i>value, <i>bool </i>persist)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.ThemeLayout_SetParameter(<i>integer</i> wp, <i>integer</i> value, <i>boolean</i> persist)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_ThemeLayout_SetParameter(<i>Int</i> wp, <i>Int</i> value, <i>Boolean</i> persist)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap2_beatsToTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double time_precise()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.time_precise()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_time_precise()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap2_GetDividedBpmAtTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap2_beatsToTime(ReaProject* proj, double tpos, const int* measuresInOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap2_beatsToTime(<i>ReaProject</i> proj, tpos, <i>optional int</i> measuresIn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.TimeMap2_beatsToTime(<i>ReaProject</i> proj, <i>number</i> tpos, <i>optional number</i> measuresIn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_TimeMap2_beatsToTime(<i>ReaProject</i> proj, <i>Float</i> tpos, <i>const int</i> measuresInOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap2_GetNextChangeTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap2_GetDividedBpmAtTime(ReaProject* proj, double time)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap2_GetDividedBpmAtTime(<i>ReaProject</i> proj, time)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.TimeMap2_GetDividedBpmAtTime(<i>ReaProject</i> proj, <i>number</i> time)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_TimeMap2_GetDividedBpmAtTime(<i>ReaProject</i> proj, <i>Float</i> time)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap2_QNToTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap2_GetNextChangeTime(ReaProject* proj, double time)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap2_GetNextChangeTime(<i>ReaProject</i> proj, time)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.TimeMap2_GetNextChangeTime(<i>ReaProject</i> proj, <i>number</i> time)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_TimeMap2_GetNextChangeTime(<i>ReaProject</i> proj, <i>Float</i> time)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap2_timeToBeats",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap2_QNToTime(ReaProject* proj, double qn)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap2_QNToTime(<i>ReaProject</i> proj, qn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.TimeMap2_QNToTime(<i>ReaProject</i> proj, <i>number</i> qn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_TimeMap2_QNToTime(<i>ReaProject</i> proj, <i>Float</i> qn)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap2_timeToQN",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap2_timeToBeats(ReaProject* proj, double tpos, int* measuresOutOptional, int* cmlOutOptional, double* fullbeatsOutOptional, int* cdenomOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap2_timeToBeats(<i>ReaProject</i> proj, tpos, <i>optional int &amp;</i>measures, <i>optional int &amp;</i>cml, <i>optional &amp;</i>fullbeats, <i>optional int &amp;</i>cdenom)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> retval, <i>optional number </i>measures, <i>optional number </i>cml, <i>optional number </i>fullbeats, <i>optional number </i>cdenom = reaper.TimeMap2_timeToBeats(<i>ReaProject</i> proj, <i>number</i> tpos)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> retval, <i>ReaProject</i> proj, <i>Float</i> tpos, <i>Int</i> measuresOutOptional, <i>Int</i> cmlOutOptional, <i>Float</i> fullbeatsOutOptional, <i>Int</i> cdenomOutOptional) = RPR_TimeMap2_timeToBeats(proj, tpos, measuresOutOptional, cmlOutOptional, fullbeatsOutOptional, cdenomOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap_curFrameRate",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap2_timeToQN(ReaProject* proj, double tpos)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap2_timeToQN(<i>ReaProject</i> proj, tpos)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.TimeMap2_timeToQN(<i>ReaProject</i> proj, <i>number</i> tpos)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_TimeMap2_timeToQN(<i>ReaProject</i> proj, <i>Float</i> tpos)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap_GetDividedBpmAtTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap_curFrameRate(ReaProject* proj, bool* dropFrameOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap_curFrameRate(<i>ReaProject</i> proj, <i>optional bool &amp;</i>dropFrame)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> retval, <i>optional boolean </i>dropFrame = reaper.TimeMap_curFrameRate(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> retval, <i>ReaProject</i> proj, <i>Boolean</i> dropFrameOutOptional) = RPR_TimeMap_curFrameRate(proj, dropFrameOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap_GetMeasureInfo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap_GetDividedBpmAtTime(double time)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap_GetDividedBpmAtTime(time)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.TimeMap_GetDividedBpmAtTime(<i>number</i> time)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_TimeMap_GetDividedBpmAtTime(<i>Float</i> time)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap_GetMetronomePattern",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap_GetMeasureInfo(ReaProject* proj, int measure, double* qn_startOut, double* qn_endOut, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap_GetMeasureInfo(<i>ReaProject</i> proj, <i>int </i>measure, <i>&amp;</i>qn_start, <i>&amp;</i>qn_end, <i>int &amp;</i>timesig_num, <i>int &amp;</i>timesig_denom, <i>&amp;</i>tempo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> retval, <i>number </i>qn_start, <i>number </i>qn_end, <i>number </i>timesig_num, <i>number </i>timesig_denom, <i>number </i>tempo = reaper.TimeMap_GetMeasureInfo(<i>ReaProject</i> proj, <i>integer</i> measure)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> retval, <i>ReaProject</i> proj, <i>Int</i> measure, <i>Float</i> qn_startOut, <i>Float</i> qn_endOut, <i>Int</i> timesig_numOut, <i>Int</i> timesig_denomOut, <i>Float</i> tempoOut) = RPR_TimeMap_GetMeasureInfo(proj, measure, qn_startOut, qn_endOut, timesig_numOut, timesig_denomOut, tempoOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap_GetTimeSigAtTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TimeMap_GetMetronomePattern(ReaProject* proj, double time, char* pattern, int pattern_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TimeMap_GetMetronomePattern(<i>ReaProject</i> proj, time, #pattern)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>string </i>pattern = reaper.TimeMap_GetMetronomePattern(<i>ReaProject</i> proj, <i>number</i> time, <i>string </i>pattern)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>ReaProject</i> proj, <i>Float</i> time, <i>String</i> pattern, <i>Int</i> pattern_sz) = RPR_TimeMap_GetMetronomePattern(proj, time, pattern, pattern_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap_QNToMeasures",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TimeMap_GetTimeSigAtTime(ReaProject* proj, double time, int* timesig_numOut, int* timesig_denomOut, double* tempoOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TimeMap_GetTimeSigAtTime(<i>ReaProject</i> proj, time, <i>int &amp;</i>timesig_num, <i>int &amp;</i>timesig_denom, <i>&amp;</i>tempo)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number </i>timesig_num, <i>number </i>timesig_denom, <i>number </i>tempo = reaper.TimeMap_GetTimeSigAtTime(<i>ReaProject</i> proj, <i>number</i> time)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>ReaProject</i> proj, <i>Float</i> time, <i>Int</i> timesig_numOut, <i>Int</i> timesig_denomOut, <i>Float</i> tempoOut) = RPR_TimeMap_GetTimeSigAtTime(proj, time, timesig_numOut, timesig_denomOut, tempoOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap_QNToTime",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TimeMap_QNToMeasures(ReaProject* proj, double qn, double* qnMeasureStartOutOptional, double* qnMeasureEndOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TimeMap_QNToMeasures(<i>ReaProject</i> proj, qn, <i>optional &amp;</i>qnMeasureStart, <i>optional &amp;</i>qnMeasureEnd)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>optional number </i>qnMeasureStart, <i>optional number </i>qnMeasureEnd = reaper.TimeMap_QNToMeasures(<i>ReaProject</i> proj, <i>number</i> qn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>ReaProject</i> proj, <i>Float</i> qn, <i>Float</i> qnMeasureStartOutOptional, <i>Float</i> qnMeasureEndOutOptional) = RPR_TimeMap_QNToMeasures(proj, qn, qnMeasureStartOutOptional, qnMeasureEndOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap_QNToTime_abs",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap_QNToTime(double qn)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap_QNToTime(qn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.TimeMap_QNToTime(<i>number</i> qn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_TimeMap_QNToTime(<i>Float</i> qn)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap_timeToQN",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap_QNToTime_abs(ReaProject* proj, double qn)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap_QNToTime_abs(<i>ReaProject</i> proj, qn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.TimeMap_QNToTime_abs(<i>ReaProject</i> proj, <i>number</i> qn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_TimeMap_QNToTime_abs(<i>ReaProject</i> proj, <i>Float</i> qn)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TimeMap_timeToQN_abs",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap_timeToQN(double tpos)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap_timeToQN(tpos)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.TimeMap_timeToQN(<i>number</i> tpos)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_TimeMap_timeToQN(<i>Float</i> tpos)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ToggleTrackSendUIMute",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TimeMap_timeToQN_abs(ReaProject* proj, double tpos)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TimeMap_timeToQN_abs(<i>ReaProject</i> proj, tpos)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.TimeMap_timeToQN_abs(<i>ReaProject</i> proj, <i>number</i> tpos)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_TimeMap_timeToQN_abs(<i>ReaProject</i> proj, <i>Float</i> tpos)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Track_GetPeakHoldDB",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool ToggleTrackSendUIMute(MediaTrack* track, int send_idx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> ToggleTrackSendUIMute(<i>MediaTrack</i> track, <i>int </i>send_idx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.ToggleTrackSendUIMute(<i>MediaTrack</i> track, <i>integer</i> send_idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_ToggleTrackSendUIMute(<i>MediaTrack</i> track, <i>Int</i> send_idx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Track_GetPeakInfo",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double Track_GetPeakHoldDB(MediaTrack* track, int channel, bool clear)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> Track_GetPeakHoldDB(<i>MediaTrack</i> track, <i>int </i>channel, <i>bool </i>clear)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.Track_GetPeakHoldDB(<i>MediaTrack</i> track, <i>integer</i> channel, <i>boolean</i> clear)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_Track_GetPeakHoldDB(<i>MediaTrack</i> track, <i>Int</i> channel, <i>Boolean</i> clear)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackCtl_SetToolTip",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double Track_GetPeakInfo(MediaTrack* track, int channel)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> Track_GetPeakInfo(<i>MediaTrack</i> track, <i>int </i>channel)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.Track_GetPeakInfo(<i>MediaTrack</i> track, <i>integer</i> channel)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_Track_GetPeakInfo(<i>MediaTrack</i> track, <i>Int</i> channel)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_AddByName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TrackCtl_SetToolTip(const char* fmt, int xpos, int ypos, bool topmost)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TrackCtl_SetToolTip(\"fmt\", <i>int </i>xpos, <i>int </i>ypos, <i>bool </i>topmost)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TrackCtl_SetToolTip(<i>string</i> fmt, <i>integer</i> xpos, <i>integer</i> ypos, <i>boolean</i> topmost)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TrackCtl_SetToolTip(<i>String</i> fmt, <i>Int</i> xpos, <i>Int</i> ypos, <i>Boolean</i> topmost)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_CopyToTake",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TrackFX_AddByName(MediaTrack* track, const char* fxname, bool recFX, int instantiate)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TrackFX_AddByName(<i>MediaTrack</i> track, \"fxname\", <i>bool </i>recFX, <i>int </i>instantiate)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TrackFX_AddByName(<i>MediaTrack</i> track, <i>string</i> fxname, <i>boolean</i> recFX, <i>integer</i> instantiate)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TrackFX_AddByName(<i>MediaTrack</i> track, <i>String</i> fxname, <i>Boolean</i> recFX, <i>Int</i> instantiate)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_CopyToTrack",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TrackFX_CopyToTake(MediaTrack* src_track, int src_fx, MediaItem_Take* dest_take, int dest_fx, bool is_move)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TrackFX_CopyToTake(<i>MediaTrack</i> src_track, <i>int </i>src_fx, <i>MediaItem_Take</i> dest_take, <i>int </i>dest_fx, <i>bool </i>is_move)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TrackFX_CopyToTake(<i>MediaTrack</i> src_track, <i>integer</i> src_fx, <i>MediaItem_Take</i> dest_take, <i>integer</i> dest_fx, <i>boolean</i> is_move)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TrackFX_CopyToTake(<i>MediaTrack</i> src_track, <i>Int</i> src_fx, <i>MediaItem_Take</i> dest_take, <i>Int</i> dest_fx, <i>Boolean</i> is_move)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_Delete",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TrackFX_CopyToTrack(MediaTrack* src_track, int src_fx, MediaTrack* dest_track, int dest_fx, bool is_move)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TrackFX_CopyToTrack(<i>MediaTrack</i> src_track, <i>int </i>src_fx, <i>MediaTrack</i> dest_track, <i>int </i>dest_fx, <i>bool </i>is_move)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TrackFX_CopyToTrack(<i>MediaTrack</i> src_track, <i>integer</i> src_fx, <i>MediaTrack</i> dest_track, <i>integer</i> dest_fx, <i>boolean</i> is_move)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TrackFX_CopyToTrack(<i>MediaTrack</i> src_track, <i>Int</i> src_fx, <i>MediaTrack</i> dest_track, <i>Int</i> dest_fx, <i>Boolean</i> is_move)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_EndParamEdit",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_Delete(MediaTrack* track, int fx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_Delete(<i>MediaTrack</i> track, <i>int </i>fx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_Delete(<i>MediaTrack</i> track, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_Delete(<i>MediaTrack</i> track, <i>Int</i> fx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_FormatParamValue",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_EndParamEdit(MediaTrack* track, int fx, int param)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_EndParamEdit(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>param)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_EndParamEdit(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> param)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_EndParamEdit(<i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> param)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_FormatParamValueNormalized",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_FormatParamValue(MediaTrack* track, int fx, int param, double val, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_FormatParamValue(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>param, val, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.TrackFX_FormatParamValue(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> param, <i>number</i> val, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> val, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_TrackFX_FormatParamValue(track, fx, param, val, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetByName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_FormatParamValueNormalized(MediaTrack* track, int fx, int param, double value, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_FormatParamValueNormalized(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>param, value, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.TrackFX_FormatParamValueNormalized(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> param, <i>number</i> value, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> value, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_TrackFX_FormatParamValueNormalized(track, fx, param, value, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetChainVisible",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TrackFX_GetByName(MediaTrack* track, const char* fxname, bool instantiate)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TrackFX_GetByName(<i>MediaTrack</i> track, \"fxname\", <i>bool </i>instantiate)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TrackFX_GetByName(<i>MediaTrack</i> track, <i>string</i> fxname, <i>boolean</i> instantiate)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TrackFX_GetByName(<i>MediaTrack</i> track, <i>String</i> fxname, <i>Boolean</i> instantiate)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetCount",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TrackFX_GetChainVisible(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TrackFX_GetChainVisible(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TrackFX_GetChainVisible(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TrackFX_GetChainVisible(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetEnabled",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TrackFX_GetCount(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TrackFX_GetCount(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TrackFX_GetCount(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TrackFX_GetCount(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetEQ",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_GetEnabled(MediaTrack* track, int fx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_GetEnabled(<i>MediaTrack</i> track, <i>int </i>fx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_GetEnabled(<i>MediaTrack</i> track, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_GetEnabled(<i>MediaTrack</i> track, <i>Int</i> fx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetEQBandEnabled",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TrackFX_GetEQ(MediaTrack* track, bool instantiate)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TrackFX_GetEQ(<i>MediaTrack</i> track, <i>bool </i>instantiate)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TrackFX_GetEQ(<i>MediaTrack</i> track, <i>boolean</i> instantiate)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TrackFX_GetEQ(<i>MediaTrack</i> track, <i>Boolean</i> instantiate)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetEQParam",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_GetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_GetEQBandEnabled(<i>MediaTrack</i> track, <i>int </i>fxidx, <i>int </i>bandtype, <i>int </i>bandidx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_GetEQBandEnabled(<i>MediaTrack</i> track, <i>integer</i> fxidx, <i>integer</i> bandtype, <i>integer</i> bandidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_GetEQBandEnabled(<i>MediaTrack</i> track, <i>Int</i> fxidx, <i>Int</i> bandtype, <i>Int</i> bandidx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetFloatingWindow",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_GetEQParam(MediaTrack* track, int fxidx, int paramidx, int* bandtypeOut, int* bandidxOut, int* paramtypeOut, double* normvalOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_GetEQParam(<i>MediaTrack</i> track, <i>int </i>fxidx, <i>int </i>paramidx, <i>int &amp;</i>bandtype, <i>int &amp;</i>bandidx, <i>int &amp;</i>paramtype, <i>&amp;</i>normval)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>bandtype, <i>number </i>bandidx, <i>number </i>paramtype, <i>number </i>normval = reaper.TrackFX_GetEQParam(<i>MediaTrack</i> track, <i>integer</i> fxidx, <i>integer</i> paramidx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> fxidx, <i>Int</i> paramidx, <i>Int</i> bandtypeOut, <i>Int</i> bandidxOut, <i>Int</i> paramtypeOut, <i>Float</i> normvalOut) = RPR_TrackFX_GetEQParam(track, fxidx, paramidx, bandtypeOut, bandidxOut, paramtypeOut, normvalOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetFormattedParamValue",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>HWND TrackFX_GetFloatingWindow(MediaTrack* track, int index)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>HWND</i>  TrackFX_GetFloatingWindow(<i>MediaTrack</i> track, <i>int </i>index)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>HWND</i> reaper.TrackFX_GetFloatingWindow(<i>MediaTrack</i> track, <i>integer</i> index)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>HWND</i>  RPR_TrackFX_GetFloatingWindow(<i>MediaTrack</i> track, <i>Int</i> index)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetFXGUID",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_GetFormattedParamValue(MediaTrack* track, int fx, int param, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_GetFormattedParamValue(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>param, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.TrackFX_GetFormattedParamValue(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> param, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> param, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_TrackFX_GetFormattedParamValue(track, fx, param, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetFXName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>GUID* TrackFX_GetFXGUID(MediaTrack* track, int fx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  TrackFX_GetFXGUID(#retguid, <i>MediaTrack</i> track, <i>int </i>fx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> GUID = reaper.TrackFX_GetFXGUID(<i>MediaTrack</i> track, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>GUID</i>  RPR_TrackFX_GetFXGUID(<i>MediaTrack</i> track, <i>Int</i> fx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetInstrument",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_GetFXName(MediaTrack* track, int fx, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_GetFXName(<i>MediaTrack</i> track, <i>int </i>fx, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.TrackFX_GetFXName(<i>MediaTrack</i> track, <i>integer</i> fx, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> fx, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_TrackFX_GetFXName(track, fx, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetIOSize",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TrackFX_GetInstrument(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TrackFX_GetInstrument(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TrackFX_GetInstrument(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TrackFX_GetInstrument(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetNamedConfigParm",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TrackFX_GetIOSize(MediaTrack* track, int fx, int* inputPinsOutOptional, int* outputPinsOutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TrackFX_GetIOSize(<i>MediaTrack</i> track, <i>int </i>fx, <i>optional int &amp;</i>inputPins, <i>optional int &amp;</i>outputPins)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>optional number </i>inputPins, <i>optional number </i>outputPins = reaper.TrackFX_GetIOSize(<i>MediaTrack</i> track, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> inputPinsOutOptional, <i>Int</i> outputPinsOutOptional) = RPR_TrackFX_GetIOSize(track, fx, inputPinsOutOptional, outputPinsOutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetNumParams",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_GetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, char* bufOut, int bufOut_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_GetNamedConfigParm(<i>MediaTrack</i> track, <i>int </i>fx, \"parmname\", #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.TrackFX_GetNamedConfigParm(<i>MediaTrack</i> track, <i>integer</i> fx, <i>string</i> parmname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> fx, <i>String</i> parmname, <i>String</i> bufOut, <i>Int</i> bufOut_sz) = RPR_TrackFX_GetNamedConfigParm(track, fx, parmname, bufOut, bufOut_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetOffline",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TrackFX_GetNumParams(MediaTrack* track, int fx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TrackFX_GetNumParams(<i>MediaTrack</i> track, <i>int </i>fx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TrackFX_GetNumParams(<i>MediaTrack</i> track, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TrackFX_GetNumParams(<i>MediaTrack</i> track, <i>Int</i> fx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetOpen",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_GetOffline(MediaTrack* track, int fx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_GetOffline(<i>MediaTrack</i> track, <i>int </i>fx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_GetOffline(<i>MediaTrack</i> track, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_GetOffline(<i>MediaTrack</i> track, <i>Int</i> fx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetParam",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_GetOpen(MediaTrack* track, int fx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_GetOpen(<i>MediaTrack</i> track, <i>int </i>fx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_GetOpen(<i>MediaTrack</i> track, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_GetOpen(<i>MediaTrack</i> track, <i>Int</i> fx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetParameterStepSizes",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TrackFX_GetParam(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TrackFX_GetParam(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>param, <i>&amp;</i>minval, <i>&amp;</i>maxval)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> retval, <i>number </i>minval, <i>number </i>maxval = reaper.TrackFX_GetParam(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> param)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> retval, <i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> minvalOut, <i>Float</i> maxvalOut) = RPR_TrackFX_GetParam(track, fx, param, minvalOut, maxvalOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetParamEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_GetParameterStepSizes(MediaTrack* track, int fx, int param, double* stepOut, double* smallstepOut, double* largestepOut, bool* istoggleOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_GetParameterStepSizes(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>param, <i>&amp;</i>step, <i>&amp;</i>smallstep, <i>&amp;</i>largestep, <i>bool &amp;</i>istoggle)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>number </i>step, <i>number </i>smallstep, <i>number </i>largestep, <i>boolean </i>istoggle = reaper.TrackFX_GetParameterStepSizes(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> param)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> stepOut, <i>Float</i> smallstepOut, <i>Float</i> largestepOut, <i>Boolean</i> istoggleOut) = RPR_TrackFX_GetParameterStepSizes(track, fx, param, stepOut, smallstepOut, largestepOut, istoggleOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetParamName",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TrackFX_GetParamEx(MediaTrack* track, int fx, int param, double* minvalOut, double* maxvalOut, double* midvalOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TrackFX_GetParamEx(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>param, <i>&amp;</i>minval, <i>&amp;</i>maxval, <i>&amp;</i>midval)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> retval, <i>number </i>minval, <i>number </i>maxval, <i>number </i>midval = reaper.TrackFX_GetParamEx(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> param)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Float</i> retval, <i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> minvalOut, <i>Float</i> maxvalOut, <i>Float</i> midvalOut) = RPR_TrackFX_GetParamEx(track, fx, param, minvalOut, maxvalOut, midvalOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetParamNormalized",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_GetParamName(MediaTrack* track, int fx, int param, char* buf, int buf_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_GetParamName(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>param, #buf)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>buf = reaper.TrackFX_GetParamName(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> param, <i>string </i>buf)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> param, <i>String</i> buf, <i>Int</i> buf_sz) = RPR_TrackFX_GetParamName(track, fx, param, buf, buf_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetPinMappings",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>double TrackFX_GetParamNormalized(MediaTrack* track, int fx, int param)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>double </i> TrackFX_GetParamNormalized(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>param)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>number</i> reaper.TrackFX_GetParamNormalized(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> param)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Float</i>  RPR_TrackFX_GetParamNormalized(<i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> param)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetPreset",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TrackFX_GetPinMappings(MediaTrack* tr, int fx, int isoutput, int pin, int* high32OutOptional)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TrackFX_GetPinMappings(<i>MediaTrack</i> tr, <i>int </i>fx, <i>int </i>isoutput, <i>int </i>pin, <i>optional int &amp;</i>high32)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>optional number </i>high32 = reaper.TrackFX_GetPinMappings(<i>MediaTrack</i> tr, <i>integer</i> fx, <i>integer</i> isoutput, <i>integer</i> pin)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>MediaTrack</i> tr, <i>Int</i> fx, <i>Int</i> isoutput, <i>Int</i> pin, <i>Int</i> high32OutOptional) = RPR_TrackFX_GetPinMappings(tr, fx, isoutput, pin, high32OutOptional)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetPresetIndex",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_GetPreset(MediaTrack* track, int fx, char* presetname, int presetname_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_GetPreset(<i>MediaTrack</i> track, <i>int </i>fx, #presetname)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> retval, <i>string </i>presetname = reaper.TrackFX_GetPreset(<i>MediaTrack</i> track, <i>integer</i> fx, <i>string </i>presetname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Boolean</i> retval, <i>MediaTrack</i> track, <i>Int</i> fx, <i>String</i> presetname, <i>Int</i> presetname_sz) = RPR_TrackFX_GetPreset(track, fx, presetname, presetname_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetRecChainVisible",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TrackFX_GetPresetIndex(MediaTrack* track, int fx, int* numberOfPresetsOut)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TrackFX_GetPresetIndex(<i>MediaTrack</i> track, <i>int </i>fx, <i>int &amp;</i>numberOfPresets)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> retval, <i>number </i>numberOfPresets = reaper.TrackFX_GetPresetIndex(<i>MediaTrack</i> track, <i>integer</i> fx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>Int</i> retval, <i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> numberOfPresetsOut) = RPR_TrackFX_GetPresetIndex(track, fx, numberOfPresetsOut)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetRecCount",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TrackFX_GetRecChainVisible(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TrackFX_GetRecChainVisible(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TrackFX_GetRecChainVisible(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TrackFX_GetRecChainVisible(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_GetUserPresetFilename",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int TrackFX_GetRecCount(MediaTrack* track)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> TrackFX_GetRecCount(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.TrackFX_GetRecCount(<i>MediaTrack</i> track)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_TrackFX_GetRecCount(<i>MediaTrack</i> track)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_NavigatePresets",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TrackFX_GetUserPresetFilename(MediaTrack* track, int fx, char* fn, int fn_sz)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TrackFX_GetUserPresetFilename(<i>MediaTrack</i> track, <i>int </i>fx, #fn)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string </i>fn = reaper.TrackFX_GetUserPresetFilename(<i>MediaTrack</i> track, <i>integer</i> fx, <i>string </i>fn)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>(<i>MediaTrack</i> track, <i>Int</i> fx, <i>String</i> fn, <i>Int</i> fn_sz) = RPR_TrackFX_GetUserPresetFilename(track, fx, fn, fn_sz)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_SetEnabled",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_NavigatePresets(MediaTrack* track, int fx, int presetmove)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_NavigatePresets(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>presetmove)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_NavigatePresets(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> presetmove)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_NavigatePresets(<i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> presetmove)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_SetEQBandEnabled",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TrackFX_SetEnabled(MediaTrack* track, int fx, bool enabled)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TrackFX_SetEnabled(<i>MediaTrack</i> track, <i>int </i>fx, <i>bool </i>enabled)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TrackFX_SetEnabled(<i>MediaTrack</i> track, <i>integer</i> fx, <i>boolean</i> enabled)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TrackFX_SetEnabled(<i>MediaTrack</i> track, <i>Int</i> fx, <i>Boolean</i> enabled)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_SetEQParam",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_SetEQBandEnabled(MediaTrack* track, int fxidx, int bandtype, int bandidx, bool enable)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_SetEQBandEnabled(<i>MediaTrack</i> track, <i>int </i>fxidx, <i>int </i>bandtype, <i>int </i>bandidx, <i>bool </i>enable)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_SetEQBandEnabled(<i>MediaTrack</i> track, <i>integer</i> fxidx, <i>integer</i> bandtype, <i>integer</i> bandidx, <i>boolean</i> enable)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_SetEQBandEnabled(<i>MediaTrack</i> track, <i>Int</i> fxidx, <i>Int</i> bandtype, <i>Int</i> bandidx, <i>Boolean</i> enable)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_SetNamedConfigParm",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_SetEQParam(MediaTrack* track, int fxidx, int bandtype, int bandidx, int paramtype, double val, bool isnorm)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_SetEQParam(<i>MediaTrack</i> track, <i>int </i>fxidx, <i>int </i>bandtype, <i>int </i>bandidx, <i>int </i>paramtype, val, <i>bool </i>isnorm)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_SetEQParam(<i>MediaTrack</i> track, <i>integer</i> fxidx, <i>integer</i> bandtype, <i>integer</i> bandidx, <i>integer</i> paramtype, <i>number</i> val, <i>boolean</i> isnorm)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_SetEQParam(<i>MediaTrack</i> track, <i>Int</i> fxidx, <i>Int</i> bandtype, <i>Int</i> bandidx, <i>Int</i> paramtype, <i>Float</i> val, <i>Boolean</i> isnorm)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_SetOffline",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_SetNamedConfigParm(MediaTrack* track, int fx, const char* parmname, const char* value)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_SetNamedConfigParm(<i>MediaTrack</i> track, <i>int </i>fx, \"parmname\", \"value\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_SetNamedConfigParm(<i>MediaTrack</i> track, <i>integer</i> fx, <i>string</i> parmname, <i>string</i> value)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_SetNamedConfigParm(<i>MediaTrack</i> track, <i>Int</i> fx, <i>String</i> parmname, <i>String</i> value)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_SetOpen",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TrackFX_SetOffline(MediaTrack* track, int fx, bool offline)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TrackFX_SetOffline(<i>MediaTrack</i> track, <i>int </i>fx, <i>bool </i>offline)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TrackFX_SetOffline(<i>MediaTrack</i> track, <i>integer</i> fx, <i>boolean</i> offline)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TrackFX_SetOffline(<i>MediaTrack</i> track, <i>Int</i> fx, <i>Boolean</i> offline)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_SetParam",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TrackFX_SetOpen(MediaTrack* track, int fx, bool open)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TrackFX_SetOpen(<i>MediaTrack</i> track, <i>int </i>fx, <i>bool </i>open)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TrackFX_SetOpen(<i>MediaTrack</i> track, <i>integer</i> fx, <i>boolean</i> open)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TrackFX_SetOpen(<i>MediaTrack</i> track, <i>Int</i> fx, <i>Boolean</i> open)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_SetParamNormalized",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_SetParam(MediaTrack* track, int fx, int param, double val)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_SetParam(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>param, val)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_SetParam(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> param, <i>number</i> val)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_SetParam(<i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> val)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_SetPinMappings",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_SetParamNormalized(MediaTrack* track, int fx, int param, double value)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_SetParamNormalized(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>param, value)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_SetParamNormalized(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> param, <i>number</i> value)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_SetParamNormalized(<i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> param, <i>Float</i> value)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_SetPreset",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_SetPinMappings(MediaTrack* tr, int fx, int isoutput, int pin, int low32bits, int hi32bits)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_SetPinMappings(<i>MediaTrack</i> tr, <i>int </i>fx, <i>int </i>isoutput, <i>int </i>pin, <i>int </i>low32bits, <i>int </i>hi32bits)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_SetPinMappings(<i>MediaTrack</i> tr, <i>integer</i> fx, <i>integer</i> isoutput, <i>integer</i> pin, <i>integer</i> low32bits, <i>integer</i> hi32bits)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_SetPinMappings(<i>MediaTrack</i> tr, <i>Int</i> fx, <i>Int</i> isoutput, <i>Int</i> pin, <i>Int</i> low32bits, <i>Int</i> hi32bits)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_SetPresetByIndex",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_SetPreset(MediaTrack* track, int fx, const char* presetname)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_SetPreset(<i>MediaTrack</i> track, <i>int </i>fx, \"presetname\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_SetPreset(<i>MediaTrack</i> track, <i>integer</i> fx, <i>string</i> presetname)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_SetPreset(<i>MediaTrack</i> track, <i>Int</i> fx, <i>String</i> presetname)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackFX_Show",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool TrackFX_SetPresetByIndex(MediaTrack* track, int fx, int idx)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> TrackFX_SetPresetByIndex(<i>MediaTrack</i> track, <i>int </i>fx, <i>int </i>idx)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.TrackFX_SetPresetByIndex(<i>MediaTrack</i> track, <i>integer</i> fx, <i>integer</i> idx)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_TrackFX_SetPresetByIndex(<i>MediaTrack</i> track, <i>Int</i> fx, <i>Int</i> idx)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackList_AdjustWindows",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TrackFX_Show(MediaTrack* track, int index, int showFlag)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TrackFX_Show(<i>MediaTrack</i> track, <i>int </i>index, <i>int </i>showFlag)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TrackFX_Show(<i>MediaTrack</i> track, <i>integer</i> index, <i>integer</i> showFlag)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TrackFX_Show(<i>MediaTrack</i> track, <i>Int</i> index, <i>Int</i> showFlag)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "TrackList_UpdateAllExternalSurfaces",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TrackList_AdjustWindows(bool isMinor)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TrackList_AdjustWindows(<i>bool </i>isMinor)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TrackList_AdjustWindows(<i>boolean</i> isMinor)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TrackList_AdjustWindows(<i>Boolean</i> isMinor)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_BeginBlock",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void TrackList_UpdateAllExternalSurfaces()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>TrackList_UpdateAllExternalSurfaces()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.TrackList_UpdateAllExternalSurfaces()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_TrackList_UpdateAllExternalSurfaces()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_BeginBlock2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Undo_BeginBlock()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Undo_BeginBlock()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Undo_BeginBlock()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Undo_BeginBlock()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_CanRedo2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Undo_BeginBlock2(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Undo_BeginBlock2(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Undo_BeginBlock2(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Undo_BeginBlock2(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_CanUndo2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* Undo_CanRedo2(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  Undo_CanRedo2(#retval, <i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.Undo_CanRedo2(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_Undo_CanRedo2(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_DoRedo2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>const char* Undo_CanUndo2(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>bool  Undo_CanUndo2(#retval, <i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>string</i> reaper.Undo_CanUndo2(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>String</i>  RPR_Undo_CanUndo2(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_DoUndo2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int Undo_DoRedo2(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> Undo_DoRedo2(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.Undo_DoRedo2(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_Undo_DoRedo2(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_EndBlock",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>int Undo_DoUndo2(ReaProject* proj)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>int </i> Undo_DoUndo2(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>integer</i> reaper.Undo_DoUndo2(<i>ReaProject</i> proj)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Int</i>  RPR_Undo_DoUndo2(<i>ReaProject</i> proj)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_EndBlock2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Undo_EndBlock(const char* descchange, int extraflags)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Undo_EndBlock(\"descchange\", <i>int </i>extraflags)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Undo_EndBlock(<i>string</i> descchange, <i>integer</i> extraflags)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Undo_EndBlock(<i>String</i> descchange, <i>Int</i> extraflags)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_OnStateChange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Undo_EndBlock2(ReaProject* proj, const char* descchange, int extraflags)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Undo_EndBlock2(<i>ReaProject</i> proj, \"descchange\", <i>int </i>extraflags)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Undo_EndBlock2(<i>ReaProject</i> proj, <i>string</i> descchange, <i>integer</i> extraflags)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Undo_EndBlock2(<i>ReaProject</i> proj, <i>String</i> descchange, <i>Int</i> extraflags)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_OnStateChange2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Undo_OnStateChange(const char* descchange)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Undo_OnStateChange(\"descchange\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Undo_OnStateChange(<i>string</i> descchange)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Undo_OnStateChange(<i>String</i> descchange)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_OnStateChange_Item",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Undo_OnStateChange2(ReaProject* proj, const char* descchange)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Undo_OnStateChange2(<i>ReaProject</i> proj, \"descchange\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Undo_OnStateChange2(<i>ReaProject</i> proj, <i>string</i> descchange)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Undo_OnStateChange2(<i>ReaProject</i> proj, <i>String</i> descchange)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_OnStateChangeEx",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Undo_OnStateChange_Item(ReaProject* proj, const char* name, MediaItem* item)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Undo_OnStateChange_Item(<i>ReaProject</i> proj, \"name\", <i>MediaItem</i> item)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Undo_OnStateChange_Item(<i>ReaProject</i> proj, <i>string</i> name, <i>MediaItem</i> item)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Undo_OnStateChange_Item(<i>ReaProject</i> proj, <i>String</i> name, <i>MediaItem</i> item)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "Undo_OnStateChangeEx2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Undo_OnStateChangeEx(const char* descchange, int whichStates, int trackparm)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Undo_OnStateChangeEx(\"descchange\", <i>int </i>whichStates, <i>int </i>trackparm)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Undo_OnStateChangeEx(<i>string</i> descchange, <i>integer</i> whichStates, <i>integer</i> trackparm)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Undo_OnStateChangeEx(<i>String</i> descchange, <i>Int</i> whichStates, <i>Int</i> trackparm)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "UpdateArrange",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void Undo_OnStateChangeEx2(ReaProject* proj, const char* descchange, int whichStates, int trackparm)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>Undo_OnStateChangeEx2(<i>ReaProject</i> proj, \"descchange\", <i>int </i>whichStates, <i>int </i>trackparm)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.Undo_OnStateChangeEx2(<i>ReaProject</i> proj, <i>string</i> descchange, <i>integer</i> whichStates, <i>integer</i> trackparm)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_Undo_OnStateChangeEx2(<i>ReaProject</i> proj, <i>String</i> descchange, <i>Int</i> whichStates, <i>Int</i> trackparm)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "UpdateItemInProject",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void UpdateArrange()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>UpdateArrange()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.UpdateArrange()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_UpdateArrange()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "UpdateTimeline",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void UpdateItemInProject(MediaItem* item)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>UpdateItemInProject(<i>MediaItem</i> item)</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.UpdateItemInProject(<i>MediaItem</i> item)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_UpdateItemInProject(<i>MediaItem</i> item)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ValidatePtr",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void UpdateTimeline()</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>UpdateTimeline()</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.UpdateTimeline()</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_UpdateTimeline()</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ValidatePtr2",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool ValidatePtr(void* pointer, const char* ctypename)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> ValidatePtr(<i>void*</i> pointer, \"ctypename\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.ValidatePtr(<i>identifier</i> pointer, <i>string</i> ctypename)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_ValidatePtr(<i>void</i> pointer, <i>String</i> ctypename)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "ViewPrefs",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>bool ValidatePtr2(ReaProject* proj, void* pointer, const char* ctypename)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code><i>bool </i> ValidatePtr2(<i>ReaProject</i> proj, <i>void*</i> pointer, \"ctypename\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code><i>boolean</i> reaper.ValidatePtr2(<i>ReaProject</i> proj, <i>identifier</i> pointer, <i>string</i> ctypename)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code><i>Boolean</i>  RPR_ValidatePtr2(<i>ReaProject</i> proj, <i>void</i> pointer, <i>String</i> ctypename)</code><br><br></div>\n"
            },
            "dist": 0
        },
        {
            "name": "eel_abs",
            "langs": {
                "c_func": "<div class=\"c_func\"><span class='all_view'>C: </span><code>void ViewPrefs(int page, const char* pageByName)</code><br><br></div>\n",
                "e_func": "<div class=\"e_func\"><span class='all_view'>EEL2: </span><code>ViewPrefs(<i>int </i>page, \"pageByName\")</code><br><br></div>\n",
                "l_func": "<div class=\"l_func\"><span class='all_view'>Lua: </span><code>reaper.ViewPrefs(<i>integer</i> page, <i>string</i> pageByName)</code><br><br></div>\n",
                "p_func": "<div class=\"p_func\"><span class='all_view'>Python: </span><code>RPR_ViewPrefs(<i>Int</i> page, <i>String</i> pageByName)</code><br><br></div>\n",
                "e_funcs": "<div class=\"e_funcs\"><BR><BR><hr><br><h2>ReaScript/EEL2 Built-in Function List</h2>\n"
            },
            "dist": 0
        },
        {
            "name": "lua_atexit",
            "langs": {
                "l_funcs": "EEL2: <code>while(expression)</code><BR><BR>Executes expression until expression evaluates to zero, or until 1048576iterations occur. An alternate and more useful syntax is while (expression) ( statements ), which evaluates statements after every non-zero evaluation of expression.<BR><BR></div><div class=\"l_funcs\"><br><br><hr><br><h2>ReaScript/Lua Built-In Function list</h2>\n"
            },
            "dist": 0
        },
        {
            "name": "python_atexit",
            "langs": {
                "p_funcs": "</div><div class=\"p_funcs\"><br><br><hr><br><h2>ReaScript/Python Built-In Function list</h2>\n"
            },
            "dist": 0
        }
    ]
}